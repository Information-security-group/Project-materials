function auxGetDevCapsA(uDeviceID: UINT; lpCaps: PAuxCapsA; uSize: UINT): MMRESULT; stdcall;
function auxGetDevCapsW(uDeviceID: UINT; lpCaps: PAuxCapsW; uSize: UINT): MMRESULT; stdcall;
function auxGetNumDevs: UINT; stdcall;
function auxGetVolume(uDeviceID: UINT; lpdwVolume: PDWORD): MMRESULT; stdcall;
function auxOutMessage(uDeviceID, uMessage: UINT; dw1, dw2: DWORD): MMRESULT; stdcall;
function auxSetVolume(uDeviceID: UINT; dwVolume: DWORD): MMRESULT; stdcall;
function CloseDriver(hDriver: HDRVR; lParam1, lParam2: Longint): Longint; stdcall;
function DefDriverProc(dwDriverIdentifier: DWORD; hdrvr: HDRVR; uMsg: UINT;lParam1, lParam2: LPARAM): Longint; stdcall;
function DrvGetModuleHandle(hDriver: HDRVR): HMODULE; stdcall;
function GetDriverModuleHandle(hDriver: HDRVR): HMODULE; stdcall;
function joyGetDevCapsA(uJoyID: UINT; lpCaps: PJoyCapsA; uSize: UINT): MMRESULT; stdcall;
function joyGetDevCapsW(uJoyID: UINT; lpCaps: PJoyCapsW; uSize: UINT): MMRESULT; stdcall;
function joyGetNumDevs: UINT; stdcall;
function joyGetPos(uJoyID: UINT; lpInfo: PJoyInfo): MMRESULT; stdcall;
function joyGetPosEx(uJoyID: UINT; lpInfo: PJoyInfoEx): MMRESULT; stdcall;
function joyGetThreshold(uJoyID: UINT; lpuThreshold: PUINT): MMRESULT; stdcall;
function joyReleaseCapture(uJoyID: UINT): MMRESULT; stdcall;
function joySetCapture(Handle: HWND; uJoyID, uPeriod: UINT; bChanged: BOOL): MMRESULT; stdcall;
function joySetThreshold(uJoyID, uThreshold: UINT): MMRESULT; stdcall;
function mciExecute(pszCommand: LPCSTR): BOOL; stdcall;
function mciGetCreatorTask(mciId: MCIDEVICEID): HTASK; stdcall;
function mciGetDeviceIDA(pszDevice: PAnsiChar): MCIDEVICEID; stdcall;
function mciGetDeviceIDFromElementIDA(dwElementID: DWORD; lpstrType: PAnsiChar): MCIDEVICEID; stdcall;
function mciGetDeviceIDFromElementIDW(dwElementID: DWORD; lpstrType: PWideChar): MCIDEVICEID; stdcall;
function mciGetDeviceIDW(pszDevice: PWideChar): MCIDEVICEID; stdcall;
function mciGetErrorStringA(mcierr: MCIERROR; pszText: PAnsiChar; uLength: UINT): BOOL; stdcall;
function mciGetErrorStringW(mcierr: MCIERROR; pszText: PWideChar; uLength: UINT): BOOL; stdcall;
function mciGetYieldProc(mciId: MCIDEVICEID; lpdwYieldData: PDWORD): TFNYieldProc; stdcall;
function mciSendCommandA(mciId: MCIDEVICEID; uMessage: UINT;dwParam1, dwParam2: DWORD): MCIERROR; stdcall;
function mciSendCommandW(mciId: MCIDEVICEID; uMessage: UINT;dwParam1, dwParam2: DWORD): MCIERROR; stdcall;
function mciSendStringA(lpstrCommand, lpstrReturnString: PAnsiChar;uReturnLength: UINT; hWndCallback: HWND): MCIERROR; stdcall;
function mciSendStringW(lpstrCommand, lpstrReturnString: PWideChar;uReturnLength: UINT; hWndCallback: HWND): MCIERROR; stdcall;
function mciSetYieldProc(mciId: MCIDEVICEID; fpYieldProc: TFNYieldProc;dwYieldData: DWORD): BOOL; stdcall;
function midiConnect(hmi: HMIDI; hmo: HMIDIOUT; pReserved: Pointer): MMRESULT; stdcall;
function midiDisconnect(hmi: HMIDI; hmo: HMIDIOUT; pReserved: Pointer): MMRESULT; stdcall;
function midiInAddBuffer(hMidiIn: HMIDIIN; lpMidiInHdr: PMidiHdr; uSize: UINT): MMRESULT; stdcall;
function midiInClose(hMidiIn: HMIDIIN): MMRESULT; stdcall;
function midiInGetDevCapsA(DeviceID: UINT; lpCaps: PMidiInCapsA; uSize: UINT): MMRESULT; stdcall;
function midiInGetDevCapsW(DeviceID: UINT; lpCaps: PMidiInCapsW; uSize: UINT): MMRESULT; stdcall;
function midiInGetErrorTextA(mmrError: MMRESULT; pszText: PAnsiChar; uSize: UINT): MMRESULT; stdcall;
function midiInGetErrorTextW(mmrError: MMRESULT; pszText: PWideChar; uSize: UINT): MMRESULT; stdcall;
function midiInGetID(hMidiIn: HMIDIIN; lpuDeviceID: PUINT): MMRESULT; stdcall;
function midiInGetNumDevs: UINT; stdcall;
function midiInMessage(hMidiIn: HMIDIIN; uMessage: UINT; dw1, dw2: DWORD): MMRESULT; stdcall;
function midiInOpen(lphMidiIn: PHMIDIIN; uDeviceID: UINT;dwCallback, dwInstance, dwFlags: DWORD): MMRESULT; stdcall;
function midiInPrepareHeader(hMidiIn: HMIDIIN; lpMidiInHdr: PMidiHdr; uSize: UINT): MMRESULT; stdcall;
function midiInReset(hMidiIn: HMIDIIN): MMRESULT; stdcall;
function midiInStart(hMidiIn: HMIDIIN): MMRESULT; stdcall;
function midiInStop(hMidiIn: HMIDIIN): MMRESULT; stdcall;
function midiInUnprepareHeader(hMidiIn: HMIDIIN; lpMidiInHdr: PMidiHdr; uSize: UINT): MMRESULT; stdcall;
function midiOutCacheDrumPatches(hMidiOut: HMIDIOUT;uPatch: UINT; lpwKeyArray: PWord; uFlags: UINT): MMRESULT; stdcall;
function midiOutCachePatches(hMidiOut: HMIDIOUT;uBank: UINT; lpwPatchArray: PWord; uFlags: UINT): MMRESULT; stdcall;
function midiOutClose(hMidiOut: HMIDIOUT): MMRESULT; stdcall;
function midiOutGetDevCapsA(uDeviceID: UINT; lpCaps: PMidiOutCapsA; uSize: UINT): MMRESULT; stdcall;
function midiOutGetDevCapsW(uDeviceID: UINT; lpCaps: PMidiOutCapsW; uSize: UINT): MMRESULT; stdcall;
function midiOutGetErrorTextA(mmrError: MMRESULT; pszText: PAnsiChar; uSize: UINT): MMRESULT; stdcall;
function midiOutGetErrorTextW(mmrError: MMRESULT; pszText: PWideChar; uSize: UINT): MMRESULT; stdcall;
function midiOutGetID(hMidiOut: HMIDIOUT; lpuDeviceID: PUINT): MMRESULT; stdcall;
function midiOutGetNumDevs: UINT; stdcall;
function midiOutGetVolume(hmo: HMIDIOUT; lpdwVolume: PDWORD): MMRESULT; stdcall;
function midiOutLongMsg(hMidiOut: HMIDIOUT; lpMidiOutHdr: PMidiHdr; uSize: UINT): MMRESULT; stdcall;
function midiOutMessage(hMidiOut: HMIDIOUT; uMessage: UINT; dw1, dw2: DWORD): MMRESULT; stdcall;
function midiOutOpen(lphMidiOut: PHMIDIOUT; uDeviceID: UINT;dwCallback, dwInstance, dwFlags: DWORD): MMRESULT; stdcall;
function midiOutPrepareHeader(hMidiOut: HMIDIOUT; lpMidiOutHdr: PMidiHdr; uSize: UINT): MMRESULT; stdcall;
function midiOutReset(hMidiOut: HMIDIOUT): MMRESULT; stdcall;
function midiOutSetVolume(hmo: HMIDIOUT; dwVolume: DWORD): MMRESULT; stdcall;
function midiOutShortMsg(hMidiOut: HMIDIOUT; dwMsg: DWORD): MMRESULT; stdcall;
function midiOutUnprepareHeader(hMidiOut: HMIDIOUT; lpMidiOutHdr: PMidiHdr; uSize: UINT): MMRESULT; stdcall;
function midiStreamClose(hms: HMIDISTRM): MMRESULT; stdcall;
function midiStreamOpen(phms: PHMIDISTRM; puDeviceID: PUINT;cMidi, dwCallback, dwInstance, fdwOpen: DWORD): MMRESULT; stdcall;
function midiStreamOut(hms: HMIDISTRM; pmh: PMidiHdr; cbmh: UINT): MMRESULT; stdcall;
function midiStreamPause(hms: HMIDISTRM): MMRESULT; stdcall;
function midiStreamPosition(hms: HMIDISTRM; lpmmt: PMMTime; cbmmt: UINT): MMRESULT; stdcall;
function midiStreamProperty(hms: HMIDISTRM; lppropdata: PBYTE; dwProperty: DWORD): MMRESULT; stdcall;
function midiStreamRestart(hms: HMIDISTRM): MMRESULT; stdcall;
function midiStreamStop(hms: HMIDISTRM): MMRESULT; stdcall;
function mixerClose(hmx: HMIXER): MMRESULT; stdcall;
function mixerGetControlDetailsA(hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT; stdcall;
function mixerGetControlDetailsW(hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT; stdcall;
function mixerGetDevCapsA(uMxId: UINT; pmxcaps: PMixerCapsA; cbmxcaps: UINT): MMRESULT; stdcall;
function mixerGetDevCapsW(uMxId: UINT; pmxcaps: PMixerCapsW; cbmxcaps: UINT): MMRESULT; stdcall;
function mixerGetID(hmxobj: HMIXEROBJ; var puMxId: UINT; fdwId: DWORD): MMRESULT; stdcall;
function mixerGetLineControlsA(hmxobj: HMIXEROBJ; pmxlc: PMixerLineControlsA; fdwControls: DWORD): MMRESULT; stdcall;
function mixerGetLineControlsW(hmxobj: HMIXEROBJ; pmxlc: PMixerLineControlsW; fdwControls: DWORD): MMRESULT; stdcall;
function mixerGetLineInfoA(hmxobj: HMIXEROBJ; pmxl: PMixerLineA;fdwInfo: DWORD): MMRESULT; stdcall;
function mixerGetLineInfoW(hmxobj: HMIXEROBJ; pmxl: PMixerLineW;fdwInfo: DWORD): MMRESULT; stdcall;
function mixerGetNumDevs: UINT; stdcall;
function mixerMessage(hmx: HMIXER; uMsg: UINT; dwParam1, dwParam2: DWORD): DWORD; stdcall;
function mixerOpen(phmx: PHMIXER; uMxId: UINT; dwCallback, dwInstance, fdwOpen: DWORD): MMRESULT; stdcall;
function mixerSetControlDetails(hmxobj: HMIXEROBJ; pmxcd: PMixerControlDetails; fdwDetails: DWORD): MMRESULT; stdcall;
function mmioAdvance(hmmio: HMMIO; lpmmioinfo: PMMIOInfo; uFlags: UINT): MMRESULT; stdcall;
function mmioAscend(hmmio: HMMIO; lpck: PMMCKInfo; uFlags: UINT): MMRESULT; stdcall;
function mmioClose(hmmio: HMMIO; uFlags: UINT): MMRESULT; stdcall;
function mmioCreateChunk(hmmio: HMMIO; lpck: PMMCKInfo; uFlags: UINT): MMRESULT; stdcall;{***************************************************************************MCI support***************************************************************************}type{$EXTERNALSYM MCIERROR}MCIERROR = DWORD;     { error return code, 0 means no error }{$EXTERNALSYM MCIDEVICEID}MCIDEVICEID = UINT;   { MCI device ID type }TFNYieldProc = function(mciId: MCIDEVICEID; dwYieldData: DWORD): UINT stdcall;
function mmioDescend(hmmio: HMMIO; lpck: PMMCKInfo;lpckParent: PMMCKInfo; uFlags: UINT): MMRESULT; stdcall;
function mmioFlush(hmmio: HMMIO; uFlags: UINT): MMRESULT; stdcall;
function mmioGetInfo(hmmio: HMMIO; lpmmioinfo: PMMIOInfo; uFlags: UINT): MMRESULT; stdcall;
function mmioInstallIOProcA(fccIOProc: FOURCC; pIOProc: TFNMMIOProc;dwFlags: DWORD): TFNMMIOProc; stdcall;
function mmioInstallIOProcW(fccIOProc: FOURCC; pIOProc: TFNMMIOProc;dwFlags: DWORD): TFNMMIOProc; stdcall;
function mmioOpenA(szFileName: PChar; lpmmioinfo: PMMIOInfo;dwOpenFlags: DWORD): HMMIO; stdcall;
function mmioOpenW(szFileName: PChar; lpmmioinfo: PMMIOInfo;dwOpenFlags: DWORD): HMMIO; stdcall;
function mmioRead(hmmio: HMMIO; pch: PChar; cch: Longint): Longint; stdcall;
function mmioRenameA(szFileName, szNewFileName: PAnsiChar;lpmmioinfo: PMMIOInfo; dwRenameFlags: DWORD): MMRESULT; stdcall;
function mmioRenameW(szFileName, szNewFileName: PWideChar;lpmmioinfo: PMMIOInfo; dwRenameFlags: DWORD): MMRESULT; stdcall;
function mmioSeek(hmmio: HMMIO; lOffset: Longint;iOrigin: Integer): Longint; stdcall;
function mmioSendMessage(hmmio: HMMIO; uMessage: UINT;lParam1, lParam2: DWORD): Longint; stdcall;
function mmioSetBuffer(hmmio: HMMIO; pchBuffer: PChar; cchBuffer: Longint;uFlags: Word): MMRESULT; stdcall;
function mmioSetInfo(hmmio: HMMIO; lpmmioinfo: PMMIOInfo; uFlags: UINT): MMRESULT; stdcall;
function mmioStringToFOURCCA(sz: PAnsiChar; uFlags: UINT): FOURCC; stdcall;
function mmioStringToFOURCCW(sz: PWideChar; uFlags: UINT): FOURCC; stdcall;
function mmioWrite(hmmio: HMMIO; pch: PChar; cch: Longint): Longint; stdcall;
function mmsystemGetVersion: UINT; stdcall;
function OpenDriver(szDriverName: PWideChar; szSectionName: PWideChar; lParam2: Longint): HDRVR; stdcall;
function PlaySoundA(pszSound: PAnsiChar; hmod: HMODULE; fdwSound: DWORD): BOOL; stdcall;
function PlaySoundW(pszSound: PWideChar; hmod: HMODULE; fdwSound: DWORD): BOOL; stdcall;
function SendDriverMessage(hDriver: HDRVR; message: UINT; lParam1, lParam2: Longint): Longint; stdcall;
function sndPlaySoundA(lpszSoundName: PAnsiChar; uFlags: UINT): BOOL; stdcall;
function sndPlaySoundW(lpszSoundName: PWideChar; uFlags: UINT): BOOL; stdcall;
function timeBeginPeriod(uPeriod: UINT): MMRESULT; stdcall;
function timeEndPeriod(uPeriod: UINT): MMRESULT; stdcall;
function timeGetDevCaps(lpTimeCaps: PTimeCaps; uSize: UINT): MMRESULT; stdcall;
function timeGetSystemTime(lpTime: PMMTime; uSize: Word): MMRESULT; stdcall;
function timeGetTime: DWORD; stdcall;
function timeKillEvent(uTimerID: UINT): MMRESULT; stdcall;
function waveInAddBuffer(hWaveIn: HWAVEIN; lpWaveInHdr: PWaveHdr;uSize: UINT): MMRESULT; stdcall;
function waveInClose(hWaveIn: HWAVEIN): MMRESULT; stdcall;
function waveInGetDevCapsA(hwo: HWAVEOUT; lpCaps: PWaveInCapsA; uSize: UINT): MMRESULT; stdcall;
function waveInGetDevCapsW(hwo: HWAVEOUT; lpCaps: PWaveInCapsW; uSize: UINT): MMRESULT; stdcall;
function waveInGetErrorTextA(mmrError: MMRESULT; lpText: PAnsiChar; uSize: UINT): MMRESULT; stdcall;
function waveInGetErrorTextW(mmrError: MMRESULT; lpText: PWideChar; uSize: UINT): MMRESULT; stdcall;
function waveInGetID(hWaveIn: HWAVEIN; lpuDeviceID: PUINT): MMRESULT; stdcall;
function waveInGetNumDevs: UINT; stdcall;
function waveInGetPosition(hWaveIn: HWAVEIN; lpInfo: PMMTime;uSize: UINT): MMRESULT; stdcall;
function waveInMessage(hWaveIn: HWAVEIN; uMessage: UINT;dw1, dw2: DWORD): MMRESULT; stdcall;
function waveInOpen(lphWaveIn: PHWAVEIN; uDeviceID: UINT;lpFormatEx: PWaveFormatEx; dwCallback, dwInstance, dwFlags: DWORD): MMRESULT; stdcall;
function waveInPrepareHeader(hWaveIn: HWAVEIN; lpWaveInHdr: PWaveHdr;uSize: UINT): MMRESULT; stdcall;
function waveInReset(hWaveIn: HWAVEIN): MMRESULT; stdcall;
function waveInStart(hWaveIn: HWAVEIN): MMRESULT; stdcall;
function waveInStop(hWaveIn: HWAVEIN): MMRESULT; stdcall;
function waveInUnprepareHeader(hWaveIn: HWAVEIN; lpWaveInHdr: PWaveHdr;uSize: UINT): MMRESULT; stdcall;
function waveOutBreakLoop(hWaveOut: HWAVEOUT): MMRESULT; stdcall;
function waveOutClose(hWaveOut: HWAVEOUT): MMRESULT; stdcall;
function waveOutGetDevCapsA(uDeviceID: UINT; lpCaps: PWaveOutCapsA; uSize: UINT): MMRESULT; stdcall;
function waveOutGetDevCapsW(uDeviceID: UINT; lpCaps: PWaveOutCapsW; uSize: UINT): MMRESULT; stdcall;
function waveOutGetErrorTextA(mmrError: MMRESULT; lpText: PAnsiChar; uSize: UINT): MMRESULT; stdcall;
function waveOutGetErrorTextW(mmrError: MMRESULT; lpText: PWideChar; uSize: UINT): MMRESULT; stdcall;
function waveOutGetID(hWaveOut: HWAVEOUT; lpuDeviceID: PUINT): MMRESULT; stdcall;
function waveOutGetNumDevs: UINT; stdcall;
function waveOutGetPitch(hWaveOut: HWAVEOUT; lpdwPitch: PDWORD): MMRESULT; stdcall;
function waveOutGetPlaybackRate(hWaveOut: HWAVEOUT; lpdwRate: PDWORD): MMRESULT; stdcall;
function waveOutGetPosition(hWaveOut: HWAVEOUT; lpInfo: PMMTime; uSize: UINT): MMRESULT; stdcall;
function waveOutGetVolume(hwo: HWAVEOUT; lpdwVolume: PDWORD): MMRESULT; stdcall;
function waveOutMessage(hWaveOut: HWAVEOUT; uMessage: UINT; dw1, dw2: DWORD): Longint; stdcall;
function waveOutOpen(lphWaveOut: PHWaveOut; uDeviceID: UINT;lpFormat: PWaveFormatEx; dwCallback, dwInstance, dwFlags: DWORD): MMRESULT; stdcall;
function waveOutPause(hWaveOut: HWAVEOUT): MMRESULT; stdcall;
function waveOutPrepareHeader(hWaveOut: HWAVEOUT; lpWaveOutHdr: PWaveHdr;uSize: UINT): MMRESULT; stdcall;
function waveOutReset(hWaveOut: HWAVEOUT): MMRESULT; stdcall;
function waveOutRestart(hWaveOut: HWAVEOUT): MMRESULT; stdcall;
function waveOutSetPitch(hWaveOut: HWAVEOUT; dwPitch: DWORD): MMRESULT; stdcall;
function waveOutSetPlaybackRate(hWaveOut: HWAVEOUT; dwRate: DWORD): MMRESULT; stdcall;
function waveOutSetVolume(hwo: HWAVEOUT; dwVolume: DWORD): MMRESULT; stdcall;
function waveOutUnprepareHeader(hWaveOut: HWAVEOUT; lpWaveOutHdr: PWaveHdr;uSize: UINT): MMRESULT; stdcall;
function waveOutWrite(hWaveOut: HWAVEOUT; lpWaveOutHdr: PWaveHdr;uSize: UINT): MMRESULT; stdcall;
