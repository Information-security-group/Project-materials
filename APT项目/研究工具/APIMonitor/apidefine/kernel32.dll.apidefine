function ActivateActCtx(hActCtx: HANDLE; var lpCookie: ULONG_PTR): BOOL; stdcall;
function AddAtomA(lpString: PAnsiChar): ATOM; stdcall;
function AddAtomW(lpString: PWideChar): ATOM; stdcall;
function AddConsoleAliasA(Source, Target, ExeName: LPSTR): BOOL; stdcall;
function AddConsoleAliasW(Source, Target, ExeName: LPWSTR): BOOL; stdcall;
procedure AddRefActCtx(hActCtx: HANDLE); stdcall;
function AddVectoredExceptionHandler(FirstHandler: ULONG;VectoredHandler: PVECTORED_EXCEPTION_HANDLER): PVOID; stdcall;
function AllocateUserPhysicalPages(hProcess: HANDLE; var NumberOfPages: ULONG_PTR;PageArray: PULONG_PTR): BOOL; stdcall;
function AllocConsole: BOOL; stdcall;
function AreFileApisANSI: BOOL; stdcall;
function AssignProcessToJobObject(hJob, hProcess: HANDLE): BOOL; stdcall;
function AttachConsole(dwProcessId: DWORD): BOOL; stdcall;
function BackupRead(hFile: THandle; lpBuffer: PByte; nNumberOfBytesToRead: DWORD;var lpNumberOfBytesRead: DWORD; bAbort: BOOL;bProcessSecurity: BOOL; var lpContext: Pointer): BOOL; stdcall;
function BackupSeek(hFile: THandle; dwLowBytesToSeek, dwHighBytesToSeek: DWORD;var lpdwLowByteSeeked, lpdwHighByteSeeked: DWORD; lpContext: Pointer): BOOL; stdcall;
function BackupWrite(hFile: THandle; lpBuffer: PByte; nNumberOfBytesToWrite: DWORD;var lpNumberOfBytesWritten: DWORD; bAbort, bProcessSecurity: BOOL; var lpContext: Pointer): BOOL; stdcall;
function Beep(dwFreq, dwDuration: DWORD): BOOL; stdcall;
function BeginUpdateResourceA(pFileName: PAnsiChar; bDeleteExistingResources: BOOL): THandle; stdcall;
function BeginUpdateResourceW(pFileName: PWideChar; bDeleteExistingResources: BOOL): THandle; stdcall;
function BindIoCompletionCallback(FileHandle: HANDLE;Function_: LPOVERLAPPED_COMPLETION_ROUTINE; Flags: ULONG): BOOL; stdcall;
function BuildCommDCBA(lpDef: PAnsiChar; var lpDCB: TDCB): BOOL; stdcall;
function BuildCommDCBAndTimeoutsA(lpDef: PAnsiChar; var lpDCB: TDCB;var lpCommTimeouts: TCommTimeouts): BOOL; stdcall;
function BuildCommDCBAndTimeoutsW(lpDef: PWideChar; var lpDCB: TDCB;var lpCommTimeouts: TCommTimeouts): BOOL; stdcall;
function BuildCommDCBW(lpDef: PWideChar; var lpDCB: TDCB): BOOL; stdcall;
function CallNamedPipeA(lpNamedPipeName: PAnsiChar; lpInBuffer: Pointer;nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD;var lpBytesRead: DWORD; nTimeOut: DWORD): BOOL; stdcall;
function CallNamedPipeW(lpNamedPipeName: PWideChar; lpInBuffer: Pointer;nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD;var lpBytesRead: DWORD; nTimeOut: DWORD): BOOL; stdcall;
function CancelDeviceWakeupRequest(hDevice: HANDLE): BOOL; stdcall;
function CancelIo(hFile: THandle): BOOL; stdcall;
function CancelTimerQueueTimer(TimerQueue, Timer: HANDLE): BOOL; stdcall;
function CancelWaitableTimer(hTimer: THandle): BOOL; stdcall;
function ChangeTimerQueueTimer(TimerQueue, Timer: HANDLE; DueTime, Period: ULONG): BOOL; stdcall;
function CheckRemoteDebuggerPresent(hProcess: HANDLE; out pbDebuggerPresent: BOOL): BOOL; stdcall;
function ClearCommBreak(hFile: THandle): BOOL; stdcall;
function ClearCommError(hFile: THandle; var lpErrors: DWORD; lpStat: PComStat): BOOL; stdcall;
function CloseHandle(hObject: THandle): BOOL; stdcall;
procedure CloseRaw(pvContext: Pointer); stdcall;
function CommConfigDialogA(lpszName: PAnsiChar; hWnd: HWND; var lpCC: TCommConfig): BOOL; stdcall;
function CommConfigDialogW(lpszName: PWideChar; hWnd: HWND; var lpCC: TCommConfig): BOOL; stdcall;
function CompareFileTime(const lpFileTime1, lpFileTime2: TFileTime): Longint; stdcall;
function CompareStringA(Locale: LCID; dwCmpFlags: DWORD; lpString1: PAnsiChar;cchCount1: Integer; lpString2: PAnsiChar; cchCount2: Integer): Integer; stdcall;
function CompareStringW(Locale: LCID; dwCmpFlags: DWORD; lpString1: PWideChar;cchCount1: Integer; lpString2: PWideChar; cchCount2: Integer): Integer; stdcall;
function ConnectNamedPipe(hNamedPipe: THandle; lpOverlapped: POverlapped): BOOL; stdcall;
function ContinueDebugEvent(dwProcessId, dwThreadId, dwContinueStatus: DWORD): BOOL; stdcall;
function ConvertDefaultLocale(Locale: LCID): LCID; stdcall;
function ConvertFiberToThread: BOOL; stdcall;
function ConvertThreadToFiber(lpParameter: Pointer): BOOL; stdcall;
function ConvertThreadToFiberEx(lpParameter: LPVOID; dwFlags: DWORD): LPVOID; stdcall;
function CopyFileA(lpExistingFileName, lpNewFileName: PAnsiChar; bFailIfExists: BOOL): BOOL; stdcall;
function CopyFileExA(lpExistingFileName, lpNewFileName: PAnsiChar;lpProgressRoutine: TFNProgressRoutine; lpData: Pointer; pbCancel: PBool;dwCopyFlags: DWORD): BOOL; stdcall;
function CopyFileExW(lpExistingFileName, lpNewFileName: PWideChar;lpProgressRoutine: TFNProgressRoutine; lpData: Pointer; pbCancel: PBool;dwCopyFlags: DWORD): BOOL; stdcall;
function CopyFileW(lpExistingFileName, lpNewFileName: PWideChar; bFailIfExists: BOOL): BOOL; stdcall;
function CreateActCtxA(var pActCtx: ACTCTXA): HANDLE; stdcall;
function CreateActCtxW(var pActCtx: ACTCTXW): HANDLE; stdcall;
function CreateConsoleScreenBuffer(dwDesiredAccess, dwShareMode: DWORD;lpSecurityAttributes: PSecurityAttributes; dwFlags: DWORD; lpScreenBufferData: Pointer): THandle; stdcall;
function CreateDirectoryA(lpPathName: PAnsiChar;lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall;
function CreateDirectoryExA(lpTemplateDirectory, lpNewDirectory: PAnsiChar;lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall;
function CreateDirectoryExW(lpTemplateDirectory, lpNewDirectory: PWideChar;lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall;
function CreateDirectoryW(lpPathName: PWideChar;lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall;
function CreateEventA(lpEventAttributes: PSecurityAttributes;bManualReset, bInitialState: BOOL; lpName: PAnsiChar): THandle; stdcall;
function CreateEventW(lpEventAttributes: PSecurityAttributes;bManualReset, bInitialState: BOOL; lpName: PWideChar): THandle; stdcall;
function CreateFiber(dwStackSize: DWORD; lpStartAddress: TFNFiberStartRoutine;lpParameter: Pointer): Pointer; stdcall;
function CreateFiberEx(dwStackCommitSize, dwStackReserveSize: SIZE_T; dwFlags: DWORD;lpStartAddress: LPFIBER_START_ROUTINE; lpParameter: LPVOID): LPVOID; stdcall;
function CreateFileA(lpFileName: PAnsiChar; dwDesiredAccess, dwShareMode: DWORD;lpSecurityAttributes: PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes: DWORD;hTemplateFile: THandle): THandle; stdcall;
function CreateFileMappingA(hFile: THandle; lpFileMappingAttributes: PSecurityAttributes;flProtect, dwMaximumSizeHigh, dwMaximumSizeLow: DWORD; lpName: PAnsiChar): THandle; stdcall;
function CreateFileMappingW(hFile: THandle; lpFileMappingAttributes: PSecurityAttributes;flProtect, dwMaximumSizeHigh, dwMaximumSizeLow: DWORD; lpName: PWideChar): THandle; stdcall;
function CreateFileW(lpFileName: PWideChar; dwDesiredAccess, dwShareMode: DWORD;lpSecurityAttributes: PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes: DWORD;hTemplateFile: THandle): THandle; stdcall;
function CreateHardLinkA(lpFileName, lpExistingFileName: PAnsiChar;lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall;
function CreateHardLinkW(lpFileName, lpExistingFileName: PWideChar;lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall;
function CreateIoCompletionPort(FileHandle, ExistingCompletionPort: THandle;CompletionKey, NumberOfConcurrentThreads: DWORD): THandle; stdcall;
function CreateJobObjectA(lpJobAttributes: LPSECURITY_ATTRIBUTES; lpName: LPCSTR): HANDLE; stdcall;
function CreateJobObjectW(lpJobAttributes: LPSECURITY_ATTRIBUTES; lpName: LPCWSTR): HANDLE; stdcall;
function CreateJobSet(NumJob: ULONG; UserJobSet: PJOB_SET_ARRAY; Flags: ULONG): BOOL; stdcall;
function CreateMailslotA(lpName: PAnsiChar; nMaxMessageSize: DWORD;lReadTimeout: DWORD; lpSecurityAttributes: PSecurityAttributes): THandle; stdcall;
function CreateMailslotW(lpName: PWideChar; nMaxMessageSize: DWORD;lReadTimeout: DWORD; lpSecurityAttributes: PSecurityAttributes): THandle; stdcall;
function CreateMemoryResourceNotification(NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE): HANDLE; stdcall;
function CreateMutexA(lpMutexAttributes: PSecurityAttributes; bInitialOwner: BOOL; lpName: PAnsiChar): THandle; stdcall;
function CreateMutexW(lpMutexAttributes: PSecurityAttributes; bInitialOwner: BOOL; lpName: PWideChar): THandle; stdcall;
function CreateNamedPipeA(lpName: PAnsiChar;dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut: DWORD;lpSecurityAttributes: PSecurityAttributes): THandle; stdcall;
function CreateNamedPipeW(lpName: PWideChar;dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut: DWORD;lpSecurityAttributes: PSecurityAttributes): THandle; stdcall;
function CreatePipe(var hReadPipe, hWritePipe: THandle;lpPipeAttributes: PSecurityAttributes; nSize: DWORD): BOOL; stdcall;
function CreateProcessA(lpApplicationName: PAnsiChar; lpCommandLine: PAnsiChar;lpProcessAttributes, lpThreadAttributes: PSecurityAttributes;bInheritHandles: BOOL; dwCreationFlags: DWORD; lpEnvironment: Pointer;lpCurrentDirectory: PAnsiChar; lpStartupInfo: PStartupInfoA;var lpProcessInformation: TProcessInformation): BOOL; stdcall;
function CreateProcessW(lpApplicationName: PWideChar; lpCommandLine: PWideChar;lpProcessAttributes, lpThreadAttributes: PSecurityAttributes;bInheritHandles: BOOL; dwCreationFlags: DWORD; lpEnvironment: Pointer;lpCurrentDirectory: PWideChar; const lpStartupInfo: TStartupInfoW;var lpProcessInformation: TProcessInformation): BOOL; stdcall;
function CreateRemoteThread(hProcess: THandle; lpThreadAttributes: Pointer;dwStackSize: DWORD; lpStartAddress: TFNThreadStartRoutine; lpParameter: Pointer;dwCreationFlags: DWORD; var lpThreadId: DWORD): THandle; stdcall;
function CreateSemaphoreA(lpSemaphoreAttributes: PSecurityAttributes;lInitialCount, lMaximumCount: Longint; lpName: PAnsiChar): THandle; stdcall;
function CreateSemaphoreW(lpSemaphoreAttributes: PSecurityAttributes;lInitialCount, lMaximumCount: Longint; lpName: PWideChar): THandle; stdcall;
function CreateTapePartition(hDevice: THandle; dwPartitionMethod, dwCount, dwSize: DWORD): DWORD; stdcall;
function CreateThread(lpThreadAttributes: Pointer;dwStackSize: DWORD; lpStartAddress: TFNThreadStartRoutine;lpParameter: Pointer; dwCreationFlags: DWORD; var lpThreadId: DWORD): THandle; stdcall;
function CreateTimerQueue: HANDLE; stdcall;
function CreateTimerQueueTimer(var phNewTimer: HANDLE; TimerQueue: HANDLE;Callback: WAITORTIMERCALLBACK; Parameter: PVOID; DueTime, Period: DWORD;Flags: ULONG): BOOL; stdcall;
function CreateToolhelp32Snapshot(dwFlags, th32ProcessID: DWORD): HANDLE; stdcall;
function CreateWaitableTimerA(lpTimerAttributes: PSecurityAttributes; bManualReset: BOOL; lpTimerName: PAnsiChar): THandle; stdcall;
function CreateWaitableTimerW(lpTimerAttributes: PSecurityAttributes; bManualReset: BOOL; lpTimerName: PWideChar): THandle; stdcall;
function DeactivateActCtx(dwFlags: DWORD; ulCookie: ULONG_PTR): BOOL; stdcall;
function DebugActiveProcess(dwProcessId: DWORD): BOOL; stdcall;
function DebugActiveProcessStop(dwProcessId: DWORD): BOOL; stdcall;
procedure DebugBreak; stdcall;
function DebugBreakProcess(Process: HANDLE): BOOL; stdcall;
function DebugSetProcessKillOnExit(KillOnExit: BOOL): BOOL; stdcall;
function DecryptFile(lpFilename: PChar; dwReserved: DWORD): BOOL; stdcall;
function DecryptFileA(lpFilename: PAnsiChar; dwReserved: DWORD): BOOL; stdcall;
function DecryptFileW(lpFilename: PWideChar; dwReserved: DWORD): BOOL; stdcall;
function DefineDosDeviceA(dwFlags: DWORD; lpDeviceName, lpTargetPath: PAnsiChar): BOOL; stdcall;
function DefineDosDeviceW(dwFlags: DWORD; lpDeviceName, lpTargetPath: PWideChar): BOOL; stdcall;
function DeleteAtom(nAtom: ATOM): ATOM; stdcall;
procedure DeleteCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
function DeleteFiber(lpFiber: Pointer): BOOL; stdcall;
function DeleteFileA(lpFileName: PAnsiChar): BOOL; stdcall;
function DeleteFileW(lpFileName: PWideChar): BOOL; stdcall;
function DeleteTimerQueue(TimerQueue: HANDLE): BOOL; stdcall;
function DeleteTimerQueueEx(TimerQueue, CompletionEvent: HANDLE): BOOL; stdcall;
function DeleteTimerQueueTimer(TimerQueue, Timer, CompletionEvent: HANDLE): BOOL; stdcall;
function DeleteVolumeMountPointA(lpszVolumeMountPoint: LPCSTR): BOOL; stdcall;
function DeleteVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR): BOOL; stdcall;
function DeviceIoControl(hDevice: THandle; dwIoControlCode: DWORD; lpInBuffer: Pointer;nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD;var lpBytesReturned: DWORD; lpOverlapped: POverlapped): BOOL; stdcall;
function DisableThreadLibraryCalls(hLibModule: HMODULE): BOOL; stdcall;
function DisconnectNamedPipe(hNamedPipe: THandle): BOOL; stdcall;
function DnsHostnameToComputerNameA(Hostname, ComputerName: LPSTR; var nSize: DWORD): BOOL; stdcall;
function DnsHostnameToComputerNameW(Hostname, ComputerName: LPWSTR; var nSize: DWORD): BOOL; stdcall;
function DosDateTimeToFileTime(wFatDate, wFatTime: Word; var lpFileTime: TFileTime): BOOL; stdcall;
function DuplicateHandle(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle: THandle;lpTargetHandle: PHandle; dwDesiredAccess: DWORD;bInheritHandle: BOOL; dwOptions: DWORD): BOOL; stdcall;
function EncryptFile(lpFilename: PChar): BOOL; stdcall;
function EncryptFileA(lpFilename: PAnsiChar): BOOL; stdcall;
function EncryptFileW(lpFilename: PWideChar): BOOL; stdcall;
function EndUpdateResourceA(hUpdate: THandle; fDiscard: BOOL): BOOL; stdcall;
function EndUpdateResourceW(hUpdate: THandle; fDiscard: BOOL): BOOL; stdcall;
procedure EnterCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
function EnumCalendarInfoA(lpCalInfoEnumProc: TFNCalInfoEnumProc; Locale: LCID;Calendar: CALID; CalType: CALTYPE): BOOL; stdcall;
function EnumCalendarInfoExA(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA;Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL; stdcall;
function EnumCalendarInfoExW(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW;Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL; stdcall;
function EnumCalendarInfoW(lpCalInfoEnumProc: TFNCalInfoEnumProc; Locale: LCID;Calendar: CALID; CalType: CALTYPE): BOOL; stdcall;
function EnumDateFormatsA(lpDateFmtEnumProc: TFNDateFmtEnumProc;Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function EnumDateFormatsExA(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA;Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function EnumDateFormatsExW(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW;Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function EnumDateFormatsW(lpDateFmtEnumProc: TFNDateFmtEnumProc;Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA;LanguageGroup: LGRPID; dwFlags: DWORD; lParam: LONG_PTR): BOOL; stdcall;
function EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW;LanguageGroup: LGRPID; dwFlags: DWORD; lParam: LONG_PTR): BOOL; stdcall;
function EnumResourceLanguagesA(hModule: HMODULE; lpType, lpName: PAnsiChar;lpEnumFunc: ENUMRESLANGPROC; lParam: Longint): BOOL; stdcall;
function EnumResourceLanguagesW(hModule: HMODULE; lpType, lpName: PWideChar;lpEnumFunc: ENUMRESLANGPROC; lParam: Longint): BOOL; stdcall;
function EnumResourceNamesA(hModule: HMODULE; lpType: PAnsiChar;lpEnumFunc: ENUMRESNAMEPROC; lParam: Longint): BOOL; stdcall;
function EnumResourceNamesW(hModule: HMODULE; lpType: PWideChar;lpEnumFunc: ENUMRESNAMEPROC; lParam: Longint): BOOL; stdcall;
function EnumResourceTypesA(hModule: HMODULE; lpEnumFunc: ENUMRESTYPEPROC;lParam: Longint): BOOL; stdcall;
function EnumResourceTypesW(hModule: HMODULE; lpEnumFunc: ENUMRESTYPEPROC;lParam: Longint): BOOL; stdcall;
function EnumSystemCodePagesA(lpCodePageEnumProc: TFNCodepageEnumProc; dwFlags: DWORD): BOOL; stdcall;
function EnumSystemCodePagesW(lpCodePageEnumProc: TFNCodepageEnumProc; dwFlags: DWORD): BOOL; stdcall;
function EnumSystemGeoID(GeoClass: GEOCLASS; ParentGeoId: GEOID; lpGeoEnumProc: GEO_ENUMPROC): BOOL; stdcall;
function EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA;dwFlags: DWORD; lParam: LONG_PTR): BOOL; stdcall;
function EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW;dwFlags: DWORD; lParam: LONG_PTR): BOOL; stdcall;
function EnumSystemLocalesA(lpLocaleEnumProc: TFNLocaleEnumProc; dwFlags: DWORD): BOOL; stdcall;
function EnumSystemLocalesW(lpLocaleEnumProc: TFNLocaleEnumProc; dwFlags: DWORD): BOOL; stdcall;
function EnumTimeFormatsA(lpTimeFmtEnumProc: TFNTimeFmtEnumProc;Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function EnumTimeFormatsW(lpTimeFmtEnumProc: TFNTimeFmtEnumProc;Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function EnumUILanguagesA(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA;dwFlags: DWORD; lParam: LONG_PTR): BOOL; stdcall;
function EnumUILanguagesW(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW;dwFlags: DWORD; lParam: LONG_PTR): BOOL; stdcall;
function EraseTape(hDevice: THandle; dwEraseType: DWORD; bImmediate: BOOL): DWORD; stdcall;
function EscapeCommFunction(hFile: THandle; dwFunc: DWORD): BOOL; stdcall;
procedure ExitProcess(uExitCode: UINT); stdcall;
procedure ExitThread(dwExitCode: DWORD); stdcall;
function ExpandEnvironmentStringsA(lpSrc: PAnsiChar; lpDst: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function ExpandEnvironmentStringsW(lpSrc: PWideChar; lpDst: PWideChar; nSize: DWORD): DWORD; stdcall;
procedure FatalAppExitA(uAction: UINT; lpMessageText: PAnsiChar); stdcall;
procedure FatalAppExitW(uAction: UINT; lpMessageText: PWideChar); stdcall;
procedure FatalExit(ExitCode: Integer); stdcall;
function FileTimeToDosDateTime(const lpFileTime: TFileTime;var lpFatDate, lpFatTime: Word): BOOL; stdcall;
function FileTimeToLocalFileTime(const lpFileTime: TFileTime; var lpLocalFileTime: TFileTime): BOOL; stdcall;
function FileTimeToSystemTime(const lpFileTime: TFileTime; var lpSystemTime: TSystemTime): BOOL; stdcall;
function FillConsoleOutputAttribute(hConsoleOutput: THandle; wAttribute: Word;nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfAttrsWritten: DWORD): BOOL; stdcall;
function FillConsoleOutputCharacterA(hConsoleOutput: THandle; cCharacter: AnsiChar;nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall;
function FillConsoleOutputCharacterW(hConsoleOutput: THandle; cCharacter: WideChar;nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall;
function FindActCtxSectionGuid(dwFlags: DWORD; const lpExtensionGuid: TGUID;ulSectionId: ULONG; const lpGuidToFind: TGUID; ReturnedData: PACTCTX_SECTION_KEYED_DATA): BOOL; stdcall;
function FindActCtxSectionStringA(dwFlags: DWORD; const lpExtensionGuid: TGUID;ulSectionId: ULONG; lpStringToFind: LPCSTR; ReturnedData: PACTCTX_SECTION_KEYED_DATA): BOOL; stdcall;
function FindActCtxSectionStringW(dwFlags: DWORD; const lpExtensionGuid: TGUID;ulSectionId: ULONG; lpStringToFind: LPCWSTR; ReturnedData: PACTCTX_SECTION_KEYED_DATA): BOOL; stdcall;
function FindAtomA(lpString: PAnsiChar): ATOM; stdcall;
function FindAtomW(lpString: PWideChar): ATOM; stdcall;
function FindClose(hFindFile: THandle): BOOL; stdcall;
function FindCloseChangeNotification(hChangeHandle: THandle): BOOL; stdcall;
function FindFirstChangeNotificationA(lpPathName: PAnsiChar;bWatchSubtree: BOOL; dwNotifyFilter: DWORD): THandle; stdcall;
function FindFirstChangeNotificationW(lpPathName: PWideChar;bWatchSubtree: BOOL; dwNotifyFilter: DWORD): THandle; stdcall;
function FindFirstFileA(lpFileName: PAnsiChar; var lpFindFileData: TWIN32FindDataA): THandle; stdcall;
function FindFirstFileExA(lpFileName: PAnsiChar; fInfoLevelId: TFindexInfoLevels;lpFindFileData: Pointer; fSearchOp: TFindexSearchOps; lpSearchFilter: Pointer;dwAdditionalFlags: DWORD): BOOL; stdcall;
function FindFirstFileExW(lpFileName: PWideChar; fInfoLevelId: TFindexInfoLevels;lpFindFileData: Pointer; fSearchOp: TFindexSearchOps; lpSearchFilter: Pointer;dwAdditionalFlags: DWORD): BOOL; stdcall;
function FindFirstFileW(lpFileName: PWideChar; var lpFindFileData: TWIN32FindDataW): THandle; stdcall;
function FindFirstStreamW(lpFileName: LPCWSTR; InfoLevel: STREAM_INFO_LEVELS; lpFindStreamData: LPVOID; dwFlags: DWORD): HANDLE; stdcall;
function FindFirstVolumeA(lpszVolumeName: LPSTR; cchBufferLength: DWORD): HANDLE; stdcall;
function FindFirstVolumeMountPointA(lpszRootPathName: LPCSTR;lpszVolumeMountPoint: LPSTR; cchBufferLength: DWORD): HANDLE; stdcall;
function FindFirstVolumeMountPointW(lpszRootPathName: LPCWSTR;lpszVolumeMountPoint: LPWSTR; cchBufferLength: DWORD): HANDLE; stdcall;
function FindFirstVolumeW(lpszVolumeName: LPWSTR; cchBufferLength: DWORD): HANDLE; stdcall;
function FindNextChangeNotification(hChangeHandle: THandle): BOOL; stdcall;
function FindNextFileA(hFindFile: THandle; var lpFindFileData: TWIN32FindDataA): BOOL; stdcall;
function FindNextFileW(hFindFile: THandle; var lpFindFileData: TWIN32FindDataW): BOOL; stdcall;
function FindNextStreamW(hFindStream: HANDLE; lpFindStreamData: LPVOID): BOOL; stdcall;
function FindNextVolumeA(hFindVolume: HANDLE; lpszVolumeName: LPSTR;cchBufferLength: DWORD): BOOL; stdcall;
function FindNextVolumeMountPointA(hFindVolumeMountPoint: HANDLE;lpszVolumeMountPoint: LPSTR; cchBufferLength: DWORD): BOOL; stdcall;
function FindNextVolumeMountPointW(hFindVolumeMountPoint: HANDLE;lpszVolumeMountPoint: LPWSTR; cchBufferLength: DWORD): BOOL; stdcall;
function FindNextVolumeW(hFindVolume: HANDLE; lpszVolumeName: LPWSTR;cchBufferLength: DWORD): BOOL; stdcall;
function FindResourceA(hModule: HMODULE; lpName, lpType: PAnsiChar): HRSRC; stdcall;
function FindResourceExA(hModule: HMODULE; lpType, lpName: PAnsiChar; wLanguage: Word): HRSRC; stdcall;
function FindResourceExW(hModule: HMODULE; lpType, lpName: PWideChar; wLanguage: Word): HRSRC; stdcall;
function FindResourceW(hModule: HMODULE; lpName, lpType: PWideChar): HRSRC; stdcall;
function FindVolumeClose(hFindVolume: HANDLE): BOOL; stdcall;
function FindVolumeMountPointClose(hFindVolumeMountPoint: HANDLE): BOOL; stdcall;
function FlsAlloc(lpCallback: PFLS_CALLBACK_FUNCTION): DWORD; stdcall;
function FlsFree(dwFlsIndex: DWORD): DWORD; stdcall;
function FlsGetValue(dwFlsIndex: DWORD): DWORD; stdcall;
function FlsSetValue(dwFlsIndex: DWORD; lpFlsData: PVOID): DWORD; stdcall;
function FlushConsoleInputBuffer(hConsoleInput: THandle): BOOL; stdcall;
function FlushFileBuffers(hFile: THandle): BOOL; stdcall;
function FlushInstructionCache(hProcess: THandle; const lpBaseAddress: Pointer; dwSize: DWORD): BOOL; stdcall;
function FlushViewOfFile(const lpBaseAddress: Pointer; dwNumberOfBytesToFlush: DWORD): BOOL; stdcall;
function FoldStringA(dwMapFlags: DWORD; lpSrcStr: PAnsiChar; cchSrc: Integer;lpDestStr: PAnsiChar; cchDest: Integer): Integer; stdcall;
function FoldStringW(dwMapFlags: DWORD; lpSrcStr: PWideChar; cchSrc: Integer;lpDestStr: PWideChar; cchDest: Integer): Integer; stdcall;
function FormatMessageA(dwFlags: DWORD; lpSource: Pointer; dwMessageId: DWORD; dwLanguageId: DWORD;lpBuffer: PAnsiChar; nSize: DWORD; Arguments: Pointer): DWORD; stdcall;
function FormatMessageW(dwFlags: DWORD; lpSource: Pointer; dwMessageId: DWORD; dwLanguageId: DWORD;lpBuffer: PWideChar; nSize: DWORD; Arguments: Pointer): DWORD; stdcall;
function FreeConsole: BOOL; stdcall;
function FreeEnvironmentStringsA(EnvBlock: PAnsiChar): BOOL; stdcall;
function FreeEnvironmentStringsW(EnvBlock: PWideChar): BOOL; stdcall;
function FreeLibrary(hLibModule: HMODULE): BOOL; stdcall;
procedure FreeLibraryAndExitThread(hLibModule: HMODULE; dwExitCode: DWORD); stdcall;
function FreeResource(hResData: HGLOBAL): BOOL; stdcall;
function FreeUserPhysicalPages(hProcess: HANDLE; var NumberOfPages: ULONG_PTR;PageArray: PULONG_PTR): BOOL; stdcall;
function GenerateConsoleCtrlEvent(dwCtrlEvent: DWORD; dwProcessGroupId: DWORD): BOOL; stdcall;
function GetACP: UINT; stdcall;
function GetAtomNameA(nAtom: ATOM; lpBuffer: PAnsiChar; nSize: Integer): UINT; stdcall;
function GetAtomNameW(nAtom: ATOM; lpBuffer: PWideChar; nSize: Integer): UINT; stdcall;
function GetBinaryTypeA(lpApplicationName: PAnsiChar; var lpBinaryType: DWORD): BOOL; stdcall;
function GetBinaryTypeW(lpApplicationName: PWideChar; var lpBinaryType: DWORD): BOOL; stdcall;
function GetCalendarInfoA(Locale: LCID; Calendar: CALID; CalType: CALTYPE;lpCalData: LPSTR; cchData: Integer; lpValue: LPDWORD): Integer; stdcall;
function GetCalendarInfoW(Locale: LCID; Calendar: CALID; CalType: CALTYPE;lpCalData: LPWSTR; cchData: Integer; lpValue: LPDWORD): Integer; stdcall;
function GetCommandLineA: PAnsiChar; stdcall;
function GetCommandLineW: PWideChar; stdcall;
function GetCommConfig(hCommDev: THandle; var lpCC: TCommConfig; var lpdwSize: DWORD): BOOL; stdcall;
function GetCommMask(hFile: THandle; var lpEvtMask: DWORD): BOOL; stdcall;
function GetCommModemStatus(hFile: THandle; var lpModemStat: DWORD): BOOL; stdcall;
function GetCommProperties(hFile: THandle; var lpCommProp: TCommProp): BOOL; stdcall;
function GetCommState(hFile: THandle; var lpDCB: TDCB): BOOL; stdcall;
function GetCommTimeouts(hFile: THandle; var lpCommTimeouts: TCommTimeouts): BOOL; stdcall;
function GetCompressedFileSizeA(lpFileName: PAnsiChar; lpFileSizeHigh: PDWORD): DWORD; stdcall;
function GetCompressedFileSizeW(lpFileName: PWideChar; lpFileSizeHigh: PDWORD): DWORD; stdcall;
function GetComputerNameA(lpBuffer: PAnsiChar; var nSize: DWORD): BOOL; stdcall;
function GetComputerNameExA(NameType: COMPUTER_NAME_FORMAT; lpBuffer: LPSTR;var nSize: DWORD): BOOL; stdcall;
function GetComputerNameExW(NameType: COMPUTER_NAME_FORMAT; lpBuffer: LPWSTR;var nSize: DWORD): BOOL; stdcall;
function GetComputerNameW(lpBuffer: PWideChar; var nSize: DWORD): BOOL; stdcall;
function GetConsoleAliasA(Source, TargetBuffer: LPSTR; TargetBufferLength: DWORD; ExeName: LPSTR): DWORD; stdcall;
function GetConsoleAliasesA(AliasBuffer: LPSTR; AliasBufferLength: DWORD; ExeName: LPSTR): DWORD; stdcall;
function GetConsoleAliasesLengthA(ExeName: LPSTR): DWORD; stdcall;
function GetConsoleAliasesLengthW(ExeName: LPWSTR): DWORD; stdcall;
function GetConsoleAliasesW(AliasBuffer: LPWSTR; AliasBufferLength: DWORD; ExeName: LPWSTR): DWORD; stdcall;
function GetConsoleAliasExesA(ExeNameBuffer: LPSTR; ExeNameBufferLength: DWORD): DWORD; stdcall;
function GetConsoleAliasExesLengthA: DWORD; stdcall;
function GetConsoleAliasExesLengthW: DWORD; stdcall;
function GetConsoleAliasExesW(ExeNameBuffer: LPWSTR; ExeNameBufferLength: DWORD): DWORD; stdcall;
function GetConsoleAliasW(Source, TargetBuffer: LPWSTR; TargetBufferLength: DWORD; ExeName: LPWSTR): DWORD; stdcall;
function GetConsoleCP: UINT; stdcall;
function GetConsoleCursorInfo(hConsoleOutput: THandle;var lpConsoleCursorInfo: TConsoleCursorInfo): BOOL; stdcall;
function GetConsoleDisplayMode(var lpModeFlags: DWORD): BOOL; stdcall;
function GetConsoleFontSize(hConsoleOutput: HANDLE; nFont: DWORD): COORD; stdcall;
function GetConsoleMode(hConsoleHandle: THandle; var lpMode: DWORD): BOOL; stdcall;
function GetConsoleOutputCP: UINT; stdcall;
function GetConsoleProcessList(var lpdwProcessList: LPDWORD; dwProcessCount: DWORD): DWORD; stdcall;
function GetConsoleScreenBufferInfo(hConsoleOutput: THandle;var lpConsoleScreenBufferInfo: TConsoleScreenBufferInfo): BOOL; stdcall;
function GetConsoleSelectionInfo(var lpConsoleSelectionInfo: CONSOLE_SELECTION_INFO): BOOL; stdcall;
function GetConsoleTitleA(lpConsoleTitle: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function GetConsoleTitleW(lpConsoleTitle: PWideChar; nSize: DWORD): DWORD; stdcall;
function GetConsoleWindow: HWND; stdcall;
function GetCPInfo(CodePage: UINT; var lpCPInfo: TCPInfo): BOOL; stdcall;
function GetCPInfoExA(CodePage: UINT; dwFlags: DWORD; var lpCPInfoEx: CPINFOEXA): BOOL; stdcall;
function GetCPInfoExW(CodePage: UINT; dwFlags: DWORD; var lpCPInfoEx: CPINFOEXW): BOOL; stdcall;
function GetCurrencyFormatA(Locale: LCID; dwFlags: DWORD; lpValue: PAnsiChar;lpFormat: PCurrencyFmtA; lpCurrencyStr: PAnsiChar; cchCurrency: Integer): Integer; stdcall;
function GetCurrencyFormatW(Locale: LCID; dwFlags: DWORD; lpValue: PWideChar;lpFormat: PCurrencyFmtW; lpCurrencyStr: PWideChar; cchCurrency: Integer): Integer; stdcall;
function GetCurrentActCtx(var lphActCtx: HANDLE): BOOL; stdcall;
function GetCurrentConsoleFont(hConsoleOutput: HANDLE; bMaximumWindow: BOOL;var lpConsoleCurrentFont: CONSOLE_FONT_INFO): BOOL; stdcall;
function GetCurrentDirectoryA(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall;
function GetCurrentDirectoryW(nBufferLength: DWORD; lpBuffer: PWideChar): DWORD; stdcall;
function GetCurrentProcess: THandle; stdcall;
function GetCurrentProcessId: DWORD; stdcall;
function GetCurrentProcessorNumber: DWORD; stdcall;
function GetCurrentThread: THandle; stdcall;
function GetCurrentThreadId: DWORD; stdcall;
function GetDateFormatA(Locale: LCID; dwFlags: DWORD; lpDate: PSystemTime;lpFormat: PAnsiChar; lpDateStr: PAnsiChar; cchDate: Integer): Integer; stdcall;
function GetDateFormatW(Locale: LCID; dwFlags: DWORD; lpDate: PSystemTime;lpFormat: PWideChar; lpDateStr: PWideChar; cchDate: Integer): Integer; stdcall;
function GetDefaultCommConfigA(lpszName: PAnsiChar;var lpCC: TCommConfig; var lpdwSize: DWORD): BOOL; stdcall;
function GetDefaultCommConfigW(lpszName: PWideChar;var lpCC: TCommConfig; var lpdwSize: DWORD): BOOL; stdcall;
function GetDevicePowerState(hDevice: HANDLE; var pfOn: BOOL): BOOL; stdcall;
function GetDiskFreeSpaceA(lpRootPathName: PAnsiChar;var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: DWORD): BOOL; stdcall;
function GetDiskFreeSpaceExA(lpDirectoryName: PAnsiChar;var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes; lpTotalNumberOfFreeBytes: PLargeInteger): BOOL; stdcall;
function GetDiskFreeSpaceExW(lpDirectoryName: PWideChar;var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes; lpTotalNumberOfFreeBytes: PLargeInteger): BOOL; stdcall;
function GetDiskFreeSpaceW(lpRootPathName: PWideChar;var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: DWORD): BOOL; stdcall;
function GetDllDirectoryA(nBufferLength: DWORD; lpBuffer: LPSTR): DWORD; stdcall;
function GetDllDirectoryW(nBufferLength: DWORD; lpBuffer: LPWSTR): DWORD; stdcall;
function GetDriveTypeA(lpRootPathName: PAnsiChar): UINT; stdcall;
function GetDriveTypeW(lpRootPathName: PWideChar): UINT; stdcall;
function GetEnvironmentStringsA: PAnsiChar; stdcall;
function GetEnvironmentStringsW: PWideChar; stdcall;
function GetEnvironmentVariableA(lpName: PAnsiChar; lpBuffer: PAnsiChar; nSize: DWORD): DWORD; stdcall; overload;
function GetEnvironmentVariableW(lpName: PWideChar; lpBuffer: PWideChar; nSize: DWORD): DWORD; stdcall; overload;
function GetExitCodeProcess(hProcess: THandle; var lpExitCode: DWORD): BOOL; stdcall;
function GetExitCodeThread(hThread: THandle; var lpExitCode: DWORD): BOOL; stdcall;
function GetFileAttributesA(lpFileName: PAnsiChar): DWORD; stdcall;
function GetFileAttributesExA(lpFileName: PAnsiChar;fInfoLevelId: TGetFileExInfoLevels; lpFileInformation: Pointer): BOOL; stdcall;
function GetFileAttributesExW(lpFileName: PWideChar;fInfoLevelId: TGetFileExInfoLevels; lpFileInformation: Pointer): BOOL; stdcall;
function GetFileAttributesW(lpFileName: PWideChar): DWORD; stdcall;
function GetFileInformationByHandle(hFile: THandle; var lpFileInformation: TByHandleFileInformation): BOOL; stdcall;
function GetFileSize(hFile: THandle; lpFileSizeHigh: Pointer): DWORD; stdcall;
function GetFileSizeEx(hFile: HANDLE; var lpFileSize: LARGE_INTEGER): BOOL; stdcall;
function GetFileTime(hFile: THandle;lpCreationTime, lpLastAccessTime, lpLastWriteTime: PFileTime): BOOL; stdcall;
function GetFileType(hFile: THandle): DWORD; stdcall;
function GetFirmwareEnvironmentVariableA(lpName, lpGuid: LPCSTR; pBuffer: PVOID;nSize: DWORD): DWORD; stdcall;
function GetFirmwareEnvironmentVariableW(lpName, lpGuid: LPCWSTR; pBuffer: PVOID;nSize: DWORD): DWORD; stdcall;
function GetFullPathNameA(lpFileName: PAnsiChar; nBufferLength: DWORD;lpBuffer: PAnsiChar; var lpFilePart: PAnsiChar): DWORD; stdcall;
function GetFullPathNameW(lpFileName: PWideChar; nBufferLength: DWORD;lpBuffer: PWideChar; var lpFilePart: PWideChar): DWORD; stdcall;
function GetGeoInfo(Location: GEOID; GeoType: GEOTYPE; lpGeoData: LPTSTR;cchData: Integer; LangId: LANGID): Integer; stdcall;
function GetGeoInfoA(Location: GEOID; GeoType: GEOTYPE; lpGeoData: LPSTR;cchData: Integer; LangId: LANGID): Integer; stdcall;
function GetGeoInfoW(Location: GEOID; GeoType: GEOTYPE; lpGeoData: LPWSTR;cchData: Integer; LangId: LANGID): Integer; stdcall;
function GetHandleInformation(hObject: THandle; var lpdwFlags: DWORD): BOOL; stdcall;
function GetLargePageMinimum: SIZE_T; stdcall;
function GetLargestConsoleWindowSize(hConsoleOutput: THandle): TCoord; stdcall;
function GetLastError: DWORD; stdcall;
function GetLocaleInfoA(Locale: LCID; LCType: LCTYPE; lpLCData: PAnsiChar; cchData: Integer): Integer; stdcall;
function GetLocaleInfoW(Locale: LCID; LCType: LCTYPE; lpLCData: PWideChar; cchData: Integer): Integer; stdcall;
procedure GetLocalTime(var lpSystemTime: TSystemTime); stdcall;
function GetLogicalDrives: DWORD; stdcall;
function GetLogicalDriveStringsA(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall;
function GetLogicalDriveStringsW(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall;
function GetLogicalProcessorInformation(Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION; ReturnedLength: PDWORD): BOOL; stdcall;
function GetLongPathNameA(lpszShortPath: LPCSTR; lpszLongPath: LPSTR;cchBuffer: DWORD): DWORD; stdcall;
function GetLongPathNameW(lpszShortPath: LPCWSTR; lpszLongPath: LPWSTR;cchBuffer: DWORD): DWORD; stdcall;
function GetMailslotInfo(hMailslot: THandle; lpMaxMessageSize: Pointer;var lpNextSize: DWORD; lpMessageCount, lpReadTimeout: Pointer): BOOL; stdcall;
function GetModuleFileNameA(hModule: HINST; lpFilename: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function GetModuleFileNameW(hModule: HINST; lpFilename: PWideChar; nSize: DWORD): DWORD; stdcall;
function GetModuleHandleA(lpModuleName: PAnsiChar): HMODULE; stdcall;
function GetModuleHandleExA(dwFlags: DWORD; lpModuleName: LPCSTR; var phModule: HMODULE): BOOL; stdcall;
function GetModuleHandleExW(dwFlags: DWORD; lpModuleName: LPCWSTR; var phModule: HMODULE): BOOL; stdcall;
function GetModuleHandleW(lpModuleName: PWideChar): HMODULE; stdcall;
function GetNamedPipeHandleStateA(hNamedPipe: THandle;lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout: PDWORD;lpUserName: PAnsiChar; nMaxUserNameSize: DWORD): BOOL; stdcall;
function GetNamedPipeHandleStateW(hNamedPipe: THandle;lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout: PDWORD;lpUserName: PWideChar; nMaxUserNameSize: DWORD): BOOL; stdcall;
function GetNamedPipeInfo(hNamedPipe: THandle; var lpFlags: DWORD;lpOutBufferSize, lpInBufferSize, lpMaxInstances: Pointer): BOOL; stdcall;
procedure GetNativeSystemInfo(lpSystemInfo: LPSYSTEM_INFO); stdcall;
function GetNLSVersion(Function_: NLS_FUNCTION; Locale: LCID; lpVersionInformation: LPNLSVERSIONINFO): BOOL; stdcall;
function GetNumaAvailableMemoryNode(Node: UCHAR; var AvailableBytes: ULONGLONG): BOOL; stdcall;
function GetNumaHighestNodeNumber(var HighestNodeNumber: ULONG): BOOL; stdcall;
function GetNumaNodeProcessorMask(Node: UCHAR; ProcessorMask: ULONGLONG): BOOL; stdcall;
function GetNumaProcessorNode(Processor: UCHAR; var NodeNumber: UCHAR): BOOL; stdcall;
function GetNumberFormatA(Locale: LCID; dwFlags: DWORD; lpValue: PAnsiChar;lpFormat: PNumberFmtA; lpNumberStr: PAnsiChar; cchNumber: Integer): Integer; stdcall;
function GetNumberFormatW(Locale: LCID; dwFlags: DWORD; lpValue: PWideChar;lpFormat: PNumberFmtW; lpNumberStr: PWideChar; cchNumber: Integer): Integer; stdcall;
function GetNumberOfConsoleInputEvents(hConsoleInput: THandle;var lpNumberOfEvents: DWORD): BOOL; stdcall;
function GetNumberOfConsoleMouseButtons(var lpNumberOfMouseButtons: DWORD): BOOL; stdcall;
function GetOEMCP: UINT; stdcall;
function GetOverlappedResult(hFile: THandle; const lpOverlapped: TOverlapped;var lpNumberOfBytesTransferred: DWORD; bWait: BOOL): BOOL; stdcall;
function GetPriorityClass(hProcess: THandle): DWORD; stdcall;
function GetPrivateProfileIntA(lpAppName, lpKeyName: PAnsiChar; nDefault: Integer; lpFileName: PAnsiChar): UINT; stdcall;
function GetPrivateProfileIntW(lpAppName, lpKeyName: PWideChar; nDefault: Integer; lpFileName: PWideChar): UINT; stdcall;
function GetPrivateProfileSectionA(lpAppName: PAnsiChar; lpReturnedString: PAnsiChar; nSize: DWORD; lpFileName: PAnsiChar): DWORD; stdcall;
function GetPrivateProfileSectionNamesA(lpszReturnBuffer: PAnsiChar; nSize: DWORD; lpFileName: PAnsiChar): DWORD; stdcall;
function GetPrivateProfileSectionNamesW(lpszReturnBuffer: PWideChar; nSize: DWORD; lpFileName: PWideChar): DWORD; stdcall;
function GetPrivateProfileSectionW(lpAppName: PWideChar; lpReturnedString: PWideChar; nSize: DWORD; lpFileName: PWideChar): DWORD; stdcall;
function GetPrivateProfileStringA(lpAppName, lpKeyName, lpDefault: PAnsiChar;lpReturnedString: PAnsiChar; nSize: DWORD; lpFileName: PAnsiChar): DWORD; stdcall;
function GetPrivateProfileStringW(lpAppName, lpKeyName, lpDefault: PWideChar;lpReturnedString: PWideChar; nSize: DWORD; lpFileName: PWideChar): DWORD; stdcall;
function GetPrivateProfileStructA(lpszSection, lpszKey: PAnsiChar;lpStruct: Pointer; uSizeStruct: UINT; szFile: PAnsiChar): BOOL; stdcall;
function GetPrivateProfileStructW(lpszSection, lpszKey: PWideChar;lpStruct: Pointer; uSizeStruct: UINT; szFile: PWideChar): BOOL; stdcall;
function GetProcAddress(hModule: HMODULE; lpProcName: LPCSTR): FARPROC; stdcall;
function GetProcessAffinityMask(hProcess: THandle;var lpProcessAffinityMask, lpSystemAffinityMask: DWORD): BOOL; stdcall;
function GetProcessHandleCount(hProcess: HANDLE; out pdwHandleCount: DWORD): BOOL; stdcall;
function GetProcessHeap: THandle; stdcall;
function GetProcessHeaps(NumberOfHeaps: DWORD; var ProcessHeaps: THandle): DWORD; stdcall;
function GetProcessId(Process: HANDLE): DWORD; stdcall;
function GetProcessIdOfThread(Thread: HANDLE): DWORD; stdcall;
function GetProcessIoCounters(hProcess: HANDLE; var lpIoCounters: IO_COUNTERS): BOOL; stdcall;
function GetProcessPriorityBoost(hThread: THandle; var DisablePriorityBoost: Bool): BOOL; stdcall;
function GetProcessShutdownParameters(var lpdwLevel, lpdwFlags: DWORD): BOOL; stdcall;
function GetProcessTimes(hProcess: THandle;var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime: TFileTime): BOOL; stdcall;
function GetProcessVersion(ProcessId: DWORD): DWORD; stdcall;
function GetProcessWorkingSetSize(hProcess: THandle;var lpMinimumWorkingSetSize, lpMaximumWorkingSetSize: DWORD): BOOL; stdcall;
function GetProcessWorkingSetSizeEx(hProcess: HANDLE; out lpMinimumWorkingSetSize,  lpMaximumWorkingSetSize: SIZE_T; out Flags: DWORD): BOOL; stdcall;
function GetProfileIntA(lpAppName, lpKeyName: PAnsiChar; nDefault: Integer): UINT; stdcall;
function GetProfileIntW(lpAppName, lpKeyName: PWideChar; nDefault: Integer): UINT; stdcall;
function GetProfileSectionA(lpAppName: PAnsiChar; lpReturnedString: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function GetProfileSectionW(lpAppName: PWideChar; lpReturnedString: PWideChar; nSize: DWORD): DWORD; stdcall;
function GetProfileStringA(lpAppName, lpKeyName, lpDefault: PAnsiChar;lpReturnedString: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function GetProfileStringW(lpAppName, lpKeyName, lpDefault: PWideChar;lpReturnedString: PWideChar; nSize: DWORD): DWORD; stdcall;
function GetQueuedCompletionStatus(CompletionPort: THandle;var lpNumberOfBytesTransferred, lpCompletionKey: DWORD;var lpOverlapped: POverlapped; dwMilliseconds: DWORD): BOOL; stdcall;
function GetShortPathNameA(lpszLongPath: PAnsiChar; lpszShortPath: PAnsiChar;cchBuffer: DWORD): DWORD; stdcall;
function GetShortPathNameW(lpszLongPath: PWideChar; lpszShortPath: PWideChar;cchBuffer: DWORD): DWORD; stdcall;
procedure GetStartupInfoA(var lpStartupInfo: TStartupInfo); stdcall;
procedure GetStartupInfoW(var lpStartupInfo: TStartupInfo); stdcall;
function GetStdHandle(nStdHandle: DWORD): THandle; stdcall;
function GetStringTypeA(Locale: LCID; dwInfoType: DWORD; const lpSrcStr: LPCSTR;cchSrc: BOOL; var lpCharType: Word): BOOL; stdcall;
function GetStringTypeExA(Locale: LCID; dwInfoType: DWORD;lpSrcStr: PAnsiChar; cchSrc: Integer; var lpCharType): BOOL; stdcall;
function GetStringTypeExW(Locale: LCID; dwInfoType: DWORD;lpSrcStr: PWideChar; cchSrc: Integer; var lpCharType): BOOL; stdcall;
function GetStringTypeW(dwInfoType: DWORD; const lpSrcStr: WCHAR; cchSrc: BOOL;var lpCharType: Word): BOOL; stdcall;
function GetSystemDefaultLangID: LANGID; stdcall;
function GetSystemDefaultLCID: LCID; stdcall;
function GetSystemDefaultUILanguage: LANGID; stdcall;
function GetSystemDirectoryA(lpBuffer: PAnsiChar; uSize: UINT): UINT; stdcall;
function GetSystemDirectoryW(lpBuffer: PWideChar; uSize: UINT): UINT; stdcall;
procedure GetSystemInfo(var lpSystemInfo: TSystemInfo); stdcall;
function GetSystemPowerStatus(var lpSystemPowerStatus: TSystemPowerStatus): BOOL; stdcall;
function GetSystemRegistryQuota(out pdwQuotaAllowed, pdwQuotaUsed: DWORD): BOOL; stdcall;
procedure GetSystemTime(var lpSystemTime: TSystemTime); stdcall;
function GetSystemTimeAdjustment(var lpTimeAdjustment, lpTimeIncrement: DWORD;var lpTimeAdjustmentDisabled: BOOL): BOOL; stdcall;
procedure GetSystemTimeAsFileTime(var lpSystemTimeAsFileTime: TFileTime); stdcall;
function GetSystemTimes(lpIdleTime, lpKernelTime, lpUserTime: LPFILETIME): BOOL; stdcall;
function GetSystemWindowsDirectoryA(lpBuffer: LPSTR; uSize: UINT): UINT; stdcall;
function GetSystemWindowsDirectoryW(lpBuffer: LPWSTR; uSize: UINT): UINT; stdcall;
function GetSystemWow64DirectoryA(lpBuffer: LPSTR; uSize: UINT): UINT; stdcall;
function GetSystemWow64DirectoryW(lpBuffer: LPWSTR; uSize: UINT): UINT; stdcall;
function GetTapeParameters(hDevice: THandle; dwOperation: DWORD;var lpdwSize: DWORD; lpTapeInformation: Pointer): DWORD; stdcall;
function GetTapePosition(hDevice: THandle; dwPositionType: DWORD;var lpdwPartition, lpdwOffsetLow: DWORD; lpdwOffsetHigh: Pointer): DWORD; stdcall;
function GetTapeStatus(hDevice: THandle): DWORD; stdcall;
function GetTempFileNameA(lpPathName, lpPrefixString: PAnsiChar;uUnique: UINT; lpTempFileName: PAnsiChar): UINT; stdcall;
function GetTempFileNameW(lpPathName, lpPrefixString: PWideChar;uUnique: UINT; lpTempFileName: PWideChar): UINT; stdcall;
function GetTempPathA(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall;
function GetTempPathW(nBufferLength: DWORD; lpBuffer: PWideChar): DWORD; stdcall;
function GetThreadContext(hThread: THandle; var lpContext: TContext): BOOL; stdcall;
function GetThreadId(Thread: HANDLE): DWORD; stdcall;
function GetThreadIOPendingFlag(hThread: HANDLE; out lpIOIsPending: BOOL): BOOL; stdcall;
function GetThreadLocale: LCID; stdcall;
function GetThreadPriority(hThread: THandle): Integer; stdcall;
function GetThreadPriorityBoost(hThread: THandle; var DisablePriorityBoost: Bool): BOOL; stdcall;
function GetThreadSelectorEntry(hThread: THandle; dwSelector: DWORD;var lpSelectorEntry: TLDTEntry): BOOL; stdcall;
function GetThreadTimes(hThread: THandle;var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime: TFileTime): BOOL; stdcall;
function GetTickCount: DWORD; stdcall;
function GetTimeFormatA(Locale: LCID; dwFlags: DWORD; lpTime: PSystemTime;lpFormat: PAnsiChar; lpTimeStr: PAnsiChar; cchTime: Integer): Integer; stdcall;
function GetTimeFormatW(Locale: LCID; dwFlags: DWORD; lpTime: PSystemTime;lpFormat: PWideChar; lpTimeStr: PWideChar; cchTime: Integer): Integer; stdcall;
function GetTimeZoneInformation(var lpTimeZoneInformation: TTimeZoneInformation): DWORD; stdcall;
function GetUserDefaultLangID: LANGID; stdcall;
function GetUserDefaultLCID: LCID; stdcall;
function GetUserDefaultUILanguage: LANGID; stdcall;
function GetUserGeoID(GeoClass: GEOCLASS): GEOID; stdcall;
function GetVersion: DWORD; stdcall;
function GetVersionExA(var lpVersionInformation: TOSVersionInfo): BOOL; stdcall;
function GetVersionExW(var lpVersionInformation: TOSVersionInfo): BOOL; stdcall;
function GetVolumeInformationA(lpRootPathName: PAnsiChar;lpVolumeNameBuffer: PAnsiChar; nVolumeNameSize: DWORD; lpVolumeSerialNumber: PDWORD;var lpMaximumComponentLength, lpFileSystemFlags: DWORD;lpFileSystemNameBuffer: PAnsiChar; nFileSystemNameSize: DWORD): BOOL; stdcall;
function GetVolumeInformationW(lpRootPathName: PWideChar;lpVolumeNameBuffer: PWideChar; nVolumeNameSize: DWORD; lpVolumeSerialNumber: PDWORD;var lpMaximumComponentLength, lpFileSystemFlags: DWORD;lpFileSystemNameBuffer: PWideChar; nFileSystemNameSize: DWORD): BOOL; stdcall;
function GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: LPCSTR;lpszVolumeName: LPSTR; cchBufferLength: DWORD): BOOL; stdcall;
function GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR;lpszVolumeName: LPWSTR; cchBufferLength: DWORD): BOOL; stdcall;
function GetVolumePathNameA(lpszFileName: LPCSTR; lpszVolumePathName: LPSTR;cchBufferLength: DWORD): BOOL; stdcall;
function GetVolumePathNamesForVolumeNameA(lpszVolumeName, lpszVolumePathNames: LPCSTR;cchBufferLength: DWORD; var lpcchReturnLength: DWORD): BOOL; stdcall;
function GetVolumePathNamesForVolumeNameW(lpszVolumeName, lpszVolumePathNames: LPCWSTR;cchBufferLength: DWORD; var lpcchReturnLength: DWORD): BOOL; stdcall;
function GetVolumePathNameW(lpszFileName: LPCWSTR; lpszVolumePathName: LPWSTR;cchBufferLength: DWORD): BOOL; stdcall;
function GetWindowsDirectoryA(lpBuffer: PAnsiChar; uSize: UINT): UINT; stdcall;
function GetWindowsDirectoryW(lpBuffer: PWideChar; uSize: UINT): UINT; stdcall;
function GetWriteWatch(dwFlags: DWORD; lpBaseAddress: PVOID;dwRegionSize: SIZE_T; var lpAddresses: PVOID; var lpdwCount: ULONG_PTR;var lpdwGranularity: ULONG): UINT; stdcall;
function GlobalAddAtomA(lpString: PAnsiChar): ATOM; stdcall;
function GlobalAddAtomW(lpString: PWideChar): ATOM; stdcall;
function GlobalAlloc(uFlags: UINT; dwBytes: DWORD): HGLOBAL; stdcall;
function GlobalCompact(dwMinFree: DWORD): UINT; stdcall;
function GlobalDeleteAtom(nAtom: ATOM): ATOM; stdcall;
function GlobalFindAtomA(lpString: PAnsiChar): ATOM; stdcall;
function GlobalFindAtomW(lpString: PWideChar): ATOM; stdcall;
procedure GlobalFix(hMem: HGLOBAL); stdcall;
function GlobalFlags(hMem: HGLOBAL): UINT; stdcall;
function GlobalFree(hMem: HGLOBAL): HGLOBAL; stdcall;
function GlobalGetAtomNameA(nAtom: ATOM; lpBuffer: PAnsiChar; nSize: Integer): UINT; stdcall;
function GlobalGetAtomNameW(nAtom: ATOM; lpBuffer: PWideChar; nSize: Integer): UINT; stdcall;
function GlobalHandle(Mem: Pointer): HGLOBAL; stdcall;
function GlobalLock(hMem: HGLOBAL): Pointer; stdcall;
procedure GlobalMemoryStatus(var lpBuffer: TMemoryStatus); stdcall;
function GlobalMemoryStatusEx(var lpBuffer: MEMORYSTATUSEX): BOOL; stdcall;
function GlobalReAlloc(hMem: HGLOBAL; dwBytes: DWORD; uFlags: UINT): HGLOBAL; stdcall;
function GlobalSize(hMem: HGLOBAL): DWORD; stdcall;
procedure GlobalUnfix(hMem: HGLOBAL); stdcall;
function GlobalUnlock(hMem: HGLOBAL): BOOL; stdcall;
function GlobalUnWire(hMem: HGLOBAL): BOOL; stdcall;
function GlobalWire(hMem: HGLOBAL): Pointer; stdcall;
function Heap32First(var lphe: HEAPENTRY32; th32ProcessID: DWORD;th32HeapID: ULONG_PTR): BOOL; stdcall;
function Heap32ListFirst(hSnapshot: HANDLE; var lphl: HEAPLIST32): BOOL; stdcall;
function Heap32ListNext(hSnapshot: HANDLE; var lphl: HEAPLIST32): BOOL; stdcall;
function Heap32Next(var lphe: HEAPENTRY32): BOOL; stdcall;
function HeapAlloc(hHeap: THandle; dwFlags, dwBytes: DWORD): Pointer; stdcall;
function HeapCompact(hHeap: THandle; dwFlags: DWORD): UINT; stdcall;
function HeapCreate(flOptions, dwInitialSize, dwMaximumSize: DWORD): THandle; stdcall;
function HeapDestroy(hHeap: THandle): BOOL; stdcall;
function HeapFree(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer): BOOL; stdcall;
function HeapLock(hHeap: THandle): BOOL; stdcall;
function HeapQueryInformation(HeapHandle: HANDLE; HeapInformationClass: HEAP_INFORMATION_CLASS;HeapInformation: PVOID; HeapInformationLength: SIZE_T; ReturnLength: PSIZE_T): BOOL; stdcall;
function HeapReAlloc(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer; dwBytes: DWORD): Pointer; stdcall;
function HeapSetInformation(HeapHandle: HANDLE; HeapInformationClass: HEAP_INFORMATION_CLASS;HeapInformation: PVOID; HeapInformationLength: SIZE_T): BOOL; stdcall;
function HeapSize(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer): DWORD; stdcall;
function HeapUnlock(hHeap: THandle): BOOL; stdcall;
function HeapValidate(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer): BOOL; stdcall;
function HeapWalk(hHeap: THandle; var lpEntry: TProcessHeapEntry): BOOL; stdcall;
function InitAtomTable(nSize: DWORD): BOOL; stdcall;
procedure InitializeCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
function InitializeCriticalSectionAndSpinCount(var lpCriticalSection: TRTLCriticalSection; dwSpinCount: DWORD): BOOL; stdcall;
procedure InitializeSListHead(ListHead: PSLIST_HEADER); stdcall;
function InterlockedCompareExchange(var Destination: Longint; Exchange: Longint; Comperand: Longint): Longint; stdcall;
function  InterlockedCompareExchange64(var Destination: LONGLONG; Exchange, Comperand: LONGLONG): LONGLONG; stdcall;
function InterlockedDecrement(var Addend: Integer): Integer; stdcall;
function InterlockedExchange(var Target: Integer; Value: Integer): Integer; stdcall;
function InterlockedExchangeAdd(var Addend: Longint; Value: Longint): Longint; stdcall; overload;
function InterlockedFlushSList(ListHead: PSLIST_HEADER): PSLIST_ENTRY; stdcall;
function InterlockedIncrement(var Addend: Integer): Integer; stdcall;
function InterlockedPopEntrySList(ListHead: PSLIST_HEADER): PSLIST_ENTRY; stdcall;
function InterlockedPushEntrySList(ListHead: PSLIST_HEADER; ListEntry: PSLIST_ENTRY): PSLIST_ENTRY; stdcall;
function IsBadCodePtr(lpfn: FARPROC): BOOL; stdcall;
function IsBadHugeReadPtr(lp: Pointer; ucb: UINT): BOOL; stdcall;
function IsBadHugeWritePtr(lp: Pointer; ucb: UINT): BOOL; stdcall;
function IsBadReadPtr(lp: Pointer; ucb: UINT): BOOL; stdcall;
function IsBadStringPtrA(lpsz: PAnsiChar; ucchMax: UINT): BOOL; stdcall;
function IsBadStringPtrW(lpsz: PWideChar; ucchMax: UINT): BOOL; stdcall;
function IsBadWritePtr(lp: Pointer; ucb: UINT): BOOL; stdcall;
function IsDBCSLeadByte(TestChar: Byte): BOOL; stdcall;
function IsDBCSLeadByteEx(CodePage: UINT; TestChar: Byte): BOOL; stdcall;
function IsDebuggerPresent: BOOL; stdcall;
function IsNLSDefinedString(Function_: NLS_FUNCTION; dwFlags: DWORD; lpVersionInformation: LPNLSVERSIONINFO;lpString: LPCWSTR; cchStr: Integer): BOOL; stdcall;
function IsProcessInJob(ProcessHandle, JobHandle: HANDLE; var Result_: BOOL): BOOL; stdcall;
function IsProcessorFeaturePresent(ProcessorFeature: DWORD): BOOL; stdcall;
function IsSystemResumeAutomatic: BOOL; stdcall;
function IsValidCodePage(CodePage: UINT): BOOL; stdcall;
function IsValidLanguageGroup(LanguageGroup: LGRPID; dwFlags: DWORD): BOOL; stdcall;
function IsValidLocale(Locale: LCID; dwFlags: DWORD): BOOL; stdcall;
function IsWow64Process(hProcess: HANDLE; var Wow64Process: BOOL): BOOL; stdcall;
function LCMapStringA(Locale: LCID; dwMapFlags: DWORD; lpSrcStr: PAnsiChar;cchSrc: Integer; lpDestStr: PAnsiChar; cchDest: Integer): Integer; stdcall;
function LCMapStringW(Locale: LCID; dwMapFlags: DWORD; lpSrcStr: PWideChar;cchSrc: Integer; lpDestStr: PWideChar; cchDest: Integer): Integer; stdcall;
procedure LeaveCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall;
function LoadLibraryA(lpLibFileName: PAnsiChar): HMODULE; stdcall;
function LoadLibraryExA(lpLibFileName: PAnsiChar; hFile: THandle; dwFlags: DWORD): HMODULE; stdcall;
function LoadLibraryExW(lpLibFileName: PWideChar; hFile: THandle; dwFlags: DWORD): HMODULE; stdcall;
function LoadLibraryW(lpLibFileName: PWideChar): HMODULE; stdcall;
function LoadModule(lpModuleName: LPCSTR; lpParameterBlock: Pointer): DWORD; stdcall;
function LoadResource(hModule: HINST; hResInfo: HRSRC): HGLOBAL; stdcall;
function LocalAlloc(uFlags, uBytes: UINT): HLOCAL; stdcall;
function LocalCompact(uMinFree: UINT): UINT; stdcall;
function LocalFileTimeToFileTime(const lpLocalFileTime: TFileTime; var lpFileTime: TFileTime): BOOL; stdcall;
function LocalFlags(hMem: HLOCAL): UINT; stdcall;
function LocalFree(hMem: HLOCAL): HLOCAL; stdcall;
function LocalHandle(pMem: LPCVOID): HLOCAL; stdcall;
function LocalLock(hMem: HLOCAL): Pointer; stdcall;
function LocalReAlloc(hMem: HLOCAL; uBytes, uFlags: UINT): HLOCAL; stdcall;
function LocalShrink(hMem: HLOCAL; cbNewSize: UINT): UINT; stdcall;
function LocalSize(hMem: HLOCAL): UINT; stdcall;
function LocalUnlock(hMem: HLOCAL): BOOL; stdcall;
function LockFile(hFile: THandle; dwFileOffsetLow, dwFileOffsetHigh: DWORD;nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh: DWORD): BOOL; stdcall;
function LockFileEx(hFile: THandle; dwFlags, dwReserved: DWORD;nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh: DWORD;const lpOverlapped: TOverlapped): BOOL; stdcall;
function LockResource(hResData: HGLOBAL): Pointer; stdcall;
function lstrcatA(lpString1, lpString2: PAnsiChar): PAnsiChar; stdcall;
function lstrcatW(lpString1, lpString2: PWideChar): PWideChar; stdcall;
function lstrcmpA(lpString1, lpString2: PAnsiChar): Integer; stdcall;
function lstrcmpiA(lpString1, lpString2: PAnsiChar): Integer; stdcall;
function lstrcmpiW(lpString1, lpString2: PWideChar): Integer; stdcall;
function lstrcmpW(lpString1, lpString2: PWideChar): Integer; stdcall;
function lstrcpyA(lpString1, lpString2: PAnsiChar): PAnsiChar; stdcall;
function lstrcpynA(lpString1, lpString2: PAnsiChar; iMaxLength: Integer): PAnsiChar; stdcall;
function lstrcpynW(lpString1, lpString2: PWideChar; iMaxLength: Integer): PWideChar; stdcall;
function lstrcpyW(lpString1, lpString2: PWideChar): PWideChar; stdcall;
function lstrlenA(lpString: PAnsiChar): Integer; stdcall;
function lstrlenW(lpString: PWideChar): Integer; stdcall;
function MapUserPhysicalPages(VirtualAddress: PVOID; NumberOfPages: ULONG_PTR;PageArray: PULONG_PTR): BOOL; stdcall;
function MapUserPhysicalPagesScatter(VirtualAddresses: PVOID; NumberOfPages: ULONG_PTR;PageArray: PULONG_PTR): BOOL; stdcall;
function MapViewOfFile(hFileMappingObject: THandle; dwDesiredAccess: DWORD;dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap: DWORD): Pointer; stdcall;
function MapViewOfFileEx(hFileMappingObject: THandle;dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap: DWORD;lpBaseAddress: Pointer): Pointer; stdcall;
function Module32FirstW(hSnapshot: HANDLE; var lpme: MODULEENTRY32W): BOOL; stdcall;
function Module32NextW(hSnapshot: HANDLE; var lpme: MODULEENTRY32W): BOOL; stdcall;
function MoveFileA(lpExistingFileName, lpNewFileName: PAnsiChar): BOOL; stdcall;
function MoveFileExA(lpExistingFileName, lpNewFileName: PAnsiChar; dwFlags: DWORD): BOOL; stdcall;
function MoveFileExW(lpExistingFileName, lpNewFileName: PWideChar; dwFlags: DWORD): BOOL; stdcall;
function MoveFileW(lpExistingFileName, lpNewFileName: PWideChar): BOOL; stdcall;
function MoveFileWithProgressA(lpExistingFileName, lpNewFileName: PAnsiChar; lpProgressRoutine: TFNProgressRoutine;lpData: Pointer; dwFlags: DWORD): BOOL; stdcall;
function MoveFileWithProgressW(lpExistingFileName, lpNewFileName: PWideChar; lpProgressRoutine: TFNProgressRoutine;lpData: Pointer; dwFlags: DWORD): BOOL; stdcall;
function MulDiv(nNumber, nNumerator, nDenominator: Integer): Integer; stdcall;
function MultiByteToWideChar(CodePage: UINT; dwFlags: DWORD;const lpMultiByteStr: LPCSTR; cchMultiByte: Integer;lpWideCharStr: LPWSTR; cchWideChar: Integer): Integer; stdcall;
function NeedCurrentDirectoryForExePathA(ExeName: LPCSTR): BOOL; stdcall;
function NeedCurrentDirectoryForExePathW(ExeName: LPCWSTR): BOOL; stdcall;
function OpenEventA(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall;
function OpenEventW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall;
function OpenFile(const lpFileName: LPCSTR; var lpReOpenBuff: TOFStruct; uStyle: UINT): HFILE; stdcall;
function OpenFileMappingA(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall;
function OpenFileMappingW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall;
function OpenJobObjectA(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: LPCSTR): HANDLE; stdcall;
function OpenJobObjectW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: LPCWSTR): HANDLE; stdcall;
function OpenMutexA(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall;
function OpenMutexW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall;
function OpenProcess(dwDesiredAccess: DWORD; bInheritHandle: BOOL; dwProcessId: DWORD): THandle; stdcall;
function OpenRaw(lpFilename: PChar; ulFlags: ULONG; pvContext: Pointer): DWORD; stdcall;
function OpenRawA(lpFilename: PAnsiChar; ulFlags: ULONG; pvContext: Pointer): DWORD; stdcall;
function OpenRawW(lpFilename: PWideChar; ulFlags: ULONG; pvContext: Pointer): DWORD; stdcall;
function OpenSemaphoreA(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall;
function OpenSemaphoreW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall;
function OpenThread(dwDesiredAccess: DWORD; bInheritHandle: BOOL;dwThreadId: DWORD): HANDLE; stdcall;
function OpenWaitableTimerA(dwDesiredAccess: DWORD; bInheritHandle: BOOL;lpTimerName: PAnsiChar): THandle; stdcall;
function OpenWaitableTimerW(dwDesiredAccess: DWORD; bInheritHandle: BOOL;lpTimerName: PWideChar): THandle; stdcall;
procedure OutputDebugStringA(lpOutputString: PAnsiChar); stdcall;
procedure OutputDebugStringW(lpOutputString: PWideChar); stdcall;
function PeekConsoleInputA(hConsoleInput: THandle; var lpBuffer: TInputRecord;nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall;
function PeekConsoleInputW(hConsoleInput: THandle; var lpBuffer: TInputRecord;nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall;
function PeekNamedPipe(hNamedPipe: THandle; lpBuffer: Pointer; nBufferSize: DWORD;lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage: Pointer): BOOL; stdcall;
function PostQueuedCompletionStatus(CompletionPort: THandle; dwNumberOfBytesTransferred: DWORD;dwCompletionKey: DWORD; lpOverlapped: POverlapped): BOOL; stdcall;
function PrepareTape(hDevice: THandle; dwOperation: DWORD; bImmediate: BOOL): DWORD; stdcall;
function Process32FirstW(hSnapshot: HANDLE; var lppe: PROCESSENTRY32W): BOOL; stdcall;
function Process32NextW(hSnapshot: HANDLE; var lppe: PROCESSENTRY32W): BOOL; stdcall;
function ProcessIdToSessionId(dwProcessId: DWORD; var pSessionId: DWORD): BOOL; stdcall;
function PulseEvent(hEvent: THandle): BOOL; stdcall;
function PurgeComm(hFile: THandle; dwFlags: DWORD): BOOL; stdcall;
function QueryActCtxW(dwFlags: DWORD; hActCtx: HANDLE; pvSubInstance: PVOID;ulInfoClass: ULONG; pvBuffer: PVOID; cbBuffer: SIZE_T;pcbWrittenOrRequired: PSIZE_T): BOOL; stdcall;{$EXTERNALSYM QueryActCtxW}typePQUERYACTCTXW_FUNC = function(dwFlags: DWORD; hActCtx: HANDLE;pvSubInstance: PVOID; ulInfoClass: ULONG; pvBuffer: PVOID; cbBuffer: SIZE_T;pcbWrittenOrRequired: PSIZE_T): BOOL; stdcall;
function QueryDepthSList(ListHead: PSLIST_HEADER): USHORT; stdcall;
function QueryDosDeviceA(lpDeviceName: PAnsiChar; lpTargetPath: PAnsiChar; ucchMax: DWORD): DWORD; stdcall;
function QueryDosDeviceW(lpDeviceName: PWideChar; lpTargetPath: PWideChar; ucchMax: DWORD): DWORD; stdcall;
function QueryInformationJobObject(hJob: HANDLE; JobObjectInformationClass: JOBOBJECTINFOCLASS;lpJobObjectInformation: LPVOID; cbJobObjectInformationLength: DWORD;lpReturnLength: LPDWORD): BOOL; stdcall;
function QueryMemoryResourceNotification(ResourceNotificationHandle: HANDLE;ResourceState: BOOL): BOOL; stdcall;
function QueryPerformanceCounter(var lpPerformanceCount: TLargeInteger): BOOL; stdcall;
function QueryPerformanceFrequency(var lpFrequency: TLargeInteger): BOOL; stdcall;
function QueryRecoveryAgentsA(p1: PAnsiChar; var p2: Pointer; var p3: TRecoveryAgentInformationA): DWORD; stdcall;
function QueryRecoveryAgentsW(p1: PWideChar; var p2: Pointer; var p3: TRecoveryAgentInformationW): DWORD; stdcall;
function QueueUserAPC(pfnAPC: TFNAPCProc; hThread: THandle; dwData: DWORD): BOOL; stdcall;
function QueueUserWorkItem(Function_: LPTHREAD_START_ROUTINE; Context: PVOID;Flags: ULONG): BOOL; stdcall;
procedure RaiseException(dwExceptionCode, dwExceptionFlags, nNumberOfArguments: DWORD;lpArguments: PDWORD); stdcall;
function ReadConsoleA(hConsoleInput: THandle; lpBuffer: Pointer;nNumberOfCharsToRead: DWORD; var lpNumberOfCharsRead: DWORD; lpReserved: Pointer): BOOL; stdcall;
function ReadConsoleInputA(hConsoleInput: THandle; var lpBuffer: TInputRecord;nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall;
function ReadConsoleInputW(hConsoleInput: THandle; var lpBuffer: TInputRecord;nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall;
function ReadConsoleOutputA(hConsoleOutput: THandle; lpBuffer: Pointer;dwBufferSize, dwBufferCoord: TCoord; var lpReadRegion: TSmallRect): BOOL; stdcall;
function ReadConsoleOutputAttribute(hConsoleOutput: THandle; lpAttribute: Pointer;nLength: DWORD; dwReadCoord: TCoord; var lpNumberOfAttrsRead: DWORD): BOOL; stdcall;
function ReadConsoleOutputCharacterA(hConsoleOutput: THandle; lpCharacter: PAnsiChar;nLength: DWORD; dwReadCoord: TCoord; var lpNumberOfCharsRead: DWORD): BOOL; stdcall;
function ReadConsoleOutputCharacterW(hConsoleOutput: THandle; lpCharacter: PWideChar;nLength: DWORD; dwReadCoord: TCoord; var lpNumberOfCharsRead: DWORD): BOOL; stdcall;
function ReadConsoleOutputW(hConsoleOutput: THandle; lpBuffer: Pointer;dwBufferSize, dwBufferCoord: TCoord; var lpReadRegion: TSmallRect): BOOL; stdcall;
function ReadConsoleW(hConsoleInput: THandle; lpBuffer: Pointer;nNumberOfCharsToRead: DWORD; var lpNumberOfCharsRead: DWORD; lpReserved: Pointer): BOOL; stdcall;
function ReadDirectoryChangesW(hDirectory: THandle; lpBuffer: Pointer;nBufferLength: DWORD; bWatchSubtree: Bool; dwNotifyFilter: DWORD;lpBytesReturned: LPDWORD; lpOverlapped: POverlapped;lpCompletionRoutine: FARPROC): BOOL; stdcall;
function ReadFile(hFile: THandle; var Buffer; nNumberOfBytesToRead: DWORD;var lpNumberOfBytesRead: DWORD; lpOverlapped: POverlapped): BOOL; stdcall;
function ReadFileEx(hFile: THandle; lpBuffer: Pointer; nNumberOfBytesToRead: DWORD;lpOverlapped: POverlapped; lpCompletionRoutine: TPROverlappedCompletionRoutine): BOOL; stdcall;
function ReadFileScatter(hFile: HANDLE; aSegmentArray: PFILE_SEGMENT_ELEMENT;nNumberOfBytesToRead: DWORD; lpReserved: LPDWORD; lpOverlapped: LPOVERLAPPED): BOOL; stdcall;
function ReadProcessMemory(hProcess: THandle; const lpBaseAddress: Pointer; lpBuffer: Pointer;nSize: DWORD; var lpNumberOfBytesRead: DWORD): BOOL; stdcall;
function ReadRaw(pfExportCallback: TFNExportFunc; pvCallbackContext, pvContext: Pointer): DWORD; stdcall;
function RegisterWaitForSingleObject(var phNewWaitObject: HANDLE; hObject: HANDLE;Callback: WAITORTIMERCALLBACK; Context: PVOID; dwMilliseconds, dwFlags: ULONG): BOOL; stdcall;
function RegisterWaitForSingleObjectEx(hObject: HANDLE;Callback: WAITORTIMERCALLBACK; Context: PVOID; dwMilliseconds, dwFlags: ULONG): HANDLE; stdcall;
procedure ReleaseActCtx(hActCtx: HANDLE); stdcall;
function ReleaseMutex(hMutex: THandle): BOOL; stdcall;
function ReleaseSemaphore(hSemaphore: THandle; lReleaseCount: Longint;lpPreviousCount: Pointer): BOOL; stdcall;
function RemoveDirectoryA(lpPathName: PAnsiChar): BOOL; stdcall;
function RemoveDirectoryW(lpPathName: PWideChar): BOOL; stdcall;
function RemoveVectoredExceptionHandler(VectoredHandlerHandle: PVOID): ULONG; stdcall;
function ReOpenFile(hOriginalFile: HANDLE; dwDesiredAccess, dwShareMode, dwFlagsAndAttributes: DWORD): HANDLE; stdcall;
function ReplaceFileA(lpReplacedFileName, lpReplacementFileName,lpBackupFileName: LPCSTR; dwReplaceFlags: DWORD; lpExclude: LPVOID;lpReserved: LPVOID): BOOL; stdcall;
function ReplaceFileW(lpReplacedFileName, lpReplacementFileName,lpBackupFileName: LPCWSTR; dwReplaceFlags: DWORD; lpExclude: LPVOID;lpReserved: LPVOID): BOOL; stdcall;
function RequestDeviceWakeup(hDevice: HANDLE): BOOL; stdcall;
function RequestWakeupLatency(latency: LATENCY_TIME): BOOL; stdcall;
function ResetEvent(hEvent: THandle): BOOL; stdcall;
function ResetWriteWatch(lpBaseAddress: LPVOID; dwRegionSize: SIZE_T): UINT; stdcall;
procedure RestoreLastError(dwErrCode: DWORD); stdcall;{$EXTERNALSYM RestoreLastError}typePRESTORE_LAST_ERROR = procedure(dwErrCode: DWORD); stdcall;
function ResumeThread(hThread: THandle): DWORD; stdcall;
function ScrollConsoleScreenBufferA(hConsoleOutput: THandle;const lpScrollRectangle: TSmallRect; lpClipRectangle: PSmallRect;dwDestinationOrigin: TCoord; var lpFill: TCharInfo): BOOL; stdcall;
function ScrollConsoleScreenBufferW(hConsoleOutput: THandle;const lpScrollRectangle: TSmallRect; lpClipRectangle: PSmallRect;dwDestinationOrigin: TCoord; var lpFill: TCharInfo): BOOL; stdcall;
function SearchPathA(lpPath, lpFileName, lpExtension: PAnsiChar;nBufferLength: DWORD; lpBuffer: PAnsiChar; var lpFilePart: PAnsiChar): DWORD; stdcall;
function SearchPathW(lpPath, lpFileName, lpExtension: PWideChar;nBufferLength: DWORD; lpBuffer: PWideChar; var lpFilePart: PWideChar): DWORD; stdcall;
function SetCalendarInfoA(Locale: LCID; Calendar: CALID; CalType: CALTYPE;lpCalData: LPCSTR): BOOL; stdcall;
function SetCalendarInfoW(Locale: LCID; Calendar: CALID; CalType: CALTYPE;lpCalData: LPCWSTR): BOOL; stdcall;
function SetCommBreak(hFile: THandle): BOOL; stdcall;
function SetCommConfig(hCommDev: THandle; const lpCC: TCommConfig; dwSize: DWORD): BOOL; stdcall;
function SetCommMask(hFile: THandle; dwEvtMask: DWORD): BOOL; stdcall;
function SetCommState(hFile: THandle; const lpDCB: TDCB): BOOL; stdcall;
function SetCommTimeouts(hFile: THandle; const lpCommTimeouts: TCommTimeouts): BOOL; stdcall;
function SetComputerNameA(lpComputerName: PAnsiChar): BOOL; stdcall;
function SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT; lpBuffer: LPCSTR): BOOL; stdcall;
function SetComputerNameExW(NameType: COMPUTER_NAME_FORMAT; lpBuffer: LPCWSTR): BOOL; stdcall;
function SetComputerNameW(lpComputerName: PWideChar): BOOL; stdcall;
function SetConsoleActiveScreenBuffer(hConsoleOutput: THandle): BOOL; stdcall;
function SetConsoleCP(wCodePageID: UINT): BOOL; stdcall;
function SetConsoleCtrlHandler(HandlerRoutine: TFNHandlerRoutine; Add: BOOL): BOOL; stdcall;
function SetConsoleCursorInfo(hConsoleOutput: THandle;const lpConsoleCursorInfo: TConsoleCursorInfo): BOOL; stdcall;
function SetConsoleCursorPosition(hConsoleOutput: THandle; dwCursorPosition: TCoord): BOOL; stdcall;
function SetConsoleMode(hConsoleHandle: THandle; dwMode: DWORD): BOOL; stdcall;
function SetConsoleOutputCP(wCodePageID: UINT): BOOL; stdcall;
function SetConsoleScreenBufferSize(hConsoleOutput: THandle; dwSize: TCoord): BOOL; stdcall;
function SetConsoleTextAttribute(hConsoleOutput: THandle; wAttributes: Word): BOOL; stdcall;
function SetConsoleTitleA(lpConsoleTitle: PAnsiChar): BOOL; stdcall;
function SetConsoleTitleW(lpConsoleTitle: PWideChar): BOOL; stdcall;
function SetConsoleWindowInfo(hConsoleOutput: THandle; bAbsolute: BOOL;const lpConsoleWindow: TSmallRect): BOOL; stdcall;
function SetCriticalSectionSpinCount(var lpCriticalSection: TRTLCriticalSection; dwSpinCount: DWORD): DWORD; stdcall;
function SetCurrentDirectoryA(lpPathName: PAnsiChar): BOOL; stdcall;
function SetCurrentDirectoryW(lpPathName: PWideChar): BOOL; stdcall;
function SetDefaultCommConfigA(lpszName: PAnsiChar; lpCC: PCommConfig; dwSize: DWORD): BOOL; stdcall;
function SetDefaultCommConfigW(lpszName: PWideChar; lpCC: PCommConfig; dwSize: DWORD): BOOL; stdcall;
function SetDllDirectoryA(lpPathName: LPCSTR): BOOL; stdcall;
function SetDllDirectoryW(lpPathName: LPCWSTR): BOOL; stdcall;
function SetEndOfFile(hFile: THandle): BOOL; stdcall;
function SetEnvironmentStringsA(NewEnvironment: LPSTR): BOOL; stdcall;
function SetEnvironmentStringsW(NewEnvironment: LPWSTR): BOOL; stdcall;
function SetEnvironmentVariableA(lpName, lpValue: PAnsiChar): BOOL; stdcall;
function SetEnvironmentVariableW(lpName, lpValue: PWideChar): BOOL; stdcall;
function SetErrorMode(uMode: UINT): UINT; stdcall;
function SetEvent(hEvent: THandle): BOOL; stdcall;
procedure SetFileApisToANSI; stdcall;
procedure SetFileApisToOEM; stdcall;
function SetFileAttributesA(lpFileName: PAnsiChar; dwFileAttributes: DWORD): BOOL; stdcall;
function SetFileAttributesW(lpFileName: PWideChar; dwFileAttributes: DWORD): BOOL; stdcall;
function SetFilePointer(hFile: THandle; lDistanceToMove: Longint;lpDistanceToMoveHigh: Pointer; dwMoveMethod: DWORD): DWORD; stdcall;
function SetFilePointerEx(hFile: HANDLE; liDistanceToMove: LARGE_INTEGER;lpNewFilePointer: PLARGE_INTEGER; dwMoveMethod: DWORD): BOOL; stdcall;
function SetFileShortNameA(hFile: HANDLE; lpShortName: LPCSTR): BOOL; stdcall;
function SetFileShortNameW(hFile: HANDLE; lpShortName: LPCWSTR): BOOL; stdcall;
function SetFileTime(hFile: THandle;lpCreationTime, lpLastAccessTime, lpLastWriteTime: PFileTime): BOOL; stdcall;
function SetFileValidData(hFile: HANDLE; ValidDataLength: LONGLONG): BOOL; stdcall;
function SetFirmwareEnvironmentVariableA(lpName, lpGuid: LPCSTR; pValue: PVOID;nSize: DWORD): BOOL; stdcall;
function SetFirmwareEnvironmentVariableW(lpName, lpGuid: LPCWSTR; pValue: PVOID;nSize: DWORD): BOOL; stdcall;
function SetHandleCount(uNumber: UINT): UINT; stdcall;
function SetHandleInformation(hObject: THandle; dwMask: DWORD; dwFlags: DWORD): BOOL; stdcall;
function SetInformationJobObject(hJob: HANDLE; JobObjectInformationClass: JOBOBJECTINFOCLASS;lpJobObjectInformation: LPVOID; cbJobObjectInformationLength: DWORD): BOOL; stdcall;
procedure SetLastError(dwErrCode: DWORD); stdcall;
function SetLocaleInfoA(Locale: LCID; LCType: LCTYPE; lpLCData: PAnsiChar): BOOL; stdcall;
function SetLocaleInfoW(Locale: LCID; LCType: LCTYPE; lpLCData: PWideChar): BOOL; stdcall;
function SetLocalTime(const lpSystemTime: TSystemTime): BOOL; stdcall;
function SetMailslotInfo(hMailslot: THandle; lReadTimeout: DWORD): BOOL; stdcall;
function SetMessageWaitingIndicator(hMsgIndicator: HANDLE; ulMsgCount: ULONG): BOOL; stdcall;
function SetNamedPipeHandleState(hNamedPipe: THandle; var lpMode: DWORD;lpMaxCollectionCount, lpCollectDataTimeout: Pointer): BOOL; stdcall;
function SetPriorityClass(hProcess: THandle; dwPriorityClass: DWORD): BOOL; stdcall;
function SetProcessAffinityMask(hProcess: THandle;dwProcessAffinityMask: DWORD): BOOL; stdcall;
function SetProcessPriorityBoost(hThread: THandle; DisablePriorityBoost: Bool): BOOL; stdcall;
function SetProcessShutdownParameters(dwLevel, dwFlags: DWORD): BOOL; stdcall;
function SetProcessWorkingSetSize(hProcess: THandle;dwMinimumWorkingSetSize, dwMaximumWorkingSetSize: DWORD): BOOL; stdcall;
function SetProcessWorkingSetSizeEx(hProcess: HANDLE; dwMinimumWorkingSetSize, dwMaximumWorkingSetSize: SIZE_T; Flags: DWORD): BOOL; stdcall;
function SetStdHandle(nStdHandle: DWORD; hHandle: THandle): BOOL; stdcall;
function SetSystemPowerState(fSuspend, fForce: BOOL): BOOL; stdcall;
function SetSystemTime(const lpSystemTime: TSystemTime): BOOL; stdcall;
function SetSystemTimeAdjustment(dwTimeAdjustment: DWORD; bTimeAdjustmentDisabled: BOOL): BOOL; stdcall;
function SetTapeParameters(hDevice: THandle; dwOperation: DWORD; lpTapeInformation: Pointer): DWORD; stdcall;
function SetTapePosition(hDevice: THandle; dwPositionMethod, dwPartition: DWORD;dwOffsetLow, dwOffsetHigh: DWORD; bImmediate: BOOL): DWORD; stdcall;
function SetThreadAffinityMask(hThread: THandle; dwThreadAffinityMask: DWORD): DWORD; stdcall;
function SetThreadContext(hThread: THandle; const lpContext: TContext): BOOL; stdcall;
function SetThreadExecutionState(esFlags: EXECUTION_STATE): EXECUTION_STATE; stdcall;
function SetThreadIdealProcessor(hThread: THandle; dwIdealProcessor: DWORD): BOOL; stdcall;
function SetThreadLocale(Locale: LCID): BOOL; stdcall;
function SetThreadPriority(hThread: THandle; nPriority: Integer): BOOL; stdcall;
function SetThreadPriorityBoost(hThread: THandle; DisablePriorityBoost: Bool): BOOL; stdcall;
function SetTimerQueueTimer(TimerQueue, Callback: WAITORTIMERCALLBACK;Parameter: PVOID; DueTime, Period: DWORD; PreferIo: BOOL): HANDLE; stdcall;
function SetTimeZoneInformation(const lpTimeZoneInformation: TTimeZoneInformation): BOOL; stdcall;
function SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: TFNTopLevelExceptionFilter):TFNTopLevelExceptionFilter; stdcall;
function SetupComm(hFile: THandle; dwInQueue, dwOutQueue: DWORD): BOOL; stdcall;
function SetUserGeoID(GeoId: GEOID): BOOL; stdcall;
function SetVolumeLabelA(lpRootPathName: PAnsiChar; lpVolumeName: PAnsiChar): BOOL; stdcall;
function SetVolumeLabelW(lpRootPathName: PWideChar; lpVolumeName: PWideChar): BOOL; stdcall;
function SetVolumeMountPointA(lpszVolumeMountPoint, lpszVolumeName: LPCSTR): BOOL; stdcall;
function SetVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName: LPCWSTR): BOOL; stdcall;
function SetWaitableTimer(hTimer: THandle; var lpDueTime: TLargeInteger;lPeriod: Longint; pfnCompletionRoutine: TFNTimerAPCRoutine;lpArgToCompletionRoutine: Pointer; fResume: BOOL): BOOL; stdcall;
function SignalObjectAndWait(hObjectToSignal: THandle; hObjectToWaitOn: THandle;dwMilliseconds: DWORD; bAlertable: BOOL): BOOL; stdcall;
function SizeofResource(hModule: HINST; hResInfo: HRSRC): DWORD; stdcall;
procedure Sleep(dwMilliseconds: DWORD); stdcall;
function SleepEx(dwMilliseconds: DWORD; bAlertable: BOOL): DWORD; stdcall;
function SuspendThread(hThread: THandle): DWORD; stdcall;
function SwitchToFiber(lpFiber: Pointer): BOOL; stdcall;
function SwitchToThread: BOOL; stdcall;
function SystemTimeToFileTime(const lpSystemTime: TSystemTime; var lpFileTime: TFileTime): BOOL; stdcall;
function SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: PTimeZoneInformation;var lpUniversalTime, lpLocalTime: TSystemTime): BOOL; stdcall;
function TerminateJobObject(hJob: HANDLE; uExitCode: UINT): BOOL; stdcall;
function TerminateProcess(hProcess: THandle; uExitCode: UINT): BOOL; stdcall;
function TerminateThread(hThread: THandle; dwExitCode: DWORD): BOOL; stdcall;
function Thread32First(hSnapshot: HANDLE; var lpte: THREADENTRY32): BOOL; stdcall;
function Thread32Next(hSnapshot: HANDLE; var lpte: THREADENTRY32): BOOL; stdcall;
function TlsAlloc: DWORD; stdcall;
function TlsFree(dwTlsIndex: DWORD): BOOL; stdcall;
function TlsGetValue(dwTlsIndex: DWORD): Pointer; stdcall;
function TlsSetValue(dwTlsIndex: DWORD; lpTlsValue: Pointer): BOOL; stdcall;
function Toolhelp32ReadProcessMemory(th32ProcessID: DWORD; lpBaseAddress: LPCVOID;lpBuffer: LPVOID; cbRead: DWORD; lpNumberOfBytesRead: LPDWORD): BOOL; stdcall;
function TransactNamedPipe(hNamedPipe: THandle; lpInBuffer: Pointer; nInBufferSize: DWORD;lpOutBuffer: Pointer; nOutBufferSize: DWORD; var lpBytesRead: DWORD;lpOverlapped: POverlapped): BOOL; stdcall;
function TransmitCommChar(hFile: THandle; cChar: CHAR): BOOL; stdcall;
function TryEnterCriticalSection(var lpCriticalSection: TRTLCriticalSection): BOOL; stdcall;
function TzSpecificLocalTimeToSystemTime(const lpTimeZoneInformation: TIME_ZONE_INFORMATION;const lpLocalTime: SYSTEMTIME; var lpUniversalTime: SYSTEMTIME): BOOL; stdcall;
function UnhandledExceptionFilter(const ExceptionInfo: TExceptionPointers): Longint; stdcall;
function UnlockFile(hFile: THandle; dwFileOffsetLow, dwFileOffsetHigh: DWORD;nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh: DWORD): BOOL; stdcall;
function UnlockFileEx(hFile: THandle; dwReserved, nNumberOfBytesToUnlockLow: DWORD;nNumberOfBytesToUnlockHigh: DWORD; const lpOverlapped: TOverlapped): BOOL; stdcall;
function UnmapViewOfFile(lpBaseAddress: Pointer): BOOL; stdcall;
function UnregisterWait(WaitHandle: HANDLE): BOOL; stdcall;
function UnregisterWaitEx(WaitHandle, CompletionEvent: HANDLE): BOOL; stdcall;
function UpdateResourceA(hUpdate: THandle; lpType, lpName: PAnsiChar;wLanguage: Word; lpData: Pointer; cbData: DWORD): BOOL; stdcall;
function UpdateResourceW(hUpdate: THandle; lpType, lpName: PWideChar;wLanguage: Word; lpData: Pointer; cbData: DWORD): BOOL; stdcall;
function VerifyVersionInfoA(var lpVersionInformation: OSVERSIONINFOEXA;dwTypeMask: DWORD; dwlConditionMask: DWORDLONG): BOOL; stdcall;
function VerifyVersionInfoW(var lpVersionInformation: OSVERSIONINFOEXW;dwTypeMask: DWORD; dwlConditionMask: DWORDLONG): BOOL; stdcall;
function VerLanguageNameA(wLang: DWORD; szLang: PAnsiChar; nSize: DWORD): DWORD; stdcall;
function VerLanguageNameW(wLang: DWORD; szLang: PWideChar; nSize: DWORD): DWORD; stdcall;
function VerSetConditionMask(ConditionMask: ULONGLONG; TypeMask: DWORD;Condition: BYTE): ULONGLONG; stdcall;
function VirtualAlloc(lpvAddress: Pointer; dwSize, flAllocationType, flProtect: DWORD): Pointer; stdcall;
function VirtualAllocEx(hProcess: THandle; lpAddress: Pointer;dwSize, flAllocationType: DWORD; flProtect: DWORD): Pointer; stdcall;
function VirtualFree(lpAddress: Pointer; dwSize, dwFreeType: DWORD): BOOL; stdcall;
function VirtualFreeEx(hProcess: THandle; lpAddress: Pointer;dwSize, dwFreeType: DWORD): Pointer; stdcall;
function VirtualLock(lpAddress: Pointer; dwSize: DWORD): BOOL; stdcall;
function VirtualProtect(lpAddress: Pointer; dwSize, flNewProtect: DWORD;var OldProtect: DWORD): BOOL; stdcall; overload;
function VirtualProtectEx(hProcess: THandle; lpAddress: Pointer;dwSize, flNewProtect: DWORD; var OldProtect: DWORD): BOOL; stdcall; overload;
function VirtualQuery(lpAddress: Pointer;var lpBuffer: TMemoryBasicInformation; dwLength: DWORD): DWORD; stdcall;
function VirtualQueryEx(hProcess: THandle; lpAddress: Pointer;var lpBuffer: TMemoryBasicInformation; dwLength: DWORD): DWORD; stdcall;
function VirtualUnlock(lpAddress: Pointer; dwSize: DWORD): BOOL; stdcall;
function WaitCommEvent(hFile: THandle; var lpEvtMask: DWORD; lpOverlapped: POverlapped): BOOL; stdcall;
function WaitForDebugEvent(var lpDebugEvent: TDebugEvent; dwMilliseconds: DWORD): BOOL; stdcall;
function WaitForMultipleObjects(nCount: DWORD; lpHandles: PWOHandleArray;bWaitAll: BOOL; dwMilliseconds: DWORD): DWORD; stdcall;
function WaitForMultipleObjectsEx(nCount: DWORD; lpHandles: PWOHandleArray;bWaitAll: BOOL; dwMilliseconds: DWORD; bAlertable: BOOL): DWORD; stdcall;
function WaitForSingleObject(hHandle: THandle; dwMilliseconds: DWORD): DWORD; stdcall;
function WaitForSingleObjectEx(hHandle: THandle; dwMilliseconds: DWORD; bAlertable: BOOL): DWORD; stdcall;
function WaitNamedPipeA(lpNamedPipeName: PAnsiChar; nTimeOut: DWORD): BOOL; stdcall;
function WaitNamedPipeW(lpNamedPipeName: PWideChar; nTimeOut: DWORD): BOOL; stdcall;
function WideCharToMultiByte(CodePage: UINT; dwFlags: DWORD;lpWideCharStr: LPWSTR; cchWideChar: Integer; lpMultiByteStr: LPSTR;cchMultiByte: Integer; lpDefaultChar: LPCSTR; lpUsedDefaultChar: PBOOL): Integer; stdcall;
function WinExec(lpCmdLine: LPCSTR; uCmdShow: UINT): UINT; stdcall;
function Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: BOOL): BOOL; stdcall;{$EXTERNALSYM Wow64EnableWow64FsRedirection}//// for GetProcAddress//typePGET_SYSTEM_WOW64_DIRECTORY_A = function(lpBuffer: LPSTR; uSize: UINT): UINT; stdcall;{$EXTERNALSYM PGET_SYSTEM_WOW64_DIRECTORY_A}PGET_SYSTEM_WOW64_DIRECTORY_W = function(lpBuffer: LPWSTR; uSize: UINT): UINT; stdcall;
function WriteConsoleA(hConsoleOutput: THandle; const lpBuffer: Pointer;nNumberOfCharsToWrite: DWORD; var lpNumberOfCharsWritten: DWORD; lpReserved: Pointer): BOOL; stdcall;
function WriteConsoleInputA(hConsoleInput: THandle; const lpBuffer: TInputRecord;nLength: DWORD; var lpNumberOfEventsWritten: DWORD): BOOL; stdcall;
function WriteConsoleInputW(hConsoleInput: THandle; const lpBuffer: TInputRecord;nLength: DWORD; var lpNumberOfEventsWritten: DWORD): BOOL; stdcall;
function WriteConsoleOutputA(hConsoleOutput: THandle; lpBuffer: Pointer;dwBufferSize, dwBufferCoord: TCoord; var lpWriteRegion: TSmallRect): BOOL; stdcall;
function WriteConsoleOutputAttribute(hConsoleOutput: THandle; lpAttribute: Pointer;nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfAttrsWritten: DWORD): BOOL; stdcall;
function WriteConsoleOutputCharacterA(hConsoleOutput: THandle;lpCharacter: PAnsiChar;nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall;
function WriteConsoleOutputCharacterW(hConsoleOutput: THandle;lpCharacter: PWideChar;nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall;
function WriteConsoleOutputW(hConsoleOutput: THandle; lpBuffer: Pointer;dwBufferSize, dwBufferCoord: TCoord; var lpWriteRegion: TSmallRect): BOOL; stdcall;
function WriteConsoleW(hConsoleOutput: THandle; const lpBuffer: Pointer;nNumberOfCharsToWrite: DWORD; var lpNumberOfCharsWritten: DWORD; lpReserved: Pointer): BOOL; stdcall;
function WriteFile(hFile: THandle; const Buffer; nNumberOfBytesToWrite: DWORD;var lpNumberOfBytesWritten: DWORD; lpOverlapped: POverlapped): BOOL; stdcall;
function WriteFileEx(hFile: THandle; lpBuffer: Pointer; nNumberOfBytesToWrite: DWORD;const lpOverlapped: TOverlapped; lpCompletionRoutine: FARPROC): BOOL; stdcall;
function WriteFileGather(hFile: HANDLE; aSegmentArray: PFILE_SEGMENT_ELEMENT;nNumberOfBytesToWrite: DWORD; lpReserved: LPDWORD; lpOverlapped: LPOVERLAPPED): BOOL; stdcall;
function WritePrivateProfileSectionA(lpAppName, lpString, lpFileName: PAnsiChar): BOOL; stdcall;
function WritePrivateProfileSectionW(lpAppName, lpString, lpFileName: PWideChar): BOOL; stdcall;
function WritePrivateProfileStringA(lpAppName, lpKeyName, lpString, lpFileName: PAnsiChar): BOOL; stdcall;
function WritePrivateProfileStringW(lpAppName, lpKeyName, lpString, lpFileName: PWideChar): BOOL; stdcall;
function WritePrivateProfileStructA(lpszSection, lpszKey: PAnsiChar;lpStruct: Pointer; uSizeStruct: UINT; szFile: PAnsiChar): BOOL; stdcall;
function WritePrivateProfileStructW(lpszSection, lpszKey: PWideChar;lpStruct: Pointer; uSizeStruct: UINT; szFile: PWideChar): BOOL; stdcall;
function WriteProcessMemory(hProcess: THandle; const lpBaseAddress: Pointer; lpBuffer: Pointer;nSize: DWORD; var lpNumberOfBytesWritten: DWORD): BOOL; stdcall;
function WriteProfileSectionA(lpAppName, lpString: PAnsiChar): BOOL; stdcall;
function WriteProfileSectionW(lpAppName, lpString: PWideChar): BOOL; stdcall;
function WriteProfileStringA(lpAppName, lpKeyName, lpString: PAnsiChar): BOOL; stdcall;
function WriteProfileStringW(lpAppName, lpKeyName, lpString: PWideChar): BOOL; stdcall;
function WriteRaw(pfExportCallback: TFNImportFunc; pvCallbackContext, pvContext: Pointer): DWORD; stdcall;
function WriteTapemark(hDevice: THandle;dwTapemarkType, dwTapemarkCount: DWORD; bImmediate: BOOL): DWORD; stdcall;
function WTSGetActiveConsoleSessionId: DWORD; stdcall;
function ZombifyActCtx(hActCtx: HANDLE): BOOL; stdcall;
function _hread(hFile: HFILE; lpBuffer: Pointer; lBytes: Longint): Longint; stdcall;
function _hwrite(hFile: HFILE; lpBuffer: LPCSTR; lBytes: Longint): Longint; stdcall;
function _lclose(hFile: HFILE): HFILE; stdcall;
function _lcreat(const lpPathName: LPCSTR; iAttribute: Integer): HFILE; stdcall;
function _llseek(hFile: HFILE; lOffset: Longint; iOrigin: Integer): Longint; stdcall;
function _lopen(const lpPathName: LPCSTR; iReadWrite: Integer): HFILE; stdcall;
function _lread(hFile: HFILE; lpBuffer: Pointer; uBytes: UINT): UINT; stdcall;
function _lwrite(hFile: HFILE; const lpBuffer: LPCSTR; uBytes: UINT): UINT; stdcall;
