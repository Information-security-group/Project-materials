function accept(s: TSocket; addr: PSockAddr; addrlen: PInteger): TSocket; stdcall;
function AcceptEx(sListenSocket, sAcceptSocket: TSocket;lpOutputBuffer: Pointer; dwReceiveDataLength, dwLocalAddressLength,dwRemoteAddressLength: DWORD; var lpdwBytesReceived: DWORD;lpOverlapped: POverlapped): BOOL; stdcall;
function bind(s: TSocket; var addr: TSockAddr; namelen: Integer): Integer; stdcall;
function closesocket(s: TSocket): Integer; stdcall;
function connect(s: TSocket; var name: TSockAddr; namelen: Integer): Integer; stdcall;
procedure GetAcceptExSockaddrs(lpOutputBuffer: Pointer;dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength: DWORD;var LocalSockaddr: TSockAddr; var LocalSockaddrLength: Integer;var RemoteSockaddr: TSockAddr; var RemoteSockaddrLength: Integer); stdcall;
function gethostbyaddr(addr: Pointer; len, Struct: Integer): PHostEnt; stdcall;
function gethostbyname(name: PChar): PHostEnt; stdcall;
function gethostname(name: PChar; len: Integer): Integer; stdcall;
function getpeername(s: TSocket; var name: TSockAddr; var namelen: Integer): Integer; stdcall;
function getprotobyname(name: PChar): PProtoEnt; stdcall;
function getprotobynumber(proto: Integer): PProtoEnt; stdcall;
function getservbyname(name, proto: PChar): PServEnt; stdcall;
function getservbyport(port: Integer; proto: PChar): PServEnt; stdcall;
function getsockname(s: TSocket; var name: TSockAddr; var namelen: Integer): Integer; stdcall;
function getsockopt(s: TSocket; level, optname: Integer; optval: PChar; var optlen: Integer): Integer; stdcall;
function htonl(hostlong: u_long): u_long; stdcall;
function htons(hostshort: u_short): u_short; stdcall;
function inet_addr(cp: PChar): u_long; stdcall; {PInAddr;}  { TInAddr }
function inet_ntoa(inaddr: TInAddr): PChar; stdcall;
function ioctlsocket(s: TSocket; cmd: DWORD; var arg: u_long): Integer; stdcall;
function listen(s: TSocket; backlog: Integer): Integer; stdcall;
function ntohl(netlong: u_long): u_long; stdcall;
function ntohs(netshort: u_short): u_short; stdcall;
function recv(s: TSocket; var Buf; len, flags: Integer): Integer; stdcall;
function recvfrom(s: TSocket; var Buf; len, flags: Integer;var from: TSockAddr; var fromlen: Integer): Integer; stdcall;
function select(nfds: Integer; readfds, writefds, exceptfds: PFDSet;timeout: PTimeVal): Longint; stdcall;
function send(s: TSocket; var Buf; len, flags: Integer): Integer; stdcall;
function sendto(s: TSocket; var Buf; len, flags: Integer; var addrto: TSockAddr;tolen: Integer): Integer; stdcall;
function setsockopt(s: TSocket; level, optname: Integer; optval: PChar;optlen: Integer): Integer; stdcall;
function shutdown(s: TSocket; how: Integer): Integer; stdcall;
function socket(af, Struct, protocol: Integer): TSocket; stdcall;
function TransmitFile(hSocket: TSocket; hFile: THandle; nNumberOfBytesToWrite: DWORD;nNumberOfBytesPerSend: DWORD; lpOverlapped: POverlapped;lpTransmitBuffers: PTransmitFileBuffers; dwReserved: DWORD): BOOL; stdcall;
function WSAAsyncGetHostByAddr(HWindow: HWND; wMsg: u_int; addr: PChar;len, Struct: Integer; buf: PChar; buflen: Integer): THandle; stdcall;
function WSAAsyncGetHostByName(HWindow: HWND; wMsg: u_int;name, buf: PChar; buflen: Integer): THandle; stdcall;
function WSAAsyncGetProtoByName(HWindow: HWND; wMsg: u_int;name, buf: PChar; buflen: Integer): THandle; stdcall;
function WSAAsyncGetProtoByNumber(HWindow: HWND; wMsg: u_int; number: Integer;buf: PChar; buflen: Integer): THandle; stdcall;
function WSAAsyncGetServByName(HWindow: HWND; wMsg: u_int;name, proto, buf: PChar; buflen: Integer): THandle; stdcall;
function WSAAsyncGetServByPort( HWindow: HWND; wMsg, port: u_int;proto, buf: PChar; buflen: Integer): THandle; stdcall;
function WSAAsyncSelect(s: TSocket; HWindow: HWND; wMsg: u_int; lEvent: Longint): Integer; stdcall;
function WSACancelAsyncRequest(hAsyncTaskHandle: THandle): Integer; stdcall;
function WSACancelBlockingCall: Integer; stdcall;
function WSACleanup: Integer; stdcall;
function WSAGetLastError: Integer; stdcall;
function WSAIsBlocking: BOOL; stdcall;
function WSARecvEx(s: TSocket; var buf; len: Integer; var flags: Integer): Integer; stdcall;
function WSASetBlockingHook(lpBlockFunc: TFarProc): TFarProc; stdcall;
procedure WSASetLastError(iError: Integer); stdcall;
function WSAStartup(wVersionRequired: word; var WSData: TWSAData): Integer; stdcall;
function WSAUnhookBlockingHook: Integer; stdcall;
function __WSAFDIsSet(s: TSocket; var FDSet: TFDSet): Bool; stdcall;
