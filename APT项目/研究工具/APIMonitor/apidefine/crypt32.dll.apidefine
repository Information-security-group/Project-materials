function CertAddCertificateContextToStore(hCertStore: HCERTSTORE;pCertContext: PCCERT_CONTEXT; dwAddDisposition: DWORD;ppStoreContext: PPCCERT_CONTEXT): BOOL; stdcall;
function CertAddCertificateLinkToStore(hCertStore: HCERTSTORE;pCertContext: PCCERT_CONTEXT; dwAddDisposition: DWORD;ppStoreContext: PPCCERT_CONTEXT): BOOL; stdcall;
function CertAddCRLContextToStore(hCertStore: HCERTSTORE; pCrlContext: PCCRL_CONTEXT;dwAddDisposition: DWORD; ppStoreContext: PPCCRL_CONTEXT): BOOL; stdcall;
function CertAddCRLLinkToStore(hCertStore: HCERTSTORE; pCrlContext: PCCRL_CONTEXT;dwAddDisposition: DWORD; ppStoreContext: PPCCRL_CONTEXT): BOOL; stdcall;
function CertAddCTLContextToStore(hCertStore: HCERTSTORE; pCtlContext: PCCTL_CONTEXT;dwAddDisposition: DWORD; ppStoreContext: PPCCTL_CONTEXT): BOOL; stdcall;
function CertAddCTLLinkToStore(hCertStore: HCERTSTORE; pCtlContext: PCCTL_CONTEXT;dwAddDisposition: DWORD; ppStoreContext: PPCCTL_CONTEXT): BOOL; stdcall;
function CertAddEncodedCertificateToStore(hCertStore: HCERTSTORE;dwCertEncodingType: DWORD; pbCertEncoded: LPBYTE; cbCertEncoded: DWORD;dwAddDisposition: DWORD; ppCertContext: PPCCERT_CONTEXT): BOOL; stdcall;
function CertAddEncodedCertificateToSystemStoreA(szCertStoreName: LPCSTR;pbCertEncoded: LPBYTE; cbCertEncoded: DWORD): BOOL; stdcall;
function CertAddEncodedCertificateToSystemStoreW(szCertStoreName: LPCWSTR;pbCertEncoded: LPBYTE; cbCertEncoded: DWORD): BOOL; stdcall;
function CertAddEncodedCRLToStore(hCertStore: HCERTSTORE; dwCertEncodingType: DWORD;pbCrlEncoded: LPBYTE; cbCrlEncoded, dwAddDisposition: DWORD;ppCrlContext: PPCCRL_CONTEXT): BOOL; stdcall;
function CertAddEncodedCTLToStore(hCertStore: HCERTSTORE;dwMsgAndCertEncodingType: DWORD; pbCtlEncoded: LPBYTE; cbCtlEncoded: DWORD;dwAddDisposition: DWORD; ppCtlContext: PPCCTL_CONTEXT): BOOL; stdcall;
function CertAddEnhancedKeyUsageIdentifier(pCertContext: PCCERT_CONTEXT;pszUsageIdentifier: LPCSTR): BOOL; stdcall;
function CertAddSerializedElementToStore(hCertStore: HCERTSTORE; pbElement: LPBYTE;cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags: DWORD;pdwContextType: LPDWORD; ppvContext: PPointer): BOOL; stdcall;
function CertAddStoreToCollection(hCollectionStore: HCERTSTORE;hSiblingStore: HCERTSTORE; dwUpdateFlags, dwPriority: DWORD): BOOL; stdcall;
function CertAlgIdToOID(dwAlgId: DWORD): LPCSTR; stdcall;
function CertCloseStore(hCertStore: HCERTSTORE; dwFlags: DWORD): BOOL; stdcall;
function CertCompareCertificate(dwCertEncodingType: DWORD; pCertId1, pCertId2: PCERT_INFO): BOOL; stdcall;
function CertCompareCertificateName(dwCertEncodingType: DWORD;pCertName1: PCERT_NAME_BLOB; pCertName2: PCERT_NAME_BLOB): BOOL; stdcall;
function CertCompareIntegerBlob(pInt1, pInt2: PCRYPT_INTEGER_BLOB): BOOL; stdcall;
function CertComparePublicKeyInfo(dwCertEncodingType: DWORD;pPublicKey1, pPublicKey2: PCERT_PUBLIC_KEY_INFO): BOOL; stdcall;
function CertControlStore(hCertStore: HCERTSTORE; dwFlags, dwCtrlType: DWORD;pvCtrlPara: Pointer): BOOL; stdcall;
function CertCreateCertificateChainEngine(pConfig: PCERT_CHAIN_ENGINE_CONFIG;var phChainEngine: HCERTCHAINENGINE): BOOL; stdcall;
function CertCreateCertificateContext(dwCertEncodingType: DWORD;pbCertEncoded: LPBYTE; cbCertEncoded: DWORD): PCCERT_CONTEXT; stdcall;
function CertCreateContext(dwContextType, dwEncodingType: DWORD;pbEncoded: LPBYTE; cbEncoded, dwFlags: DWORD;pCreatePara: PCERT_CREATE_CONTEXT_PARA): Pointer; stdcall;
function CertCreateCRLContext(dwCertEncodingType: DWORD; pbCrlEncoded: LPBYTE;cbCrlEncoded: DWORD): PCCRL_CONTEXT; stdcall;
function CertCreateCTLContext(dwMsgAndCertEncodingType: DWORD;pbCtlEncoded: LPBYTE; cbCtlEncoded: DWORD): PCCTL_CONTEXT; stdcall;
function CertCreateSelfSignCertificate(hProv: HCRYPTPROV;pSubjectIssuerBlob: PCERT_NAME_BLOB; dwFlags: DWORD;pKeyProvInfo: PCRYPT_KEY_PROV_INFO; pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER;pStartTime, pEndTime: PSYSTEMTIME; pExtensions: PCERT_EXTENSIONS): PCCERT_CONTEXT; stdcall;
function CertDeleteCertificateFromStore(pCertContext: PCCERT_CONTEXT): BOOL; stdcall;
function CertDeleteCRLFromStore(pCrlContext: PCCRL_CONTEXT): BOOL; stdcall;
function CertDeleteCTLFromStore(pCtlContext: PCCTL_CONTEXT): BOOL; stdcall;
function CertDuplicateCertificateChain(pChainContext: PCCERT_CHAIN_CONTEXT): PCCERT_CHAIN_CONTEXT; stdcall;
function CertDuplicateCertificateContext(pCertContext: PCCERT_CONTEXT): PCCERT_CONTEXT; stdcall;
function CertDuplicateCRLContext(pCrlContext: PCCRL_CONTEXT): PCCRL_CONTEXT; stdcall;
function CertDuplicateCTLContext(pCtlContext: PCCTL_CONTEXT): PCCTL_CONTEXT; stdcall;
function CertDuplicateStore(hCertStore: HCERTSTORE): HCERTSTORE; stdcall;
function CertEnumCertificateContextProperties(pCertContext: PCCERT_CONTEXT;dwPropId: DWORD): DWORD; stdcall;
function CertEnumCertificatesInStore(hCertStore: HCERTSTORE;pPrevCertContext: PCCERT_CONTEXT): PCCERT_CONTEXT; stdcall;
function CertEnumCRLContextProperties(pCrlContext: PCCRL_CONTEXT;dwPropId: DWORD): DWORD; stdcall;
function CertEnumCRLsInStore(hCertStore: HCERTSTORE;pPrevCrlContext: PCCRL_CONTEXT): PCCRL_CONTEXT; stdcall;
function CertEnumCTLContextProperties(pCtlContext: PCCTL_CONTEXT; dwPropId: DWORD): DWORD; stdcall;
function CertEnumCTLsInStore(hCertStore: HCERTSTORE; pPrevCtlContext: PCCTL_CONTEXT): PCCTL_CONTEXT; stdcall;
function CertEnumPhysicalStore(pvSystemStore: Pointer; dwFlags: DWORD;pvArg: Pointer; pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE): BOOL; stdcall;
function CertEnumSubjectInSortedCTL(pCtlContext: PCCTL_CONTEXT;var ppvNextSubject: Pointer; pSubjectIdentifier: PCRYPT_DER_BLOB;pEncodedAttributes: PCRYPT_DER_BLOB): BOOL; stdcall;
function CertEnumSystemStore(dwFlags: DWORD; pvSystemStoreLocationPara: Pointer;pvArg: Pointer; pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE): BOOL; stdcall;
function CertEnumSystemStoreLocation(dwFlags: DWORD; pvArg: Pointer;pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION): BOOL; stdcall;
function CertFindAttribute(pszObjId: LPCSTR; cAttr: DWORD;rgAttr: PCRYPT_ATTRIBUTE): PCRYPT_ATTRIBUTE; stdcall;
function CertFindCertificateInCRL(pCert: PCCERT_CONTEXT; pCrlContext: PCCRL_CONTEXT;dwFlags: DWORD; pvReserved: Pointer; var ppCrlEntry: PCRL_ENTRY): BOOL; stdcall;
function CertFindCertificateInStore(hCertStore: HCERTSTORE;dwCertEncodingType, dwFindFlags, dwFindType: DWORD; pvFindPara: Pointer;pPrevCertContext: PCCERT_CONTEXT): PCCERT_CONTEXT; stdcall;
function CertFindChainInStore(hCertStore: HCERTSTORE; dwCertEncodingType: DWORD;dwFindFlags: DWORD; dwFindType: DWORD; pvFindPara: Pointer;pPrevChainContext: PCCERT_CHAIN_CONTEXT): PCCERT_CHAIN_CONTEXT; stdcall;
function CertFindCRLInStore(hCertStore: HCERTSTORE; dwCertEncodingType: DWORD;dwFindFlags: DWORD; dwFindType: DWORD; pvFindPara: Pointer;pPrevCrlContext: PCCRL_CONTEXT): PCCRL_CONTEXT; stdcall;
function CertFindCTLInStore(hCertStore: HCERTSTORE; dwMsgAndCertEncodingType,dwFindFlags, dwFindType: DWORD; pvFindPara: Pointer;pPrevCtlContext: PCCTL_CONTEXT): PCCTL_CONTEXT; stdcall;
function CertFindExtension(pszObjId: LPCSTR; cExtensions: DWORD;rgExtensions: PCERT_EXTENSION): PCERT_EXTENSION; stdcall;
function CertFindRDNAttr(pszObjId: LPCSTR; pName: PCERT_NAME_INFO): PCERT_RDN_ATTR; stdcall;
function CertFindSubjectInCTL(dwEncodingType: DWORD; dwSubjectType: DWORD;pvSubject: Pointer; pCtlContext: PCCTL_CONTEXT; dwFlags: DWORD): PCTL_ENTRY; stdcall;
function CertFindSubjectInSortedCTL(pSubjectIdentifier: PCRYPT_DATA_BLOB;pCtlContext: PCCTL_CONTEXT; dwFlags: DWORD; pvReserved: Pointer;pEncodedAttributes: PCRYPT_DER_BLOB): BOOL; stdcall;
procedure CertFreeCertificateChain(pChainContext: PCCERT_CHAIN_CONTEXT); stdcall;
procedure CertFreeCertificateChainEngine(hChainEngine: HCERTCHAINENGINE); stdcall;
function CertFreeCertificateContext(pCertContext: PCCERT_CONTEXT): BOOL; stdcall;
function CertFreeCRLContext(pCrlContext: PCCRL_CONTEXT): BOOL; stdcall;
function CertFreeCTLContext(pCtlContext: PCCTL_CONTEXT): BOOL; stdcall;
function CertGetCertificateChain(hChainEngine: HCERTCHAINENGINE;pCertContext: PCCERT_CONTEXT; pTime: LPFILETIME; hAdditionalStore: HCERTSTORE;pChainPara: PCERT_CHAIN_PARA; dwFlags: DWORD; pvReserved: LPVOID;ppChainContext: PPCCERT_CHAIN_CONTEXT): BOOL; stdcall;
function CertGetCertificateContextProperty(pCertContext: PCCERT_CONTEXT;dwPropId: DWORD; pvData: Pointer; var pcbData: DWORD): BOOL; stdcall;
function CertGetCRLContextProperty(pCrlContext: PCCRL_CONTEXT; dwPropId: DWORD;pvData: Pointer; var pcbData: DWORD): BOOL; stdcall;
function CertGetCRLFromStore(hCertStore: HCERTSTORE; pIssuerContext: PCCERT_CONTEXT;pPrevCrlContext: PCCRL_CONTEXT; var pdwFlags: DWORD): PCCRL_CONTEXT; stdcall;
function CertGetCTLContextProperty(pCtlContext: PCCTL_CONTEXT; dwPropId: DWORD;pvData: Pointer; var pcbData: DWORD): BOOL; stdcall;
function CertGetEnhancedKeyUsage(pCertContext: PCCERT_CONTEXT; dwFlags: DWORD;pUsage: PCERT_ENHKEY_USAGE; var pcbUsage: DWORD): BOOL; stdcall;
function CertGetIntendedKeyUsage(dwCertEncodingType: DWORD; pCertInfo: PCERT_INFO;pbKeyUsage: LPBYTE; cbKeyUsage: DWORD): BOOL; stdcall;
function CertGetIssuerCertificateFromStore(hCertStore: HCERTSTORE;pSubjectContext, pPrevIssuerContext: PCCERT_CONTEXT; var pdwFlags: DWORD): PCCERT_CONTEXT; stdcall;
function CertGetNameStringA(pCertContext: PCCERT_CONTEXT; dwType, dwFlags: DWORD;pvTypePara: Pointer; pszNameString: LPSTR; cchNameString: DWORD): DWORD; stdcall;
function CertGetNameStringW(pCertContext: PCCERT_CONTEXT; dwType, dwFlags: DWORD;pvTypePara: Pointer; pszNameString: LPWSTR; cchNameString: DWORD): DWORD; stdcall;
function CertGetPublicKeyLength(dwCertEncodingType: DWORD;pPublicKey: PCERT_PUBLIC_KEY_INFO): DWORD; stdcall;
function CertGetStoreProperty(hCertStore: HCERTSTORE; dwPropId: DWORD;pvData: Pointer; var pcbData: DWORD): BOOL; stdcall;
function CertGetSubjectCertificateFromStore(hCertStore: HCERTSTORE;dwCertEncodingType: DWORD; pCertId: PCERT_INFO): PCCERT_CONTEXT; stdcall;
function CertGetValidUsages(cCerts: DWORD; rghCerts: PCCERT_CONTEXT;var cNumOIDs: Integer; rghOIDs: LPLPSTR; var pcbOIDs: DWORD): BOOL; stdcall;
function CertIsRDNAttrsInCertificateName(dwCertEncodingType, dwFlags: DWORD;pCertName: PCERT_NAME_BLOB; pRDN: PCERT_RDN): BOOL; stdcall;
function CertNameToStrA(dwCertEncodingType: DWORD; pName: PCERT_NAME_BLOB;dwStrType: DWORD; psz: LPSTR; csz: DWORD): DWORD; stdcall;
function CertNameToStrW(dwCertEncodingType: DWORD; pName: PCERT_NAME_BLOB;dwStrType: DWORD; psz: LPWSTR; csz: DWORD): DWORD; stdcall;
function CertOIDToAlgId(pszObjId: LPCSTR): DWORD; stdcall;
function CertOpenStore(lpszStoreProvider: LPCSTR; dwEncodingType: DWORD;hCryptProv: HCRYPTPROV; dwFlags: DWORD; pvPara: Pointer): HCERTSTORE; stdcall;
function CertOpenSystemStoreA(hProv: HCRYPTPROV; szSubsystemProtocol: LPCSTR): HCERTSTORE; stdcall;
function CertOpenSystemStoreW(hProv: HCRYPTPROV; szSubsystemProtocol: LPCWSTR): HCERTSTORE; stdcall;
function CertRDNValueToStrA(dwValueType: DWORD; pValue: PCERT_RDN_VALUE_BLOB;psz: LPSTR; csz: DWORD): DWORD; stdcall;
function CertRDNValueToStrW(dwValueType: DWORD; pValue: PCERT_RDN_VALUE_BLOB;psz: LPWSTR; csz: DWORD): DWORD; stdcall;
function CertRegisterPhysicalStore(pvSystemStore: Pointer; dwFlags: DWORD;pwszStoreName: LPCWSTR; pStoreInfo: PCERT_PHYSICAL_STORE_INFO;pvReserved: Pointer): BOOL; stdcall;
function CertRegisterSystemStore(pvSystemStore: Pointer; dwFlags: DWORD;pStoreInfo: PCERT_SYSTEM_STORE_INFO; pvReserved: Pointer): BOOL; stdcall;
function CertRemoveEnhancedKeyUsageIdentifier(pCertContext: PCCERT_CONTEXT;pszUsageIdentifier: LPCSTR): BOOL; stdcall;
procedure CertRemoveStoreFromCollection(hCollectionStore, hSiblingStore: HCERTSTORE); stdcall;
function CertResyncCertificateChainEngine(hChainEngine: HCERTCHAINENGINE): BOOL; stdcall;
function CertSaveStore(hCertStore: HCERTSTORE; dwEncodingType, dwSaveAs: DWORD;dwSaveTo: DWORD; pvSaveToPara: Pointer; dwFlags: DWORD): BOOL; stdcall;
function CertSerializeCertificateStoreElement(pCertContext: PCCERT_CONTEXT;dwFlags: DWORD; pbElement: LPBYTE; var pcbElement: DWORD): BOOL; stdcall;
function CertSerializeCRLStoreElement(pCrlContext: PCCRL_CONTEXT; dwFlags: DWORD;pbElement: LPBYTE; var pcbElement: DWORD): BOOL; stdcall;
function CertSerializeCTLStoreElement(pCtlContext: PCCTL_CONTEXT; dwFlags: DWORD;pbElement: LPBYTE; var pcbElement: DWORD): BOOL; stdcall;
function CertSetCertificateContextProperty(pCertContext: PCCERT_CONTEXT;dwPropId: DWORD; dwFlags: DWORD; pvData: Pointer): BOOL; stdcall;
function CertSetCRLContextProperty(pCrlContext: PCCRL_CONTEXT; dwPropId: DWORD;dwFlags: DWORD; pvData: Pointer): BOOL; stdcall;
function CertSetCTLContextProperty(pCtlContext: PCCTL_CONTEXT; dwPropId: DWORD;dwFlags: DWORD; pvData: Pointer): BOOL; stdcall;
function CertSetEnhancedKeyUsage(pCertContext: PCCERT_CONTEXT;pUsage: PCERT_ENHKEY_USAGE): BOOL; stdcall;
function CertSetStoreProperty(hCertStore: HCERTSTORE; dwPropId, dwFlags: DWORD;pvData: Pointer): BOOL; stdcall;
function CertStrToNameA(dwCertEncodingType: DWORD; pszX500: LPCSTR;dwStrType: DWORD; pvReserved: Pointer; pbEncoded: LPBYTE; var pcbEncoded: DWORD;ppszError: LPLPCSTR): BOOL; stdcall;
function CertStrToNameW(dwCertEncodingType: DWORD; pszX500: LPCWSTR;dwStrType: DWORD; pvReserved: Pointer; pbEncoded: LPBYTE; var pcbEncoded: DWORD;ppszError: LPLPCWSTR): BOOL; stdcall;
function CertUnregisterPhysicalStore(pvSystemStore: Pointer; dwFlags: DWORD;pwszStoreName: LPCWSTR): BOOL; stdcall;
function CertUnregisterSystemStore(pvSystemStore: Pointer; dwFlags: DWORD): BOOL; stdcall;
function CertVerifyCertificateChainPolicy(pszPolicyOID: LPCSTR;pChainContext: PCCERT_CHAIN_CONTEXT; pPolicyPara: PCERT_CHAIN_POLICY_PARA;pPolicyStatus: PCERT_CHAIN_POLICY_STATUS): BOOL; stdcall;
function CertVerifyCRLRevocation(dwCertEncodingType: DWORD; pCertId: PCERT_INFO;cCrlInfo: DWORD; rgpCrlInfo: PCRL_INFO): BOOL; stdcall;
function CertVerifyCRLTimeValidity(pTimeToVerify: LPFILETIME; pCrlInfo: PCRL_INFO): LONG; stdcall;
function CertVerifyCTLUsage(dwEncodingType: DWORD; dwSubjectType: DWORD;pvSubject: Pointer; pSubjectUsage: PCTL_USAGE; dwFlags: DWORD;pVerifyUsagePara: PCTL_VERIFY_USAGE_PARA;pVerifyUsageStatus: PCTL_VERIFY_USAGE_STATUS): BOOL; stdcall;
function CertVerifyRevocation(dwEncodingType, dwRevType, cContext: DWORD;rgpvContext: PVOID; dwFlags: DWORD; pRevPara: PCERT_REVOCATION_PARA;pRevStatus: PCERT_REVOCATION_STATUS): BOOL; stdcall;
function CertVerifySubjectCertificateContext(pSubject: PCCERT_CONTEXT;pIssuer: PCCERT_CONTEXT; var pdwFlags: DWORD): BOOL; stdcall;
function CertVerifyTimeValidity(pTimeToVerify: LPFILETIME; pCertInfo: PCERT_INFO): LONG; stdcall;
function CertVerifyValidityNesting(pSubjectInfo, pIssuerInfo: PCERT_INFO): BOOL; stdcall;
function CryptAcquireCertificatePrivateKey(pCert: PCCERT_CONTEXT; dwFlags: DWORD;pvReserved: Pointer; var phCryptProv: HCRYPTPROV; pdwKeySpec: LPDWORD;pfCallerFreeProv: PBOOL): BOOL; stdcall;
function CryptCancelAsyncRetrieval(hAsyncRetrieval: HCRYPTASYNC): BOOL; stdcall;{$EXTERNALSYM CryptCancelAsyncRetrieval}//// Remote Object Async Retrieval parameters////// A client that wants to be notified of asynchronous object retrieval// completion sets this parameter on the async handle//constCRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION = LPCSTR(1);{$EXTERNALSYM CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION}typePFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = procedure(pvCompletion: LPVOID;dwCompletionCode: DWORD; pszUrl: LPCSTR; pszObjectOid: LPSTR; pvObject: LPVOID); stdcall;
function CryptCloseAsyncHandle(hAsync: HCRYPTASYNC): BOOL; stdcall;
function CryptCreateAsyncHandle(dwFlags: DWORD; phAsync: PHCRYPTASYNC): BOOL; stdcall;
function CryptCreateKeyIdentifierFromCSP(dwCertEncodingType: DWORD;pszPubKeyOID: LPCSTR; pPubKeyStruc: PPUBLICKEYSTRUC; cbPubKeyStruc: DWORD;dwFlags: DWORD; pvReserved: Pointer; pbHash: LPBYTE; pcbHash: DWORD): BOOL; stdcall;
function CryptDecodeMessage(dwMsgTypeFlags: DWORD; pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA;pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA; dwSignerIndex: DWORD; pbEncodedBlob: LPBYTE;cbEncodedBlob: DWORD; dwPrevInnerContentType: DWORD; pdwMsgType: LPDWORD;pdwInnerContentType: LPDWORD; pbDecoded: LPBYTE; pcbDecoded: LPDWORD;ppXchgCert: PPCCERT_CONTEXT; ppSignerCert: PPCCERT_CONTEXT): BOOL; stdcall;
function CryptDecodeObject(dwCertEncodingType: DWORD; lpszStructType: LPCSTR;pbEncoded: LPBYTE; cbEncoded, dwFlags: DWORD; pvStructInfo: Pointer;var pcbStructInfo: DWORD): BOOL; stdcall;
function CryptDecodeObjectEx(dwCertEncodingType: DWORD; lpszStructType: LPCSTR;pbEncoded: Pointer; cbEncoded, dwFlags: DWORD; pDecodePara: PCRYPT_DECODE_PARA;pvStructInfo: Pointer; var pcbStructInfo: DWORD): BOOL; stdcall;
function CryptDecryptAndVerifyMessageSignature(pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA;pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA; dwSignerIndex: DWORD; pbEncryptedBlob: LPBYTE;cbEncryptedBlob: DWORD; pbDecrypted: LPBYTE; pcbDecrypted: LPDWORD;ppXchgCert: PPCCERT_CONTEXT; ppSignerCert: PPCCERT_CONTEXT): BOOL; stdcall;
function CryptDecryptMessage(pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA;pbEncryptedBlob: LPBYTE; cbEncryptedBlob: DWORD; pbDecrypted: LPBYTE;pcbDecrypted: LPDWORD; ppXchgCert: PPCCERT_CONTEXT): BOOL; stdcall;
function CryptEncodeObject(dwCertEncodingType: DWORD; lpszStructType: LPCSTR;pvStructInfo: Pointer; pbEncoded: LPBYTE; var pcbEncoded: DWORD): BOOL; stdcall;
function CryptEncodeObjectEx(dwCertEncodingType: DWORD; lpszStructType: LPCSTR;pvStructInfo: Pointer; dwFlags: DWORD; pEncodePara: PCRYPT_ENCODE_PARA;pvEncoded: Pointer; var pcbEncoded: DWORD): BOOL; stdcall;
function CryptEncryptMessage(pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA;cRecipientCert: DWORD; rgpRecipientCert: PCCERT_CONTEXT; pbToBeEncrypted: LPBYTE;cbToBeEncrypted: DWORD; pbEncryptedBlob: LPBYTE; var pcbEncryptedBlob: DWORD): BOOL; stdcall;
function CryptEnumKeyIdentifierProperties(pKeyIdentifier: PCRYPT_HASH_BLOB;dwPropId: DWORD; dwFlags: DWORD; pwszComputerName: LPCWSTR; pvReserved: Pointer;pvArg: Pointer; pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP): BOOL; stdcall;
function CryptEnumOIDFunction(dwEncodingType: DWORD; pszFuncName, pszOID: LPCSTR;dwFlags: DWORD; pvArg: Pointer; pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC): BOOL; stdcall;
function CryptEnumOIDInfo(dwGroupId: DWORD; dwFlags: DWORD; pvArg: Pointer;pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO): BOOL; stdcall;
function CryptExportPKCS8(hCryptProv: HCRYPTPROV; dwKeySpec: DWORD;pszPrivateKeyObjId: LPSTR; dwFlags: DWORD; pvAuxInfo: Pointer;pbPrivateKeyBlob: LPBYTE; var pcbPrivateKeyBlob: DWORD): BOOL; stdcall;
function CryptExportPKCS8Ex(psExportParams: PCRYPT_PKCS8_EXPORT_PARAMS;dwFlags: DWORD; pvAuxInfo: Pointer; pbPrivateKeyBlob: LPBYTE;var pcbPrivateKeyBlob: DWORD): BOOL; stdcall;
function CryptExportPublicKeyInfo(hCryptProv: HCRYPTPROV; dwKeySpec: DWORD;dwCertEncodingType: DWORD; pInfo: PCERT_PUBLIC_KEY_INFO; var pcbInfo: DWORD): BOOL; stdcall;
function CryptExportPublicKeyInfoEx(hCryptProv: HCRYPTPROV; dwKeySpec: DWORD;dwCertEncodingType: DWORD; pszPublicKeyObjId: LPSTR; dwFlags: DWORD;pvAuxInfo: Pointer; pInfo: PCERT_PUBLIC_KEY_INFO; var pcbInfo: DWORD): BOOL; stdcall;
function CryptFindCertificateKeyProvInfo(pCert: PCCERT_CONTEXT; dwFlags: DWORD;pvReserved: Pointer): BOOL; stdcall;
function CryptFindLocalizedName(pwszCryptName: LPCWSTR): LPCWSTR; stdcall;
function CryptFindOIDInfo(dwKeyType: DWORD; pvKey: Pointer; dwGroupId: DWORD): PCCRYPT_OID_INFO; stdcall;
function CryptFlushTimeValidObject(pszFlushTimeValidOid: LPCSTR; pvPara: LPVOID;pIssuer: PCCERT_CONTEXT; dwFlags: DWORD; pvReserved: LPVOID): BOOL; stdcall;
function CryptFormatObject(dwCertEncodingType, dwFormatType, dwFormatStrType: DWORD;pFormatStruct: Pointer; lpszStructType: LPCSTR; pbEncoded: LPBYTE;cbEncoded: DWORD; pbFormat: Pointer; var pcbFormat: DWORD): BOOL; stdcall;
function CryptFreeOIDFunctionAddress(hFuncAddr: HCRYPTOIDFUNCADDR; dwFlags: DWORD): BOOL; stdcall;
function CryptGetAsyncParam(hAsync: HCRYPTASYNC; pszParamOid: LPSTR;var ppvParam: LPVOID; var ppfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC): BOOL; stdcall;
function CryptGetDefaultOIDDllList(hFuncSet: HCRYPTOIDFUNCSET; dwEncodingType: DWORD;pwszDllList: LPWSTR; pcchDllList: DWORD): BOOL; stdcall;
function CryptGetDefaultOIDFunctionAddress(hFuncSet: HCRYPTOIDFUNCSET;dwEncodingType: DWORD; pwszDll: LPCWSTR; dwFlags: DWORD;var ppvFuncAddr: Pointer; phFuncAddr: HCRYPTOIDFUNCADDR): BOOL; stdcall;
function CryptGetKeyIdentifierProperty(pKeyIdentifier: PCRYPT_HASH_BLOB;dwPropId: DWORD; dwFlags: DWORD; pwszComputerName: LPCWSTR; pvReserved: Pointer;pvData: Pointer; var pcbData: DWORD): BOOL; stdcall;
function CryptGetMessageCertificates(dwMsgAndCertEncodingType: DWORD;hCryptProv: HCRYPTPROV; dwFlags: DWORD; pbSignedBlob: LPBYTE;cbSignedBlob: DWORD): HCERTSTORE; stdcall;
function CryptGetMessageSignerCount(dwMsgEncodingType: DWORD; pbSignedBlob: LPBYTE;cbSignedBlob: DWORD): LONG; stdcall;
function CryptGetObjectUrl(pszUrlOid: LPCSTR; pvPara: LPVOID; dwFlags: DWORD;pUrlArray: PCRYPT_URL_ARRAY; var pcbUrlArray: DWORD; pUrlInfo: PCRYPT_URL_INFO;pcbUrlInfo: LPDWORD; pvReserved: LPVOID): BOOL; stdcall;
function CryptGetOIDFunctionAddress(hFuncSet: HCRYPTOIDFUNCSET;dwEncodingType: DWORD; pszOID: LPCSTR; dwFlags: DWORD;var ppvFuncAddr: Pointer; var phFuncAddr: HCRYPTOIDFUNCADDR): BOOL; stdcall;
function CryptGetOIDFunctionValue(dwEncodingType: DWORD; pszFuncName: LPCSTR;pszOID: LPCSTR; pwszValueName: LPCWSTR; var pdwValueType: DWORD;pbValueData: LPBYTE; var pcbValueData: DWORD): BOOL; stdcall;{$EXTERNALSYM CryptGetOIDFunctionValue}typePFN_CRYPT_ENUM_OID_FUNC = function(dwEncodingType: DWORD; pszFuncName,pszOID: LPCSTR; cValue: DWORD; rgdwValueType: LPDWORD;rgpwszValueName: LPCWSTR; rgpbValueData: LPBYTE; rgcbValueData: LPDWORD;pvArg: Pointer): BOOL; stdcall;
function CryptGetTimeValidObject(pszTimeValidOid: LPCSTR; pvPara: LPVOID;pIssuer: PCCERT_CONTEXT; pftValidFor: LPFILETIME; dwFlags, dwTimeout: DWORD;ppvObject: LPLPVOID; pCredentials: PCRYPT_CREDENTIALS; pvReserved: LPVOID): BOOL; stdcall;
function CryptHashCertificate(hCryptProv: HCRYPTPROV; Algid: ALG_ID;dwFlags: DWORD; pbEncoded: LPBYTE; cbEncoded: DWORD; pbComputedHash: LPBYTE;var pcbComputedHash: DWORD): BOOL; stdcall;
function CryptHashMessage(pHashPara: PCRYPT_HASH_MESSAGE_PARA; fDetachedHash: BOOL;cToBeHashed: DWORD; rgpbToBeHashed: LPBYTE; rgcbToBeHashed: LPDWORD;pbHashedBlob: LPBYTE; pcbHashedBlob: LPDWORD; pbComputedHash: LPBYTE;pcbComputedHash: LPDWORD): BOOL; stdcall;
function CryptHashPublicKeyInfo(hCryptProv: HCRYPTPROV; Algid: ALG_ID;dwFlags: DWORD; dwCertEncodingType: DWORD; pInfo: PCERT_PUBLIC_KEY_INFO;pbComputedHash: LPBYTE; var pcbComputedHash: DWORD): BOOL; stdcall;
function CryptHashToBeSigned(hCryptProv: HCRYPTPROV; dwCertEncodingType: DWORD;pbEncoded: LPBYTE; cbEncoded: DWORD; pbComputedHash: LPBYTE;var pcbComputedHash: DWORD): BOOL; stdcall;
function CryptImportPKCS8(sImportParams: CRYPT_PKCS8_IMPORT_PARAMS; dwFlags: DWORD;phCryptProv: PHCRYPTPROV; pvAuxInfo: Pointer): BOOL; stdcall;
function CryptImportPublicKeyInfo(hCryptProv: HCRYPTPROV; dwCertEncodingType: DWORD;pInfo: PCERT_PUBLIC_KEY_INFO; var phKey: HCRYPTKEY): BOOL; stdcall;
function CryptImportPublicKeyInfoEx(hCryptProv: HCRYPTPROV; dwCertEncodingType: DWORD;pInfo: PCERT_PUBLIC_KEY_INFO; aiKeyAlg: ALG_ID; dwFlags: DWORD; pvAuxInfo: Pointer;var phKey: HCRYPTKEY): BOOL; stdcall;
function CryptInitOIDFunctionSet(pszFuncName: LPCSTR; dwFlags: DWORD): HCRYPTOIDFUNCSET; stdcall;
function CryptInstallCancelRetrieval(pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL;pvArg: Pointer; dwFlags: DWORD; pvReserved: Pointer): BOOL; stdcall;
function CryptInstallDefaultContext(hCryptProv: HCRYPTPROV; dwDefaultType: DWORD;pvDefaultPara: Pointer; dwFlags: DWORD; pvReserved: Pointer;var phDefaultContext: HCRYPTDEFAULTCONTEXT): BOOL; stdcall;
function CryptInstallOIDFunctionAddress(hModule: HMODULE; dwEncodingType: DWORD;pszFuncName: LPCSTR; cFuncEntry: DWORD; rgFuncEntry: PCRYPT_OID_FUNC_ENTRY;dwFlags: DWORD): BOOL; stdcall;
function CryptMemAlloc(cbSize: ULONG): LPVOID; stdcall;
procedure CryptMemFree(pv: LPVOID); stdcall;{$EXTERNALSYM CryptMemFree}//// Crypt32 Asynchronous Parameter Management Routines.  All Crypt32 API which// expose asynchronous mode operation use a Crypt32 Async Handle to pass// around information about the operation e.g. callback routines.  The// following API are used for manipulation of the async handle//typeHCRYPTASYNC = HANDLE;{$EXTERNALSYM HCRYPTASYNC}PHCRYPTASYNC = ^HCRYPTASYNC;{$EXTERNALSYM PHCRYPTASYNC}PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = procedure(pszParamOid: LPSTR; pvParam: LPVOID); stdcall;
function CryptMemRealloc(pv: LPVOID; cbSize: ULONG): LPVOID; stdcall;
function CryptMsgCalculateEncodedLength(dwMsgEncodingType, dwFlags, dwMsgType: DWORD;pvMsgEncodeInfo: Pointer; pszInnerContentObjID: LPSTR; cbData: DWORD): DWORD; stdcall;
function CryptMsgClose(hCryptMsg: HCRYPTMSG): BOOL; stdcall;
function CryptMsgControl(hCryptMsg: HCRYPTMSG; dwFlags, dwCtrlType: DWORD;pvCtrlPara: Pointer): BOOL; stdcall;
function CryptMsgCountersign(hCryptMsg: HCRYPTMSG; dwIndex, cCountersigners: DWORD;rgCountersigners: PCMSG_SIGNER_ENCODE_INFO): BOOL; stdcall;
function CryptMsgCountersignEncoded(dwEncodingType: DWORD; pbSignerInfo: PBYTE;cbSignerInfo: DWORD; cCountersigners: DWORD; rgCountersigners: PCMSG_SIGNER_ENCODE_INFO;pbCountersignature: PBYTE; var pcbCountersignature: DWORD): BOOL; stdcall;{$EXTERNALSYM CryptMsgCountersignEncoded}//+-------------------------------------------------------------------------//  CryptMsg OID installable functions//--------------------------------------------------------------------------typePFN_CMSG_ALLOC = function(cb: size_t): Pointer; stdcall;
function CryptMsgDuplicate(hCryptMsg: HCRYPTMSG): HCRYPTMSG; stdcall;
function CryptMsgEncodeAndSignCTL(dwMsgEncodingType: DWORD; pCtlInfo: PCTL_INFO;pSignInfo: PCMSG_SIGNED_ENCODE_INFO; dwFlags: DWORD; pbEncoded: LPBYTE;var pcbEncoded: DWORD): BOOL; stdcall;
function CryptMsgGetAndVerifySigner(hCryptMsg: HCRYPTMSG; cSignerStore: DWORD;rghSignerStore: PHCERTSTORE; dwFlags: DWORD; ppSigner: PPCCERT_CONTEXT;pdwSignerIndex: LPDWORD): BOOL; stdcall;
function CryptMsgGetParam(hCryptMsg: HCRYPTMSG; dwParamType, dwIndex: DWORD;pvData: Pointer; var pcbData: DWORD): BOOL; stdcall;
function CryptMsgOpenToDecode(dwMsgEncodingType, dwFlags, dwMsgType: DWORD;hCryptProv: HCRYPTPROV; pRecipientInfo: PCERT_INFO;pStreamInfo: PCMSG_STREAM_INFO): HCRYPTMSG; stdcall;
function CryptMsgOpenToEncode(dwMsgEncodingType, dwFlags, dwMsgType: DWORD;pvMsgEncodeInfo: Pointer; pszInnerContentObjID: LPSTR;pStreamInfo: PCMSG_STREAM_INFO): HCRYPTMSG; stdcall;
function CryptMsgSignCTL(dwMsgEncodingType: DWORD; pbCtlContent: LPBYTE;cbCtlContent: DWORD; pSignInfo: PCMSG_SIGNED_ENCODE_INFO; dwFlags: DWORD;pbEncoded: LPBYTE; var pcbEncoded: DWORD): BOOL; stdcall;
function CryptMsgUpdate(hCryptMsg: HCRYPTMSG; pbData: LPBYTE; cbData: DWORD;fFinal: BOOL): BOOL; stdcall;
function CryptMsgVerifyCountersignatureEncoded(hCryptProv: HCRYPTPROV;dwEncodingType: DWORD; pbSignerInfo: PBYTE; cbSignerInfo: DWORD;pbSignerInfoCountersignature: PBYTE; cbSignerInfoCountersignature: DWORD;pciCountersigner: PCERT_INFO): BOOL; stdcall;
function CryptMsgVerifyCountersignatureEncodedEx(hCryptProv: HCRYPTPROV;dwEncodingType: DWORD; pbSignerInfo: PBYTE; cbSignerInfo: DWORD;pbSignerInfoCountersignature: PBYTE; cbSignerInfoCountersignature: DWORD;dwSignerType: DWORD; pvSigner: Pointer; dwFlags: DWORD; pvReserved: Pointer): BOOL; stdcall;
function CryptProtectData(pDataIn: PDATA_BLOB; szDataDescr: LPCWSTR;pOptionalEntropy: PDATA_BLOB; pvReserved: PVOID;pPromptStruct: PCRYPTPROTECT_PROMPTSTRUCT; dwFlags: DWORD; pDataOut: PDATA_BLOB): BOOL; stdcall;
function CryptQueryObject(dwObjectType: DWORD; pvObject: Pointer;dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags: DWORD;pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType: LPDWORD;phCertStore: PHCERTSTORE; phMsg: PHCRYPTMSG; ppvContext: PPointer): BOOL; stdcall;
function CryptRegisterDefaultOIDFunction(dwEncodingType: DWORD; pszFuncName: LPCSTR;dwIndex: DWORD; pwszDll: LPCWSTR): BOOL; stdcall;
function CryptRegisterOIDFunction(dwEncodingType: DWORD; pszFuncName: LPCSTR;pszOID: LPCSTR; pwszDll: LPCWSTR; pszOverrideFuncName: LPCSTR): BOOL; stdcall;
function CryptRegisterOIDInfo(pInfo: PCCRYPT_OID_INFO; dwFlags: DWORD): BOOL; stdcall;
function CryptRetrieveObjectByUrlA(pszUrl: LPCSTR; pszObjectOid: LPCSTR;dwRetrievalFlags: DWORD; dwTimeout: DWORD; var ppvObject: LPVOID;hAsyncRetrieve: HCRYPTASYNC; pCredentials: PCRYPT_CREDENTIALS;pvVerify: LPVOID; pvReserved: LPVOID): BOOL; stdcall;
function CryptRetrieveObjectByUrlW(pszUrl: LPCWSTR; pszObjectOid: LPCSTR;dwRetrievalFlags: DWORD; dwTimeout: DWORD; var ppvObject: LPVOID;hAsyncRetrieve: HCRYPTASYNC; pCredentials: PCRYPT_CREDENTIALS;pvVerify: LPVOID; pvReserved: LPVOID): BOOL; stdcall;
function CryptSetAsyncParam(hAsync: HCRYPTASYNC; pszParamOid: LPSTR;pvParam: LPVOID; pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC): BOOL; stdcall;
function CryptSetKeyIdentifierProperty(pKeyIdentifier: PCRYPT_HASH_BLOB;dwPropId: DWORD; dwFlags: DWORD; pwszComputerName: LPCWSTR; pvReserved: Pointer;pvData: Pointer): BOOL; stdcall;
function CryptSetKeyParam(hKey: HCRYPTKEY; dwParam: DWORD; pbData: LPBYTE;dwFlags: DWORD): BOOL; stdcall;
function CryptSetOIDFunctionValue(dwEncodingType: DWORD; pszFuncName: LPCSTR;pszOID: LPCSTR; pwszValueName: LPCWSTR; dwValueType: DWORD; pbValueData: LPBYTE;cbValueData: DWORD): BOOL; stdcall;
function CryptSignAndEncodeCertificate(hCryptProv: HCRYPTPROV; dwKeySpec: DWORD;dwCertEncodingType: DWORD; lpszStructType: LPCSTR; pvStructInfo: Pointer;pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: Pointer;pbEncoded: PBYTE; var pcbEncoded: DWORD): BOOL; stdcall;
function CryptSignAndEncryptMessage(pSignPara: PCRYPT_SIGN_MESSAGE_PARA;pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA; cRecipientCert: DWORD;rgpRecipientCert: PCCERT_CONTEXT; pbToBeSignedAndEncrypted: LPBYTE;cbToBeSignedAndEncrypted: DWORD; pbSignedAndEncryptedBlob: LPBYTE;var pcbSignedAndEncryptedBlob: DWORD): BOOL; stdcall;
function CryptSignCertificate(hCryptProv: HCRYPTPROV; dwKeySpec: DWORD;dwCertEncodingType: DWORD; pbEncodedToBeSigned: LPBYTE; cbEncodedToBeSigned: DWORD;pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER; pvHashAuxInfo: Pointer;pbSignature: LPBYTE; var pcbSignature: DWORD): BOOL; stdcall;
function CryptSignMessage(pSignPara: PCRYPT_SIGN_MESSAGE_PARA;fDetachedSignature: BOOL; cToBeSigned: DWORD; rgpbToBeSigned: LPBYTE;rgcbToBeSigned: LPDWORD; pbSignedBlob: LPBYTE; var pcbSignedBlob: DWORD): BOOL; stdcall;
function CryptSignMessageWithKey(pSignPara: PCRYPT_KEY_SIGN_MESSAGE_PARA;pbToBeSigned: LPBYTE; cbToBeSigned: DWORD; pbSignedBlob: LPBYTE;var pcbSignedBlob: DWORD): BOOL; stdcall;
function CryptUninstallCancelRetrieval(dwFlags: DWORD; pvReserved: Pointer): BOOL; stdcall;
function CryptUninstallDefaultContext(hDefaultContext: HCRYPTDEFAULTCONTEXT;dwFlags: DWORD; pvReserved: Pointer): BOOL; stdcall;
function CryptUnprotectData(pDataIn: PDATA_BLOB; ppszDataDescr: LPLPWSTR;pOptionalEntropy: PDATA_BLOB; pvReserved: PVOID;pPromptStruct: PCRYPTPROTECT_PROMPTSTRUCT; dwFlags: DWORD; pDataOut: PDATA_BLOB): BOOL; stdcall;
function CryptUnregisterDefaultOIDFunction(dwEncodingType: DWORD;pszFuncName: LPCSTR; pwszDll: LPCWSTR): BOOL; stdcall;
function CryptUnregisterOIDFunction(dwEncodingType: DWORD; pszFuncName: LPCSTR;pszOID: LPCSTR): BOOL; stdcall;
function CryptUnregisterOIDInfo(pInfo: PCCRYPT_OID_INFO): BOOL; stdcall;{$EXTERNALSYM CryptUnregisterOIDInfo}// If the callback returns FALSE, stops the enumeration.typePFN_CRYPT_ENUM_OID_INFO = function(pInfo: PCCRYPT_OID_INFO; pvArg: Pointer): BOOL; stdcall;
function CryptVerifyCertificateSignature(hCryptProv: HCRYPTPROV;dwCertEncodingType: DWORD; pbEncoded: LPBYTE; cbEncoded: DWORD;pPublicKey: PCERT_PUBLIC_KEY_INFO): BOOL; stdcall;
function CryptVerifyCertificateSignatureEx(hCryptProv: HCRYPTPROV;dwCertEncodingType, dwSubjectType: DWORD; pvSubject: Pointer;dwIssuerType: DWORD; pvIssuer: Pointer; dwFlags: DWORD; pvReserved: Pointer): BOOL; stdcall;
function CryptVerifyDetachedMessageHash(pHashPara: PCRYPT_HASH_MESSAGE_PARA;pbDetachedHashBlob: LPBYTE; cbDetachedHashBlob: DWORD; cToBeHashed: DWORD;rgpbToBeHashed: LPBYTE; rgcbToBeHashed: LPDWORD; pbComputedHash: LPBYTE;pcbComputedHash: LPDWORD): BOOL; stdcall;
function CryptVerifyDetachedMessageSignature(pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA;dwSignerIndex: DWORD; pbDetachedSignBlob: LPBYTE; cbDetachedSignBlob: DWORD;cToBeSigned: DWORD; rgpbToBeSigned: LPBYTE; rgcbToBeSigned: LPDWORD;ppSignerCert: PPCCERT_CONTEXT): BOOL; stdcall;
function CryptVerifyMessageHash(pHashPara: PCRYPT_HASH_MESSAGE_PARA;pbHashedBlob: LPBYTE; cbHashedBlob: DWORD; pbToBeHashed: LPBYTE;pcbToBeHashed: LPDWORD; pbComputedHash: LPBYTE; pcbComputedHash: LPDWORD): BOOL; stdcall;
function CryptVerifyMessageSignature(pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA;dwSignerIndex: DWORD; pbSignedBlob: LPBYTE; cbSignedBlob: DWORD;pbDecoded: LPBYTE; pcbDecoded: LPDWORD; ppSignerCert: PPCCERT_CONTEXT): BOOL; stdcall;
function CryptVerifyMessageSignatureWithKey(pVerifyPara: PCRYPT_KEY_VERIFY_MESSAGE_PARA;pPublicKeyInfo: PCERT_PUBLIC_KEY_INFO; pbSignedBlob: LPBYTE; cbSignedBlob: DWORD;pbDecoded: LPBYTE; pcbDecoded: LPDWORD): BOOL; stdcall;
