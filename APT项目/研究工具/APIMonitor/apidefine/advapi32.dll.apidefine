function AbortSystemShutdownA(lpMachineName: PAnsiChar): BOOL; stdcall;
function AbortSystemShutdownW(lpMachineName: PWideChar): BOOL; stdcall;
function AccessCheck(pSecurityDescriptor: PSecurityDescriptor;ClientToken: THandle; DesiredAccess: DWORD; const GenericMapping: TGenericMapping;var PrivilegeSet: TPrivilegeSet; var PrivilegeSetLength: DWORD;var GrantedAccess: DWORD; var AccessStatus: BOOL): BOOL; stdcall;
function AccessCheckAndAuditAlarmA(SubsystemName: PAnsiChar;HandleId: Pointer; ObjectTypeName, ObjectName: PAnsiChar;SecurityDescriptor: PSecurityDescriptor; DesiredAccess: DWORD;const GenericMapping: TGenericMapping;  ObjectCreation: BOOL;var GrantedAccess: DWORD; var AccessStatus, pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckAndAuditAlarmW(SubsystemName: PWideChar;HandleId: Pointer; ObjectTypeName, ObjectName: PWideChar;SecurityDescriptor: PSecurityDescriptor; DesiredAccess: DWORD;const GenericMapping: TGenericMapping;  ObjectCreation: BOOL;var GrantedAccess: DWORD; var AccessStatus, pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckByType(pSecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID;ClientToken: THandle; DesiredAccess: DWORD; ObjectTypeList: PObjectTypeList;const GenericMapping: TGenericMapping; ObjectTypeListLength: DWORD;var PrivilegeSet: TPrivilegeSet; var PrivilegeSetLength: DWORD;var GrantedAccess: DWORD; var AccessStatus: BOOL): BOOL; stdcall;
function AccessCheckByTypeAndAuditAlarmA(SubsystemName: PAnsiChar;HandleId: Pointer; ObjectTypeName, ObjectName: PAnsiChar;SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: DWORD;AuditType: AUDIT_EVENT_TYPE; Flags: DWORD; ObjectTypeList: PObjectTypeList;ObjectTypeListLength: DWORD; const GenericMapping: TGenericMapping;  ObjectCreation: BOOL;var GrantedAccess: DWORD; var AccessStatus, pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckByTypeAndAuditAlarmW(SubsystemName: PWideChar;HandleId: Pointer; ObjectTypeName, ObjectName: PWideChar;SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: DWORD;AuditType: AUDIT_EVENT_TYPE; Flags: DWORD; ObjectTypeList: PObjectTypeList;ObjectTypeListLength: DWORD; const GenericMapping: TGenericMapping;  ObjectCreation: BOOL;var GrantedAccess: DWORD; var AccessStatus, pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckByTypeResultList(pSecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID;ClientToken: THandle; DesiredAccess: DWORD; ObjectTypeList: PObjectTypeList;const GenericMapping: TGenericMapping; ObjectTypeListLength: DWORD;var PrivilegeSet: TPrivilegeSet; var PrivilegeSetLength: DWORD;var GrantedAccess: DWORD; var AccessStatusList: DWORD): BOOL; stdcall;
function AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: PAnsiChar;HandleId: Pointer; ObjectTypeName, ObjectName: PAnsiChar;SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: DWORD;AuditType: AUDIT_EVENT_TYPE; Flags: DWORD; ObjectTypeList: PObjectTypeList;ObjectTypeListLength: DWORD; const GenericMapping: TGenericMapping;  ObjectCreation: BOOL;var GrantedAccess: DWORD; var AccessStatusList: DWORD; var pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: LPCSTR;HandleId: LPVOID; ClientToken: HANDLE; ObjectTypeName, ObjectName: LPCSTR;SecurityDescriptor: PSECURITY_DESCRIPTOR; PrincipalSelfSid: PSID;DesiredAccess: DWORD; AuditType: AUDIT_EVENT_TYPE; Flags: DWORD;ObjectTypeList: POBJECT_TYPE_LIST; ObjectTypeListLength: DWORD;const GenericMapping: GENERIC_MAPPING; ObjectCreation: BOOL;var GrantedAccess, AccessStatusList: DWORD; var pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName: LPCWSTR;HandleId: LPVOID; ClientToken: HANDLE; ObjectTypeName, ObjectName: LPCWSTR;SecurityDescriptor: PSECURITY_DESCRIPTOR; PrincipalSelfSid: PSID;DesiredAccess: DWORD; AuditType: AUDIT_EVENT_TYPE; Flags: DWORD;ObjectTypeList: POBJECT_TYPE_LIST; ObjectTypeListLength: DWORD;const GenericMapping: PGENERIC_MAPPING; ObjectCreation: BOOL;var GrantedAccess, AccessStatusList: DWORD; var pfGenerateOnClose: BOOL): BOOL; stdcall;
function AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: PWideChar;HandleId: Pointer; ObjectTypeName, ObjectName: PWideChar;SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: DWORD;AuditType: AUDIT_EVENT_TYPE; Flags: DWORD; ObjectTypeList: PObjectTypeList;ObjectTypeListLength: DWORD; const GenericMapping: TGenericMapping;  ObjectCreation: BOOL;var GrantedAccess: DWORD; var AccessStatusList: DWORD; var pfGenerateOnClose: BOOL): BOOL; stdcall;
function AddAccessAllowedAce(var pAcl: TACL; dwAceRevision: DWORD;AccessMask: DWORD; pSid: PSID): BOOL; stdcall;
function AddAccessAllowedAceEx(var pAcl: TACL; dwAceRevision: DWORD;AceFlags: DWORD; AccessMask: DWORD; pSid: PSID): BOOL; stdcall;
function AddAccessAllowedObjectAce(var pAcl: TACL; dwAceRevision: DWORD;AceFlags: DWORD; AccessMask: DWORD; ObjectTypeGuid, InheritedObjectTypeGuid: PGuid; pSid: Pointer): BOOL; stdcall;
function AddAccessDeniedAce(var pAcl: TACL; dwAceRevision: DWORD;AccessMask: DWORD; pSid: PSID): BOOL; stdcall;
function AddAccessDeniedAceEx(var pAcl: TACL; dwAceRevision: DWORD;ACEFlags: DWORD; AccessMask: DWORD; pSid: PSID): BOOL; stdcall;
function AddAccessDeniedObjectAce(var pAcl: TACL; dwAceRevision: DWORD;AceFlags: DWORD; AccessMask: DWORD; ObjectTypeGuid, InheritedObjectTypeGuid: PGuid; pSid: Pointer): BOOL; stdcall;
function AddAce(var pAcl: TACL; dwAceRevision, dwStartingAceIndex: DWORD; pAceList: Pointer;nAceListLength: DWORD): BOOL; stdcall;
function AddAuditAccessAce(var pAcl: TACL; dwAceRevision: DWORD;dwAccessMask: DWORD; pSid: Pointer; bAuditSuccess, bAuditFailure: BOOL): BOOL; stdcall;
function AddAuditAccessAceEx(var pAcl: TACL; dwAceRevision: DWORD;AceFlags: DWORD; dwAccessMask: DWORD; pSid: Pointer; bAuditSuccess, bAuditFailure: BOOL): BOOL; stdcall;
function AddAuditAccessObjectAce(var pAcl: TACL; dwAceRevision: DWORD;AceFlags: DWORD; AccessMask: DWORD; ObjectTypeGuid, InheritedObjectTypeGuid: PGuid; pSid: Pointer; bAuditSuccess, bAuditFailure: BOOL): BOOL; stdcall;
function AddUsersToEncryptedFile(lpFileName: LPCWSTR;pUsers: PENCRYPTION_CERTIFICATE_LIST): DWORD; stdcall;
function AdjustTokenGroups(TokenHandle: THandle; ResetToDefault: BOOL;const NewState: TTokenGroups; BufferLength: DWORD;var PreviousState: TTokenGroups; var ReturnLength: DWORD): BOOL; stdcall;
function AdjustTokenPrivileges(TokenHandle: THandle; DisableAllPrivileges: BOOL;const NewState: TTokenPrivileges; BufferLength: DWORD;PreviousState: PTokenPrivileges; var ReturnLength: DWORD): BOOL; stdcall; overload;
function AllocateAndInitializeSid(const pIdentifierAuthority: TSIDIdentifierAuthority;nSubAuthorityCount: Byte; nSubAuthority0, nSubAuthority1: DWORD;nSubAuthority2, nSubAuthority3, nSubAuthority4: DWORD;nSubAuthority5, nSubAuthority6, nSubAuthority7: DWORD;var pSid: Pointer): BOOL; stdcall;
function AllocateLocallyUniqueId(var Luid: TLargeInteger): BOOL; stdcall;
function AreAllAccessesGranted(GrantedAccess, DesiredAccess: DWORD): BOOL; stdcall;
function AreAnyAccessesGranted(GrantedAccess, DesiredAccess: DWORD): BOOL; stdcall;
function BackupEventLogA(hEventLog: THandle; lpBackupFileName: PAnsiChar): BOOL; stdcall;
function BackupEventLogW(hEventLog: THandle; lpBackupFileName: PWideChar): BOOL; stdcall;
procedure BuildExplicitAccessWithNameA(pExplicitAccess: PEXPLICIT_ACCESS_A;pTrusteeName: PAnsiChar; AccessPermissions: DWORD; AccessMode: ACCESS_MODE;Ineritance: DWORD); stdcall;
procedure BuildExplicitAccessWithNameW(pExplicitAccess: PEXPLICIT_ACCESS_W;pTrusteeName: PAnsiChar; AccessPermissions: DWORD; AccessMode: ACCESS_MODE;Ineritance: DWORD); stdcall;
procedure BuildImpersonateExplicitAccessWithNameA(pExplicitAccess: PEXPLICIT_ACCESS_A;pTrusteeName: PAnsiChar; pTrustee: PTRUSTEE_A; AccessPermissions: DWORD;AccessMode: ACCESS_MODE; Inheritance: DWORD); stdcall; {obsolete}
procedure BuildImpersonateExplicitAccessWithNameW(pExplicitAccess: PEXPLICIT_ACCESS_W;pTrusteeName: PAnsiChar; pTrustee: PTRUSTEE_W; AccessPermissions: DWORD;AccessMode: ACCESS_MODE; Inheritance: DWORD); stdcall; {obsolete}
procedure BuildImpersonateTrusteeA(pTrustee: PTRUSTEE_A; pImpersonateTrustee: PTRUSTEE_A); stdcall; {obsolete}
procedure BuildImpersonateTrusteeW(pTrustee: PTRUSTEE_W; pImpersonateTrustee: PTRUSTEE_W); stdcall; {obsolete}
function BuildSecurityDescriptorA(pOwner, pGroup: PTRUSTEE_A; cCountOfAccessEntries: ULONG;pListOfAccessEntries: PEXPLICIT_ACCESS_A; cCountOfAuditEntries: ULONG;pListOfAuditEntries: PEXPLICIT_ACCESS_A; pOldSD: PSECURITY_DESCRIPTOR;var pSizeNewSD: ULONG; var pNewSD: SECURITY_DESCRIPTOR): DWORD; stdcall; {use localfree to release pNewSD}
function BuildSecurityDescriptorW(pOwner, pGroup: PTRUSTEE_W; cCountOfAccessEntries: ULONG;pListOfAccessEntries: PEXPLICIT_ACCESS_W; cCountOfAuditEntries: ULONG;pListOfAuditEntries: PEXPLICIT_ACCESS_W; pOldSD: PSECURITY_DESCRIPTOR;var pSizeNewSD: ULONG; var pNewSD: SECURITY_DESCRIPTOR): DWORD; stdcall; {use localfree to release pNewSD}
procedure BuildTrusteeWithNameA(pTrustee: PTRUSTEE_A; pName: PAnsiChar); stdcall;
procedure BuildTrusteeWithNameW(pTrustee: PTRUSTEE_W; pName: PAnsiChar); stdcall;
procedure BuildTrusteeWithObjectsAndNameA(pTrustee: PTRUSTEE_A;pObjName: POBJECTS_AND_NAME_A; ObjectType: SE_OBJECT_TYPE;ObjectTypeName, InheritedObjectTypeName, Name: LPSTR); stdcall;
procedure BuildTrusteeWithObjectsAndNameW(pTrustee: PTRUSTEE_W;pObjName: POBJECTS_AND_NAME_W; ObjectType: SE_OBJECT_TYPE;ObjectTypeName, InheritedObjectTypeName, Name: LPWSTR); stdcall;
procedure BuildTrusteeWithObjectsAndSidA(pTrustee: PTRUSTEE_A;pObjSid: POBJECTS_AND_SID; pObjectGuid: PGUID; pInheritedObjectGuid: PGUID;pSid: PSID); stdcall;
procedure BuildTrusteeWithObjectsAndSidW(pTrustee: PTRUSTEE_W;pObjSid: POBJECTS_AND_SID; pObjectGuid: PGUID; pInheritedObjectGuid: PGUID;pSid: PSID); stdcall;
procedure BuildTrusteeWithSidA(pTrustee: PTRUSTEE_A; pSidIn: PSID); stdcall;
procedure BuildTrusteeWithSidW(pTrustee: PTRUSTEE_W; pSidIn: PSID); stdcall;
function ChangeServiceConfig2A(hService: SC_HANDLE; dwInfoLevel: DWORD;lpInfo: LPVOID): BOOL; stdcall;
function ChangeServiceConfig2W(hService: SC_HANDLE; dwInfoLevel: DWORD;lpInfo: LPVOID): BOOL; stdcall;
function ChangeServiceConfigA(hService: SC_HANDLE; dwServiceType, dwStartType,dwErrorControl: DWORD; lpBinaryPathName, lpLoadOrderGroup: PAnsiChar;lpdwTagId: LPDWORD; lpDependencies, lpServiceStartName, lpPassword,lpDisplayName: PAnsiChar): BOOL; stdcall;
function ChangeServiceConfigW(hService: SC_HANDLE; dwServiceType, dwStartType,dwErrorControl: DWORD; lpBinaryPathName, lpLoadOrderGroup: PWideChar;lpdwTagId: LPDWORD; lpDependencies, lpServiceStartName, lpPassword,lpDisplayName: PWideChar): BOOL; stdcall;
function CheckTokenMembership(TokenHandle: HANDLE; SidToCheck: PSID; var IsMember: BOOL): BOOL; stdcall;
function ClearEventLogA(hEventLog: THandle; lpBackupFileName: PAnsiChar): BOOL; stdcall;
function ClearEventLogW(hEventLog: THandle; lpBackupFileName: PWideChar): BOOL; stdcall;
procedure CloseEncryptedFileRaw(pvContext: PVOID); stdcall;
function CloseEventLog(hEventLog: THandle): BOOL; stdcall;
function CloseServiceHandle(hSCObject: SC_HANDLE): BOOL; stdcall;
function ControlService(hService: SC_HANDLE; dwControl: DWORD;var lpServiceStatus: TServiceStatus): BOOL; stdcall;
function ConvertSecurityDescriptorToStringSecurityDescriptorA(SecurityDescriptor: PSECURITY_DESCRIPTOR; RequestedStringSDRevision: DWORD;SecurityInformation: SECURITY_INFORMATION; var StringSecurityDescriptor: LPSTR;StringSecurityDescriptorLen: PULONG): BOOL; stdcall;
function ConvertSecurityDescriptorToStringSecurityDescriptorW(SecurityDescriptor: PSECURITY_DESCRIPTOR; RequestedStringSDRevision: DWORD;SecurityInformation: SECURITY_INFORMATION; var StringSecurityDescriptor: LPWSTR;StringSecurityDescriptorLen: PULONG): BOOL; stdcall;
function ConvertSidToStringSidA(Sid: PSID; var StringSid: LPSTR): BOOL; stdcall;
function ConvertSidToStringSidW(Sid: PSID; var StringSid: LPWSTR): BOOL; stdcall;
function ConvertStringSecurityDescriptorToSecurityDescriptorA(StringSecurityDescriptor: LPCSTR;StringSDRevision: DWORD; var SecurityDescriptor: PSECURITY_DESCRIPTOR;SecurityDescriptorSize: PULONG): BOOL; stdcall;
function ConvertStringSecurityDescriptorToSecurityDescriptorW(StringSecurityDescriptor: LPCWSTR;StringSDRevision: DWORD; var SecurityDescriptor: PSECURITY_DESCRIPTOR;SecurityDescriptorSize: PULONG): BOOL; stdcall;
function ConvertStringSidToSidA(StringSid: LPCSTR; var Sid: PSID): BOOL; stdcall;
function ConvertStringSidToSidW(StringSid: LPCWSTR; var Sid: PSID): BOOL; stdcall;
function ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor, CurrentSecurityDescriptor: PSecurityDescriptor;var NewDescriptor: PSecurityDescriptor; ObjectType: PGUID;IsDirectoryObject: BOOL; const GenericMapping: TGenericMapping): BOOL; stdcall;
function CopySid(nDestinationSidLength: DWORD;pDestinationSid, pSourceSid: Pointer): BOOL; stdcall;
function CreatePrivateObjectSecurity(ParentDescriptor, CreatorDescriptor: PSecurityDescriptor;var NewDescriptor: PSecurityDescriptor; IsDirectoryObject: BOOL;Token: THandle; const GenericMapping: TGenericMapping): BOOL; stdcall;
function CreatePrivateObjectSecurityEx(ParentDescriptor, CreatorDescriptor: PSecurityDescriptor;var NewDescriptor: PSecurityDescriptor; ObjectType: PGUID; IsContainerObject: BOOL;AutoInheritFlags: ULONG; Token: THandle; const GenericMapping: TGenericMapping): BOOL; stdcall;
function CreateProcessAsUserA(hToken: THandle; lpApplicationName: PAnsiChar;lpCommandLine: PAnsiChar; lpProcessAttributes: PSecurityAttributes;lpThreadAttributes: PSecurityAttributes; bInheritHandles: BOOL;dwCreationFlags: DWORD; lpEnvironment: Pointer; lpCurrentDirectory: PAnsiChar;const lpStartupInfo: TStartupInfo; var lpProcessInformation: TProcessInformation): BOOL; stdcall;
function CreateProcessAsUserW(hToken: THandle; lpApplicationName: PWideChar;lpCommandLine: PWideChar; lpProcessAttributes: PSecurityAttributes;lpThreadAttributes: PSecurityAttributes; bInheritHandles: BOOL;dwCreationFlags: DWORD; lpEnvironment: Pointer; lpCurrentDirectory: PWideChar;const lpStartupInfo: TStartupInfo; var lpProcessInformation: TProcessInformation): BOOL; stdcall;
function CreateProcessWithLogonW(lpUsername, lpDomain, lpPassword: LPCWSTR;dwLogonFlags: DWORD; lpApplicationName: LPCWSTR; lpCommandLine: LPWSTR;dwCreationFlags: DWORD; lpEnvironment: LPVOID; lpCurrentDirectory: LPCWSTR;const lpStartupInfo: STARTUPINFOW; var lpProcessInformation: PROCESS_INFORMATION): BOOL; stdcall;
function CreateProcessWithTokenW(hToken: HANDLE; dwLogonFlags: DWORD; lpApplicationName: LPCWSTR; lpCommandLine: LPWSTR;dwCreationFlags: DWORD; lpEnvironment: LPVOID; lpCurrentDirectory: LPCWSTR; lpStartupInfo: LPSTARTUPINFOW;lpProcessInformation: LPPROCESS_INFORMATION): BOOL; stdcall;
function CreateRestrictedToken(ExistingTokenHandle: HANDLE; Flags: DWORD;DisableSidCount: DWORD; SidsToDisable: PSID_AND_ATTRIBUTES;DeletePrivilegeCount: DWORD; PrivilegesToDelete: PLUID_AND_ATTRIBUTES;RestrictedSidCount: DWORD; SidsToRestrict: PSID_AND_ATTRIBUTES;var NewTokenHandle: HANDLE): BOOL; stdcall;
function CreateServiceA(hSCManager: SC_HANDLE; lpServiceName, lpDisplayName: PAnsiChar;dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: DWORD;lpBinaryPathName, lpLoadOrderGroup: PAnsiChar; lpdwTagId: LPDWORD; lpDependencies,lpServiceStartName, lpPassword: PAnsiChar): SC_HANDLE; stdcall;
function CreateServiceW(hSCManager: SC_HANDLE; lpServiceName, lpDisplayName: PWideChar;dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: DWORD;lpBinaryPathName, lpLoadOrderGroup: PWideChar; lpdwTagId: LPDWORD; lpDependencies,lpServiceStartName, lpPassword: PWideChar): SC_HANDLE; stdcall;
function CreateWellKnownSid(WellKnownSidType: WELL_KNOWN_SID_TYPE; DomainSid: PSID;pSid: PSID; var cbSid: DWORD): BOOL; stdcall;
function CredDeleteA(TargetName: LPCSTR; Type_: DWORD; Flags: DWORD): BOOL; stdcall;
function CredDeleteW(TargetName: LPCWSTR; Type_: DWORD; Flags: DWORD): BOOL; stdcall;
function CredEnumerateA(Filter: LPCSTR; Flags: DWORD; var Count: DWORD; var Credential: PCREDENTIALA): BOOL; stdcall;
function CredEnumerateW(Filter: LPCWSTR; Flags: DWORD; var Count: DWORD; var Credential: PCREDENTIALW): BOOL; stdcall;
procedure CredFree(Buffer: PVOID); stdcall;
function CredGetSessionTypes(MaximumPersistCount: DWORD; MaximumPersist: LPDWORD): BOOL; stdcall;
function CredGetTargetInfoA(TargetName: LPCSTR; Flags: DWORD; var TargetInfo: PCREDENTIAL_TARGET_INFORMATIONA): BOOL; stdcall;
function CredGetTargetInfoW(TargetName: LPCWSTR; Flags: DWORD; var TargetInfo: PCREDENTIAL_TARGET_INFORMATIONW): BOOL; stdcall;
function CredIsMarshaledCredentialA(MarshaledCredential: LPCSTR): BOOL; stdcall;
function CredIsMarshaledCredentialW(MarshaledCredential: LPCWSTR): BOOL; stdcall;
function CredMarshalCredentialA(CredType: CRED_MARSHAL_TYPE; Credential: PVOID; MarshaledCredential: LPSTR): BOOL; stdcall;
function CredMarshalCredentialW(CredType: CRED_MARSHAL_TYPE; Credential: PVOID; var MarshaledCredential: LPWSTR): BOOL; stdcall;
function CredReadA(TargetName: LPCSTR; Type_: DWORD; Flags: DWORD; var Credential: PCREDENTIALA): BOOL; stdcall;
function CredReadDomainCredentialsA(TargetInfo: PCREDENTIAL_TARGET_INFORMATIONA; Flags: DWORD; var Count: DWORD; var Credential: PCREDENTIALA): BOOL; stdcall;
function CredReadDomainCredentialsW(TargetInfo: PCREDENTIAL_TARGET_INFORMATIONW; Flags: DWORD; var Count: DWORD; var Credential: PCREDENTIALW): BOOL; stdcall;
function CredReadW(TargetName: LPCWSTR; Type_: DWORD; Flags: DWORD; var Credential: PCREDENTIALW): BOOL; stdcall;
function CredRenameA(OldTargetName: LPCSTR; NewTargetName: LPCSTR; Type_: DWORD; Flags: DWORD): BOOL; stdcall;
function CredRenameW(OldTargetName: LPCWSTR; NewTargetName: LPCWSTR; Type_: DWORD; Flags: DWORD): BOOL; stdcall;
function CredUnmarshalCredentialA(MarshaledCredential: LPCSTR; CredType: PCRED_MARSHAL_TYPE; Credential: PVOID): BOOL; stdcall;
function CredUnmarshalCredentialW(MarshaledCredential: LPCWSTR; CredType: PCRED_MARSHAL_TYPE; var Credential: PVOID): BOOL; stdcall;
function CredWriteA(Credential: PCREDENTIALA; Flags: DWORD): BOOL; stdcall;
function CredWriteDomainCredentialsA(TargetInfo: PCREDENTIAL_TARGET_INFORMATIONA; Credential: PCREDENTIALA; Flags: DWORD): BOOL; stdcall;
function CredWriteDomainCredentialsW(TargetInfo: PCREDENTIAL_TARGET_INFORMATIONW; Credential: PCREDENTIALW; Flags: DWORD): BOOL; stdcall;
function CredWriteW(Credential: PCREDENTIALW; Flags: DWORD): BOOL; stdcall;
function CryptAcquireContextA(var phProv: HCRYPTPROV; pszContainer: LPCSTR;pszProvider: LPCSTR; dwProvType: DWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptAcquireContextW(var phProv: HCRYPTPROV; pszContainer: LPCWSTR;pszProvider: LPCWSTR; dwProvType: DWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptContextAddRef(hProv: HCRYPTPROV; pdwReserved: LPDWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptCreateHash(hProv: HCRYPTPROV; Algid: ALG_ID; hKey: HCRYPTKEY;dwFlags: DWORD; var phHash: HCRYPTHASH): BOOL; stdcall;
function CryptDecrypt(hKey: HCRYPTKEY; hHash: HCRYPTHASH; Final: BOOL;dwFlags: DWORD; pbData: LPBYTE; var pdwDataLen: DWORD): BOOL; stdcall;
function CryptDeriveKey(hProv: HCRYPTPROV; Algid: ALG_ID; hBaseData: HCRYPTHASH;dwFlags: DWORD; var phKey: HCRYPTKEY): BOOL; stdcall;
function CryptDestroyHash(hHash: HCRYPTHASH): BOOL; stdcall;
function CryptDestroyKey(hKey: HCRYPTKEY): BOOL; stdcall;
function CryptDuplicateHash(hHash: HCRYPTHASH; pdwReserved: LPDWORD;dwFlags: DWORD; var phHash: HCRYPTHASH): BOOL; stdcall;
function CryptDuplicateKey(hKey: HCRYPTKEY; pdwReserved: LPDWORD; dwFlags: DWORD;var phKey: HCRYPTKEY): BOOL; stdcall;
function CryptEncrypt(hKey: HCRYPTKEY; hHash: HCRYPTHASH; Final: BOOL;dwFlags: DWORD; pbData: LPBYTE; var pdwDataLen: DWORD; dwBufLen: DWORD): BOOL; stdcall;
function CryptEnumProvidersA(dwIndex: DWORD; pdwReserved: LPDWORD; dwFlags: DWORD;var pdwProvType: DWORD; pszProvName: LPSTR; var pcbProvName: DWORD): BOOL; stdcall;
function CryptEnumProvidersW(dwIndex: DWORD; pdwReserved: LPDWORD; dwFlags: DWORD;var pdwProvType: DWORD; pszProvName: LPWSTR; var pcbProvName: DWORD): BOOL; stdcall;
function CryptEnumProviderTypesA(dwIndex: DWORD; pdwReserved: LPDWORD;dwFlags: DWORD; var pdwProvType: DWORD; pszTypeName: LPSTR;var pcbTypeName: DWORD): BOOL; stdcall;
function CryptEnumProviderTypesW(dwIndex: DWORD; pdwReserved: LPDWORD;dwFlags: DWORD; var pdwProvType: DWORD; pszTypeName: LPWSTR;var pcbTypeName: DWORD): BOOL; stdcall;
function CryptExportKey(hKey, hExpKey: HCRYPTKEY; dwBlobType, dwFlags: DWORD;pbData: LPBYTE; var pdwDataLen: DWORD): BOOL; stdcall;
function CryptGenKey(hProv: HCRYPTPROV; Algid: ALG_ID; dwFlags: DWORD;var phKey: HCRYPTKEY): BOOL; stdcall;
function CryptGenRandom(hProv: HCRYPTPROV; dwLen: DWORD; pbBuffer: LPBYTE): BOOL; stdcall;
function CryptGetDefaultProviderA(dwProvType: DWORD; pdwReserved: LPDWORD;dwFlags: DWORD; pszProvName: LPSTR; var pcbProvName: DWORD): BOOL; stdcall;
function CryptGetDefaultProviderW(dwProvType: DWORD; pdwReserved: LPDWORD;dwFlags: DWORD; pszProvName: LPWSTR; var pcbProvName: DWORD): BOOL; stdcall;
function CryptGetHashParam(hHash: HCRYPTHASH; dwParam: DWORD; pbData: LPBYTE;var pdwDataLen: DWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptGetKeyParam(hKey: HCRYPTKEY; dwParam: DWORD; pbData: LPBYTE;var pdwDataLen: DWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptGetProvParam(hProv: HCRYPTPROV; dwParam: DWORD; pbData: LPBYTE;var pdwDataLen: DWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptGetUserKey(hProv: HCRYPTPROV; dwKeySpec: DWORD; var phUserKey: HCRYPTKEY): BOOL; stdcall;
function CryptHashData(hHash: HCRYPTHASH; pbData: LPBYTE; dwDataLen, dwFlags: DWORD): BOOL; stdcall;
function CryptHashSessionKey(hHash: HCRYPTHASH; hKey: HCRYPTKEY; dwFlags: DWORD): BOOL; stdcall;
function CryptImportKey(hProv: HCRYPTPROV; pbData: LPBYTE; dwDataLen: DWORD;hPubKey: HCRYPTKEY; dwFlags: DWORD; var phKey: HCRYPTKEY): BOOL; stdcall;
function CryptReleaseContext(hProv: HCRYPTPROV; dwFlags: ULONG_PTR): BOOL; stdcall;
function CryptSetHashParam(hHash: HCRYPTHASH; dwParam: DWORD; pbData: LPBYTE;dwFlags: DWORD): BOOL; stdcall;
function CryptSetProviderA(pszProvName: LPCSTR; dwProvType: DWORD): BOOL; stdcall;
function CryptSetProviderExA(pszProvName: LPCSTR; dwProvType: DWORD;pdwReserved: LPDWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptSetProviderExW(pszProvName: LPCWSTR; dwProvType: DWORD;pdwReserved: LPDWORD; dwFlags: DWORD): BOOL; stdcall;
function CryptSetProviderW(pszProvName: LPCWSTR; dwProvType: DWORD): BOOL; stdcall;
function CryptSetProvParam(hProv: HCRYPTPROV; dwParam: DWORD; pbData: LPBYTE;dwFlags: DWORD): BOOL; stdcall;
function CryptSignHashA(hHash: HCRYPTHASH; dwKeySpec: DWORD; sDescription: LPCSTR;dwFlags: DWORD; pbSignature: LPBYTE; var pdwSigLen: DWORD): BOOL; stdcall;
function CryptSignHashW(hHash: HCRYPTHASH; dwKeySpec: DWORD; sDescription: LPCWSTR;dwFlags: DWORD; pbSignature: LPBYTE; var pdwSigLen: DWORD): BOOL; stdcall;
function CryptVerifySignatureA(hHash: HCRYPTHASH; pbSignature: LPBYTE;dwSigLen: DWORD; hPubKey: HCRYPTKEY; sDescription: LPCSTR; dwFlags: DWORD): BOOL; stdcall;
function CryptVerifySignatureW(hHash: HCRYPTHASH; pbSignature: LPBYTE;dwSigLen: DWORD; hPubKey: HCRYPTKEY; sDescription: LPCWSTR; dwFlags: DWORD): BOOL; stdcall;
function DecryptFileA(lpFileName: LPCSTR; dwReserved: DWORD): BOOL; stdcall;
function DecryptFileW(lpFileName: LPCWSTR; dwReserved: DWORD): BOOL; stdcall;
function DeleteAce(var pAcl: TACL; dwAceIndex: DWORD): BOOL; stdcall;
function DeleteService(hService: SC_HANDLE): BOOL; stdcall;
function DeregisterEventSource(hEventLog: THandle): BOOL; stdcall;
function DestroyPrivateObjectSecurity(var ObjectDescriptor: PSecurityDescriptor): BOOL; stdcall;
function DuplicateEncryptionInfoFile(SrcFileName, DstFileName: LPCWSTR; dwCreationDistribution,dwAttributes: DWORD; lpSecurityAttributes: LPSECURITY_ATTRIBUTES): DWORD; stdcall;
function DuplicateToken(ExistingTokenHandle: THandle;ImpersonationLevel: TSecurityImpersonationLevel; DuplicateTokenHandle: PHandle): BOOL; stdcall;
function DuplicateTokenEx(hExistingToken: THandle; dwDesiredAccess: DWORD;lpTokenAttributes: PSecurityAttributes;ImpersonationLevel: TSecurityImpersonationLevel; TokenType: TTokenType;var phNewToken: THandle): BOOL; stdcall;
function EncryptFileA(lpFileName: LPCSTR): BOOL; stdcall;
function EncryptFileW(lpFileName: LPCWSTR): BOOL; stdcall;
function EncryptionDisable(DirPath: LPCWSTR; Disable: BOOL): BOOL; stdcall;
function EnumDependentServicesA(hService: SC_HANDLE; dwServiceState: DWORD;var lpServices: TEnumServiceStatusA; cbBufSize: DWORD; var pcbBytesNeeded,lpServicesReturned : DWORD): BOOL; stdcall;
function EnumDependentServicesW(hService: SC_HANDLE; dwServiceState: DWORD;var lpServices: TEnumServiceStatusW; cbBufSize: DWORD; var pcbBytesNeeded,lpServicesReturned : DWORD): BOOL; stdcall;
function EnumServicesStatusA(hSCManager: SC_HANDLE; dwServiceType,dwServiceState: DWORD; var lpServices: TEnumServiceStatusA; cbBufSize: DWORD;var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD): BOOL; stdcall;
function EnumServicesStatusExA(hSCManager: SC_HANDLE; InfoLevel: SC_ENUM_TYPE;dwServiceType: DWORD; dwServiceState: DWORD; lpServices: LPBYTE;cbBufSize: DWORD; var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD;pszGroupName: LPCSTR): BOOL; stdcall;
function EnumServicesStatusExW(hSCManager: SC_HANDLE; InfoLevel: SC_ENUM_TYPE;dwServiceType: DWORD; dwServiceState: DWORD; lpServices: LPBYTE;cbBufSize: DWORD; var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD;pszGroupName: LPCWSTR): BOOL; stdcall;
function EnumServicesStatusW(hSCManager: SC_HANDLE; dwServiceType,dwServiceState: DWORD; var lpServices: TEnumServiceStatusW; cbBufSize: DWORD;var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD): BOOL; stdcall;
function EqualDomainSid(pSid1, pSid2: PSID; pfEqual: PBOOL): BOOL; stdcall;
function EqualPrefixSid(pSid1, pSid2: Pointer): BOOL; stdcall;
function EqualSid(pSid1, pSid2: Pointer): BOOL; stdcall;
function FileEncryptionStatusA(lpFileName: LPCSTR; var lpStatus: DWORD): BOOL; stdcall;
function FileEncryptionStatusW(lpFileName: LPCWSTR; var lpStatus: DWORD): BOOL; stdcall;
function FindFirstFreeAce(var pAcl: TACL; var pAce: Pointer): BOOL; stdcall;
procedure FreeEncryptionCertificateHashList(pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST); stdcall;
function FreeInheritedFromArray(pInheritArray: PINHERITED_FROMW; AceCnt: USHORT;pfnArray: PFN_OBJECT_MGR_FUNCTS): DWORD; stdcall;
function FreeSid(pSid: Pointer): Pointer; stdcall;
function GetAce(const pAcl: TACL; dwAceIndex: DWORD; var pAce: Pointer): BOOL; stdcall;
function GetAclInformation(const pAcl: TACL; pAclInformation: Pointer;nAclInformationLength: DWORD; dwAclInformationClass: TAclInformationClass): BOOL; stdcall;
function GetAuditedPermissionsFromAclA(var pacl: ACL; var pTrustee: TRUSTEE_A;var pSuccessfulAuditedRights: ACCESS_MASK; var pFailedAuditRights: ACCESS_MASK): DWORD; stdcall;
function GetAuditedPermissionsFromAclW(var pacl: ACL; var pTrustee: TRUSTEE_W;var pSuccessfulAuditedRights: ACCESS_MASK; var pFailedAuditRights: ACCESS_MASK): DWORD; stdcall;
function GetCurrentHwProfileA(var lpHwProfileInfo: THWProfileInfoA): BOOL; stdcall;
function GetCurrentHwProfileW(var lpHwProfileInfo: THWProfileInfoW): BOOL; stdcall;
function GetEffectiveRightsFromAclA(var pacl: ACL; var pTrustee: TRUSTEE_A;var pAccessRights: ACCESS_MASK): DWORD; stdcall;
function GetEffectiveRightsFromAclW(var pacl: ACL; var pTrustee: TRUSTEE_W;var pAccessRights: ACCESS_MASK): DWORD; stdcall;
function GetEventLogInformation(hEventLog: HANDLE; dwInfoLevel: DWORD;lpBuffer: LPVOID; cbBufSize: DWORD; var pcbBytesNeeded: DWORD): BOOL; stdcall;
function GetExplicitEntriesFromAclA(var pacl: ACL; var pcCountOfExplicitEntries: ULONG;pListOfExplicitEntries: PEXPLICIT_ACCESS_A): DWORD; stdcall; {use localfree to release pListOfExplicitEntries}
function GetExplicitEntriesFromAclW(var pacl: ACL; var pcCountOfExplicitEntries: ULONG;pListOfExplicitEntries: PEXPLICIT_ACCESS_W): DWORD; stdcall; {use localfree to release pListOfExplicitEntries}
function GetFileSecurityA(lpFileName: PAnsiChar; RequestedInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD; var lpnLengthNeeded: DWORD): BOOL; stdcall;
function GetFileSecurityW(lpFileName: PWideChar; RequestedInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD; var lpnLengthNeeded: DWORD): BOOL; stdcall;
function GetInheritanceSourceA(pObjectName: LPSTR; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; Container: BOOL; pObjectClassGuids: LPGUID;GuidCount: DWORD; pAcl: PACL; pfnArray: PFN_OBJECT_MGR_FUNCTS;pGenericMapping: PGENERIC_MAPPING; pInheritArray: PINHERITED_FROMA): DWORD; stdcall;
function GetInheritanceSourceW(pObjectName: LPWSTR; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; Container: BOOL; pObjectClassGuids: LPGUID;GuidCount: DWORD; pAcl: PACL; pfnArray: PFN_OBJECT_MGR_FUNCTS;pGenericMapping: PGENERIC_MAPPING; pInheritArray: PINHERITED_FROMW): DWORD; stdcall;
function GetKernelObjectSecurity(Handle: THandle; RequestedInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSecurityDescriptor; nLength: DWORD;var lpnLengthNeeded: DWORD): BOOL; stdcall;
function GetLengthSid(pSid: Pointer): DWORD; stdcall;
function GetMultipleTrusteeA(pTrustee: PTrustee_A): PTRUSTEE_A; stdcall; {obsolete}
function GetMultipleTrusteeOperationA(pTrustee: PTRUSTEE_A): MULTIPLE_TRUSTEE_OPERATION; stdcall; {obsolete}
function GetMultipleTrusteeOperationW(pTrustee: PTRUSTEE_W): MULTIPLE_TRUSTEE_OPERATION; stdcall; {obsolete}
function GetMultipleTrusteeW(pTrustee: PTrustee_W): PTRUSTEE_W; stdcall; {obsolete}
function GetNamedSecurityInfoA(pObjectName: PAnsiChar; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; ppsidOwner, ppsidGroup: PPSID; ppDacl, ppSacl: PACL;var ppSecurityDescriptor: PSECURITY_DESCRIPTOR): DWORD; stdcall; {use localfree to release ppSecurityDescriptor}
function GetNamedSecurityInfoW(pObjectName: PAnsiChar; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; ppsidOwner, ppsidGroup: PPSID; ppDacl, ppSacl: PACL;var ppSecurityDescriptor: PSECURITY_DESCRIPTOR): DWORD; stdcall; {use localfree to release ppSecurityDescriptor}
function GetNumberOfEventLogRecords(hEventLog: THandle; var NumberOfRecords: DWORD): BOOL; stdcall;
function GetOldestEventLogRecord(hEventLog: THandle; var OldestRecord: DWORD): BOOL; stdcall;
function GetPrivateObjectSecurity(ObjectDescriptor: PSecurityDescriptor;SecurityInformation: SECURITY_INFORMATION; ResultantDescriptor: PSecurityDescriptor;DescriptorLength: DWORD; var ReturnLength: DWORD): BOOL; stdcall;
function GetSecurityDescriptorControl(pSecurityDescriptor: PSecurityDescriptor;var pControl: SECURITY_DESCRIPTOR_CONTROL; var lpdwRevision: DWORD): BOOL; stdcall;
function GetSecurityDescriptorDacl(pSecurityDescriptor: PSecurityDescriptor;var lpbDaclPresent: BOOL; var pDacl: PACL; var lpbDaclDefaulted: BOOL): BOOL; stdcall;
function GetSecurityDescriptorGroup(pSecurityDescriptor: PSecurityDescriptor;var pGroup: PSID; var lpbGroupDefaulted: BOOL): BOOL; stdcall;
function GetSecurityDescriptorLength(pSecurityDescriptor: PSecurityDescriptor): DWORD; stdcall;
function GetSecurityDescriptorOwner(pSecurityDescriptor: PSecurityDescriptor;var pOwner: PSID; var lpbOwnerDefaulted: BOOL): BOOL; stdcall;
function GetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR;var RMControl: UCHAR): DWORD; stdcall;
function GetSecurityDescriptorSacl(pSecurityDescriptor: PSecurityDescriptor;var lpbSaclPresent: BOOL; var pSacl: PACL; var lpbSaclDefaulted: BOOL): BOOL; stdcall;
function GetSecurityInfo(handle: THandle; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; ppsidOwner, ppsidGroup: PPSID; ppDacl, ppSacl: PACL;var ppSecurityDescriptor: PPSECURITY_DESCRIPTOR): DWORD; stdcall; {use localfree to release ppSecurityDescriptor}
function GetServiceDisplayNameA(hSCManager: SC_HANDLE; lpServiceName,lpDisplayName: PAnsiChar; var lpcchBuffer: DWORD): BOOL; stdcall;
function GetServiceDisplayNameW(hSCManager: SC_HANDLE; lpServiceName,lpDisplayName: PWideChar; var lpcchBuffer: DWORD): BOOL; stdcall;
function GetServiceKeyNameA(hSCManager: SC_HANDLE; lpDisplayName,lpServiceName: PAnsiChar; var lpcchBuffer: DWORD): BOOL; stdcall;
function GetServiceKeyNameW(hSCManager: SC_HANDLE; lpDisplayName,lpServiceName: PWideChar; var lpcchBuffer: DWORD): BOOL; stdcall;
function GetSidIdentifierAuthority(pSid: Pointer): PSIDIdentifierAuthority; stdcall;
function GetSidLengthRequired(nSubAuthorityCount: UCHAR): DWORD; stdcall;
function GetSidSubAuthority(pSid: Pointer; nSubAuthority: DWORD): PDWORD; stdcall;
function GetSidSubAuthorityCount(pSid: Pointer): PUCHAR; stdcall;
function GetTokenInformation(TokenHandle: THandle;TokenInformationClass: TTokenInformationClass; TokenInformation: Pointer;TokenInformationLength: DWORD; var ReturnLength: DWORD): BOOL; stdcall;
function GetTrusteeFormA(var pTrustee: TRUSTEE_A): TRUSTEE_FORM; stdcall;
function GetTrusteeFormW(var pTrustee: TRUSTEE_W): TRUSTEE_FORM; stdcall;
function GetTrusteeNameA(var pTrustee: TRUSTEE_A): PAnsiChar; stdcall;
function GetTrusteeNameW(var pTrustee: TRUSTEE_W): PAnsiChar; stdcall;
function GetTrusteeTypeA(var pTrustee: TRUSTEE_A): TRUSTEE_TYPE; stdcall;
function GetTrusteeTypeW(var pTrustee: TRUSTEE_W): TRUSTEE_TYPE; stdcall;
function GetUserNameA(lpBuffer: PAnsiChar; var nSize: DWORD): BOOL; stdcall;
function GetUserNameW(lpBuffer: PWideChar; var nSize: DWORD): BOOL; stdcall;
function GetWindowsAccountDomainSid(pSid, ppDomainSid: PSID; var cbSid: DWORD): BOOL; stdcall;
function ImpersonateAnonymousToken(ThreadHandle: HANDLE): BOOL; stdcall;
function ImpersonateLoggedOnUser(hToken: THandle): BOOL; stdcall;
function ImpersonateNamedPipeClient(hNamedPipe: THandle): BOOL; stdcall;
function ImpersonateSelf(ImpersonationLevel: TSecurityImpersonationLevel): BOOL; stdcall;
function InitializeAcl(var pAcl: TACL; nAclLength, dwAclRevision: DWORD): BOOL; stdcall;
function InitializeSecurityDescriptor(pSecurityDescriptor: PSecurityDescriptor;dwRevision: DWORD): BOOL; stdcall;
function InitializeSid(Sid: Pointer; const pIdentifierAuthority: TSIDIdentifierAuthority;nSubAuthorityCount: Byte): BOOL; stdcall;
function InitiateSystemShutdownA(lpMachineName, lpMessage: PAnsiChar;dwTimeout: DWORD; bForceAppsClosed, bRebootAfterShutdown: BOOL): BOOL; stdcall;
function InitiateSystemShutdownExA(lpMachineName: LPSTR; lpMessage: LPSTR;dwTimeout: DWORD; bForceAppsClosed, bRebootAfterShutdown: BOOL; dwReason: DWORD): BOOL; stdcall;
function InitiateSystemShutdownExW(lpMachineName: LPWSTR; lpMessage: LPWSTR;dwTimeout: DWORD; bForceAppsClosed, bRebootAfterShutdown: BOOL; dwReason: DWORD): BOOL; stdcall;
function InitiateSystemShutdownW(lpMachineName, lpMessage: PWideChar;dwTimeout: DWORD; bForceAppsClosed, bRebootAfterShutdown: BOOL): BOOL; stdcall;
function IsTextUnicode(lpBuffer: Pointer; cb: Integer; lpi: PINT): BOOL; stdcall;
function IsTokenRestricted(TokenHandle: HANDLE): BOOL; stdcall;
function IsTokenUntrusted(TokenHandle: HANDLE): BOOL; stdcall;
function IsValidAcl(const pAcl: TACL): BOOL; stdcall;
function IsValidSecurityDescriptor(pSecurityDescriptor: PSecurityDescriptor): BOOL; stdcall;
function IsValidSid(pSid: Pointer): BOOL; stdcall;
function IsWellKnownSid(pSid: PSID; WellKnownSidType: WELL_KNOWN_SID_TYPE): BOOL; stdcall;
function LockServiceDatabase(hSCManager: SC_HANDLE): SC_LOCK; stdcall;
function LogonUserA(lpszUsername, lpszDomain, lpszPassword: PAnsiChar;dwLogonType, dwLogonProvider: DWORD; var phToken: THandle): BOOL; stdcall;
function LogonUserExA(lpszUsername, lpszDomain, lpszPassword: LPCSTR;dwLogonType, dwLogonProvider: DWORD; var phToken: HANDLE; ppLogonSid: PPSID;ppProfileBuffer: PPVOID; pdwProfileLength: LPDWORD; pQuotaLimits: PQUOTA_LIMITS): BOOL; stdcall;
function LogonUserExW(lpszUsername, lpszDomain, lpszPassword: LPCWSTR;dwLogonType, dwLogonProvider: DWORD; var phToken: HANDLE; ppLogonSid: PPSID;ppProfileBuffer: PPVOID; pdwProfileLength: LPDWORD; pQuotaLimits: PQUOTA_LIMITS): BOOL; stdcall;
function LogonUserW(lpszUsername, lpszDomain, lpszPassword: PWideChar;dwLogonType, dwLogonProvider: DWORD; var phToken: THandle): BOOL; stdcall;
function LookupAccountNameA(lpSystemName, lpAccountName: PAnsiChar;Sid: PSID; var cbSid: DWORD; ReferencedDomainName: PAnsiChar;var cbReferencedDomainName: DWORD; var peUse: SID_NAME_USE): BOOL; stdcall;
function LookupAccountNameW(lpSystemName, lpAccountName: PWideChar;Sid: PSID; var cbSid: DWORD; ReferencedDomainName: PWideChar;var cbReferencedDomainName: DWORD; var peUse: SID_NAME_USE): BOOL; stdcall;
function LookupAccountSidA(lpSystemName: PAnsiChar; Sid: PSID;Name: PAnsiChar; var cbName: DWORD; ReferencedDomainName: PAnsiChar;var cbReferencedDomainName: DWORD; var peUse: SID_NAME_USE): BOOL; stdcall;
function LookupAccountSidW(lpSystemName: PWideChar; Sid: PSID;Name: PWideChar; var cbName: DWORD; ReferencedDomainName: PWideChar;var cbReferencedDomainName: DWORD; var peUse: SID_NAME_USE): BOOL; stdcall;
function LookupPrivilegeDisplayNameA(lpSystemName, lpName: PAnsiChar;lpDisplayName: PAnsiChar; var cbDisplayName, lpLanguageId: DWORD): BOOL; stdcall;
function LookupPrivilegeDisplayNameW(lpSystemName, lpName: PAnsiChar;lpDisplayName: PWideChar; var cbDisplayName, lpLanguageId: DWORD): BOOL; stdcall;
function LookupPrivilegeNameA(lpSystemName: PAnsiChar;var lpLuid: TLargeInteger; lpName: PAnsiChar; var cbName: DWORD): BOOL; stdcall;
function LookupPrivilegeNameW(lpSystemName: PWideChar;var lpLuid: TLargeInteger; lpName: PWideChar; var cbName: DWORD): BOOL; stdcall;
function LookupPrivilegeValueA(lpSystemName, lpName: PAnsiChar;var lpLuid: TLargeInteger): BOOL; stdcall;
function LookupPrivilegeValueW(lpSystemName, lpName: PWideChar;var lpLuid: TLargeInteger): BOOL; stdcall;
function LookupSecurityDescriptorPartsA(pOwner, pGroup: PTRUSTEE_A; cCountOfAccessEntries: PULONG;pListOfAccessEntries: PEXPLICIT_ACCESS_A; cCountOfAuditEntries: PULONG;pListOfAuditEntries: PEXPLICIT_ACCESS_A; var pSD: SECURITY_DESCRIPTOR): DWORD; stdcall;
function LookupSecurityDescriptorPartsW(pOwner, pGroup: PTRUSTEE_W; cCountOfAccessEntries: PULONG;pListOfAccessEntries: PEXPLICIT_ACCESS_W; cCountOfAuditEntries: PULONG;pListOfAuditEntries: PEXPLICIT_ACCESS_W; var pSD: SECURITY_DESCRIPTOR): DWORD; stdcall;
function LsaAddAccountRights(PolicyHandle: LSA_HANDLE; AccountSid: PSID;UserRights: PLSA_UNICODE_STRING; CountOfRights: ULONG): NTSTATUS; stdcall;
function LsaClose(ObjectHandle: LSA_HANDLE): NTSTATUS; stdcall;
function LsaCreateTrustedDomainEx(PolicyHandle: LSA_HANDLE;const TrustedDomainInformation: TRUSTED_DOMAIN_INFORMATION_EX;const AuthenticationInformation: TRUSTED_DOMAIN_AUTH_INFORMATION;DesiredAccess: ACCESS_MASK; var TrustedDomainHandle: LSA_HANDLE): NTSTATUS; stdcall;
function LsaDeleteTrustedDomain(PolicyHandle: LSA_HANDLE; TrustedDomainSid: PSID): NTSTATUS; stdcall;
function LsaEnumerateAccountRights(PolicyHandle: LSA_HANDLE; AccountSid: PSID;var UserRights: PLSA_UNICODE_STRING; var CountOfRights: ULONG): NTSTATUS; stdcall;
function LsaEnumerateAccountsWithUserRight(PolicyHandle: LSA_HANDLE;UserRights: PLSA_UNICODE_STRING; var EnumerationBuffer: PLSA_ENUMERATION_INFORMATION;var CountReturned: ULONG): NTSTATUS; stdcall;
function LsaEnumerateTrustedDomains(PolicyHandle: LSA_HANDLE;var EnumerationContext: LSA_ENUMERATION_HANDLE; Buffer: PPVOID;PreferedMaximumLength: ULONG; var CountReturned: ULONG): NTSTATUS; stdcall;
function LsaEnumerateTrustedDomainsEx(PolicyHandle: LSA_HANDLE;var EnumerationContext: LSA_ENUMERATION_HANDLE; Buffer: PPVOID;PreferedMaximumLength: ULONG; var CountReturned: ULONG): NTSTATUS; stdcall;
function LsaFreeMemory(Buffer: PVOID): NTSTATUS; stdcall;
function LsaLookupNames(PolicyHandle: LSA_HANDLE; Count: ULONG;Names: PLSA_UNICODE_STRING; var ReferencedDomains: PLSA_REFERENCED_DOMAIN_LIST;var Sids: PLSA_TRANSLATED_SID): NTSTATUS; stdcall;
function LsaLookupNames2(PolicyHandle: LSA_HANDLE; Flags, Count: ULONG; Names: PLSA_UNICODE_STRING;var ReferencedDomains: PLSA_REFERENCED_DOMAIN_LIST; var Sids: PLSA_TRANSLATED_SID2): NTSTATUS; stdcall;
function LsaLookupSids(PolicyHandle: LSA_HANDLE; Count: ULONG; Sids: PPSID;var ReferencedDomains: PLSA_REFERENCED_DOMAIN_LIST;var Names: PLSA_TRANSLATED_NAME): NTSTATUS; stdcall;
function LsaNtStatusToWinError(Status: NTSTATUS): ULONG; stdcall;
function LsaOpenPolicy(SystemName: PLSA_UNICODE_STRING;var ObjectAttributes: LSA_OBJECT_ATTRIBUTES; DesiredAccess: ACCESS_MASK;var PolicyHandle: LSA_HANDLE): NTSTATUS; stdcall;
function LsaOpenTrustedDomainByName(PolicyHandle: LSA_HANDLE;const TrustedDomainName: LSA_UNICODE_STRING; DesiredAccess: ACCESS_MASK;var TrustedDomainHandle: LSA_HANDLE): NTSTATUS; stdcall;
function LsaQueryDomainInformationPolicy(PolicyHandle: LSA_HANDLE;InformationClass: POLICY_DOMAIN_INFORMATION_CLASS; Buffer: PPVOID): NTSTATUS; stdcall;
function LsaQueryForestTrustInformation(PolicyHandle: LSA_HANDLE; TrustedDomainName: PLSA_UNICODE_STRING;var ForestTrustInfo: PLSA_FOREST_TRUST_INFORMATION): NTSTATUS; stdcall;
function LsaQueryInformationPolicy(PolicyHandle: LSA_HANDLE;InformationClass: POLICY_INFORMATION_CLASS; var Buffer: PVOID): NTSTATUS; stdcall;
function LsaQueryTrustedDomainInfo(PolicyHandle: LSA_HANDLE; TrustedDomainSid: PSID;InformationClass: TRUSTED_INFORMATION_CLASS; Buffer: PPVOID): NTSTATUS; stdcall;
function LsaQueryTrustedDomainInfoByName(PolicyHandle: LSA_HANDLE;const TrustedDomainName: LSA_UNICODE_STRING;InformationClass: TRUSTED_INFORMATION_CLASS; Buffer: PPVOID): NTSTATUS; stdcall;
function LsaRemoveAccountRights(PolicyHandle: LSA_HANDLE; AccountSid: PSID;AllRights: ByteBool; UserRights: PLSA_UNICODE_STRING; CountOfRights: ULONG): NTSTATUS; stdcall;
function LsaRetrievePrivateData(PolicyHandle: LSA_HANDLE;const KeyName: LSA_UNICODE_STRING; var PrivateData: PLSA_UNICODE_STRING): NTSTATUS; stdcall;
function LsaSetDomainInformationPolicy(PolicyHandle: LSA_HANDLE;InformationClass: POLICY_DOMAIN_INFORMATION_CLASS; Buffer: PVOID): NTSTATUS; stdcall;
function LsaSetForestTrustInformation(PolicyHandle: LSA_HANDLE; TrustedDomainName: PLSA_UNICODE_STRING;ForestTrustInfo: PLSA_FOREST_TRUST_INFORMATION; CheckOnly: BOOLEAN; var CollisionInfo: PLSA_FOREST_TRUST_COLLISION_INFORMATION): NTSTATUS; stdcall;
function LsaSetInformationPolicy(PolicyHandle: LSA_HANDLE;InformationClass: POLICY_INFORMATION_CLASS; Buffer: PVOID): NTSTATUS; stdcall;
function LsaSetTrustedDomainInfoByName(PolicyHandle: LSA_HANDLE;const TrustedDomainName: LSA_UNICODE_STRING;InformationClass: TRUSTED_INFORMATION_CLASS; Buffer: PVOID): NTSTATUS; stdcall;
function LsaSetTrustedDomainInformation(PolicyHandle: LSA_HANDLE; TrustedDomainSid: PSID;InformationClass: TRUSTED_INFORMATION_CLASS; Buffer: PVOID): NTSTATUS; stdcall;
function LsaStorePrivateData(PolicyHandle: LSA_HANDLE;const KeyName: LSA_UNICODE_STRING; PrivateData: PLSA_UNICODE_STRING): NTSTATUS; stdcall;
function MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: PSecurityDescriptor;pAbsoluteSecurityDescriptor: PSecurityDescriptor; var lpdwAbsoluteSecurityDescriptorSi: DWORD;var pDacl: TACL; var lpdwDaclSize: DWORD; var pSacl: TACL;var lpdwSaclSize: DWORD; pOwner: PSID; var lpdwOwnerSize: DWORD;pPrimaryGroup: Pointer; var lpdwPrimaryGroupSize: DWORD): BOOL; stdcall;
function MakeAbsoluteSD2(pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR;var lpdwBufferSize: DWORD): BOOL; stdcall;
function MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: PSecurityDescriptor;pSelfRelativeSecurityDescriptor: PSecurityDescriptor; var lpdwBufferLength: DWORD): BOOL; stdcall;
procedure MapGenericMask(var AccessMask: DWORD; const GenericMapping: TGenericMapping); stdcall;
function NotifyBootConfigStatus(BootAcceptable: BOOL): BOOL; stdcall;
function NotifyChangeEventLog(hEventLog, hEvent: THandle): BOOL; stdcall;
function ObjectCloseAuditAlarmA(SubsystemName: PAnsiChar;HandleId: Pointer; GenerateOnClose: BOOL): BOOL; stdcall;
function ObjectCloseAuditAlarmW(SubsystemName: PWideChar;HandleId: Pointer; GenerateOnClose: BOOL): BOOL; stdcall;
function ObjectDeleteAuditAlarmA(SubsystemName: PAnsiChar;HandleId: Pointer; GenerateOnClose: BOOL): BOOL; stdcall;
function ObjectDeleteAuditAlarmW(SubsystemName: PWideChar;HandleId: Pointer; GenerateOnClose: BOOL): BOOL; stdcall;
function ObjectOpenAuditAlarmA(SubsystemName: PAnsiChar; HandleId: Pointer;ObjectTypeName: PAnsiChar; ObjectName: PAnsiChar; pSecurityDescriptor: PSecurityDescriptor;ClientToken: THandle; DesiredAccess, GrantedAccess: DWORD;var Privileges: TPrivilegeSet; ObjectCreation, AccessGranted: BOOL;var GenerateOnClose: BOOL): BOOL; stdcall;
function ObjectOpenAuditAlarmW(SubsystemName: PWideChar; HandleId: Pointer;ObjectTypeName: PWideChar; ObjectName: PWideChar; pSecurityDescriptor: PSecurityDescriptor;ClientToken: THandle; DesiredAccess, GrantedAccess: DWORD;var Privileges: TPrivilegeSet; ObjectCreation, AccessGranted: BOOL;var GenerateOnClose: BOOL): BOOL; stdcall;
function ObjectPrivilegeAuditAlarmA(SubsystemName: PAnsiChar;HandleId: Pointer; ClientToken: THandle; DesiredAccess: DWORD;var Privileges: TPrivilegeSet; AccessGranted: BOOL): BOOL; stdcall;
function ObjectPrivilegeAuditAlarmW(SubsystemName: PWideChar;HandleId: Pointer; ClientToken: THandle; DesiredAccess: DWORD;var Privileges: TPrivilegeSet; AccessGranted: BOOL): BOOL; stdcall;
function OpenBackupEventLogA(lpUNCServerName, lpFileName: PAnsiChar): THandle; stdcall;
function OpenBackupEventLogW(lpUNCServerName, lpFileName: PWideChar): THandle; stdcall;
function OpenEncryptedFileRawA(lpFileName: LPCSTR; ulFlags: ULONG;pvContext: PVOID): DWORD; stdcall;
function OpenEncryptedFileRawW(lpFileName: LPCWSTR; ulFlags: ULONG;pvContext: PVOID): DWORD; stdcall;
function OpenEventLogA(lpUNCServerName, lpSourceName: PAnsiChar): THandle; stdcall;
function OpenEventLogW(lpUNCServerName, lpSourceName: PWideChar): THandle; stdcall;
function OpenProcessToken(ProcessHandle: THandle; DesiredAccess: DWORD;var TokenHandle: THandle): BOOL; stdcall;
function OpenSCManagerA(lpMachineName, lpDatabaseName: PAnsiChar;dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
function OpenSCManagerW(lpMachineName, lpDatabaseName: PWideChar;dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
function OpenServiceA(hSCManager: SC_HANDLE; lpServiceName: PAnsiChar;dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
function OpenServiceW(hSCManager: SC_HANDLE; lpServiceName: PWideChar;dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
function OpenThreadToken(ThreadHandle: THandle; DesiredAccess: DWORD;OpenAsSelf: BOOL; var TokenHandle: THandle): BOOL; stdcall;
function PrivilegeCheck(ClientToken: THandle; const RequiredPrivileges: TPrivilegeSet;var pfResult: BOOL): BOOL; stdcall;
function PrivilegedServiceAuditAlarmA(SubsystemName, ServiceName: PAnsiChar;ClientToken: THandle; var Privileges: TPrivilegeSet; AccessGranted: BOOL): BOOL; stdcall;
function PrivilegedServiceAuditAlarmW(SubsystemName, ServiceName: PWideChar;ClientToken: THandle; var Privileges: TPrivilegeSet; AccessGranted: BOOL): BOOL; stdcall;
function QueryRecoveryAgentsOnEncryptedFile(lpFileName: LPCWSTR;var pRecoveryAgents: PENCRYPTION_CERTIFICATE_HASH_LIST): DWORD; stdcall;
function QueryServiceConfig2A(hService: SC_HANDLE; dwInfoLevel: DWORD;lpBuffer: LPBYTE; cbBufSize: DWORD; var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceConfig2W(hService: SC_HANDLE; dwInfoLevel: DWORD;lpBuffer: LPBYTE; cbBufSize: DWORD; var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceConfigA(hService: SC_HANDLE;lpServiceConfig: PQueryServiceConfigA; cbBufSize: DWORD;var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceConfigW(hService: SC_HANDLE;lpServiceConfig: PQueryServiceConfigW; cbBufSize: DWORD;var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceLockStatusA(hSCManager: SC_HANDLE;var lpLockStatus: TQueryServiceLockStatusA; cbBufSize: DWORD;var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceLockStatusW(hSCManager: SC_HANDLE;var lpLockStatus: TQueryServiceLockStatusW; cbBufSize: DWORD;var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceObjectSecurity(hService: SC_HANDLE;dwSecurityInformation: SECURITY_INFORMATION;lpSecurityDescriptor: PSECURITY_DESCRIPTOR; cbBufSize: DWORD;var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryServiceStatus(hService: SC_HANDLE; varlpServiceStatus: TServiceStatus): BOOL; stdcall;
function QueryServiceStatusEx(hService: SC_HANDLE; InfoLevel: SC_STATUS_TYPE;lpBuffer: LPBYTE; cbBufSize: DWORD; var pcbBytesNeeded: DWORD): BOOL; stdcall;
function QueryUsersOnEncryptedFile(lpFileName: LPCWSTR;var pUsers: PENCRYPTION_CERTIFICATE_HASH_LIST): DWORD; stdcall;
function ReadEncryptedFileRaw(pfExportCallback: PFE_EXPORT_FUNC;pvCallbackContext: PVOID; pvContext: PVOID): DWORD; stdcall;
function ReadEventLogA(hEventLog: THandle; dwReadFlags, dwRecordOffset: DWORD;lpBuffer: Pointer; nNumberOfBytesToRead: DWORD;var pnBytesRead, pnMinNumberOfBytesNeeded: DWORD): BOOL; stdcall;
function ReadEventLogW(hEventLog: THandle; dwReadFlags, dwRecordOffset: DWORD;lpBuffer: Pointer; nNumberOfBytesToRead: DWORD;var pnBytesRead, pnMinNumberOfBytesNeeded: DWORD): BOOL; stdcall;
function RegCloseKey(hKey: HKEY): Longint; stdcall;
function RegConnectRegistryA(lpMachineName: PAnsiChar; hKey: HKEY;var phkResult: HKEY): Longint; stdcall;
function RegConnectRegistryW(lpMachineName: PWideChar; hKey: HKEY;var phkResult: HKEY): Longint; stdcall;
function RegCreateKeyA(hKey: HKEY; lpSubKey: PAnsiChar;var phkResult: HKEY): Longint; stdcall;
function RegCreateKeyExA(hKey: HKEY; lpSubKey: PAnsiChar;Reserved: DWORD; lpClass: PAnsiChar; dwOptions: DWORD; samDesired: REGSAM;lpSecurityAttributes: PSecurityAttributes; var phkResult: HKEY;lpdwDisposition: PDWORD): Longint; stdcall;
function RegCreateKeyExW(hKey: HKEY; lpSubKey: PWideChar;Reserved: DWORD; lpClass: PWideChar; dwOptions: DWORD; samDesired: REGSAM;lpSecurityAttributes: PSecurityAttributes; var phkResult: HKEY;lpdwDisposition: PDWORD): Longint; stdcall;
function RegCreateKeyW(hKey: HKEY; lpSubKey: PWideChar;var phkResult: HKEY): Longint; stdcall;
function RegDeleteKeyA(hKey: HKEY; lpSubKey: PAnsiChar): Longint; stdcall;
function RegDeleteKeyW(hKey: HKEY; lpSubKey: PWideChar): Longint; stdcall;
function RegDeleteValueA(hKey: HKEY; lpValueName: PAnsiChar): Longint; stdcall;
function RegDeleteValueW(hKey: HKEY; lpValueName: PWideChar): Longint; stdcall;
function RegDisablePredefinedCache: Longint; stdcall;
function RegEnumKeyA(hKey: HKEY; dwIndex: DWORD; lpName: PAnsiChar; cbName: DWORD): Longint; stdcall;
function RegEnumKeyExA(hKey: HKEY; dwIndex: DWORD; lpName: PAnsiChar;var lpcbName: DWORD; lpReserved: Pointer; lpClass: PAnsiChar;lpcbClass: PDWORD; lpftLastWriteTime: PFileTime): Longint; stdcall;
function RegEnumKeyExW(hKey: HKEY; dwIndex: DWORD; lpName: PWideChar;var lpcbName: DWORD; lpReserved: Pointer; lpClass: PWideChar;lpcbClass: PDWORD; lpftLastWriteTime: PFileTime): Longint; stdcall;
function RegEnumKeyW(hKey: HKEY; dwIndex: DWORD; lpName: PWideChar; cbName: DWORD): Longint; stdcall;
function RegEnumValueA(hKey: HKEY; dwIndex: DWORD; lpValueName: PAnsiChar;var lpcbValueName: DWORD; lpReserved: Pointer; lpType: PDWORD;lpData: PByte; lpcbData: PDWORD): Longint; stdcall;
function RegEnumValueW(hKey: HKEY; dwIndex: DWORD; lpValueName: PWideChar;var lpcbValueName: DWORD; lpReserved: Pointer; lpType: PDWORD;lpData: PByte; lpcbData: PDWORD): Longint; stdcall;
function RegFlushKey(hKey: HKEY): Longint; stdcall;
function RegGetKeySecurity(hKey: HKEY; SecurityInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSecurityDescriptor; var lpcbSecurityDescriptor: DWORD): Longint; stdcall;
function RegisterEventSourceA(lpUNCServerName, lpSourceName: PAnsiChar): THandle; stdcall;
function RegisterEventSourceW(lpUNCServerName, lpSourceName: PWideChar): THandle; stdcall;
function RegisterServiceCtrlHandlerA(lpServiceName: PAnsiChar;lpHandlerProc: ThandlerFunction): SERVICE_STATUS_HANDLE; stdcall;
function RegisterServiceCtrlHandlerExA(lpServiceName: LPCSTR;lpHandlerProc: LPHANDLER_FUNCTION_EX; lpContext: LPVOID): SERVICE_STATUS_HANDLE; stdcall;
function RegisterServiceCtrlHandlerExW(lpServiceName: LPCWSTR;lpHandlerProc: LPHANDLER_FUNCTION_EX; lpContext: LPVOID): SERVICE_STATUS_HANDLE; stdcall;
function RegisterServiceCtrlHandlerW(lpServiceName: PWideChar;lpHandlerProc: ThandlerFunction): SERVICE_STATUS_HANDLE; stdcall;
function RegLoadKeyA(hKey: HKEY; lpSubKey, lpFile: PAnsiChar): Longint; stdcall;
function RegLoadKeyW(hKey: HKEY; lpSubKey, lpFile: PWideChar): Longint; stdcall;
function RegNotifyChangeKeyValue(hKey: HKEY; bWatchSubtree: BOOL;dwNotifyFilter: DWORD; hEvent: THandle; fAsynchronus: BOOL): Longint; stdcall;
function RegOpenCurrentUser(samDesired: REGSAM; out phkResult: HKEY): Longint; stdcall;
function RegOpenKeyA(hKey: HKEY; lpSubKey: PAnsiChar; var phkResult: HKEY): Longint; stdcall;
function RegOpenKeyExA(hKey: HKEY; lpSubKey: PAnsiChar;ulOptions: DWORD; samDesired: REGSAM; var phkResult: HKEY): Longint; stdcall;
function RegOpenKeyExW(hKey: HKEY; lpSubKey: PWideChar;ulOptions: DWORD; samDesired: REGSAM; var phkResult: HKEY): Longint; stdcall;
function RegOpenKeyW(hKey: HKEY; lpSubKey: PWideChar; var phkResult: HKEY): Longint; stdcall;
function RegOpenUserClassesRoot(hToken: THandle; dwOptions: DWORD;samDesired: REGSAM; out phkResult: HKEY): Longint; stdcall;
function RegOverridePredefKey (hKey, hNewHKey: HKEY): Longint; stdcall;
function RegQueryInfoKeyA(hKey: HKEY; lpClass: PAnsiChar;lpcbClass: PDWORD; lpReserved: Pointer;lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues,lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor: PDWORD;lpftLastWriteTime: PFileTime): Longint; stdcall;
function RegQueryInfoKeyW(hKey: HKEY; lpClass: PWideChar;lpcbClass: PDWORD; lpReserved: Pointer;lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues,lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor: PDWORD;lpftLastWriteTime: PFileTime): Longint; stdcall;
function RegQueryMultipleValuesA(hKey: HKEY; ValList: Pointer; NumVals: DWORD; lpValueBuf: PAnsiChar; var ldwTotsize: DWORD): Longint; stdcall;
function RegQueryMultipleValuesW(hKey: HKEY; ValList: Pointer; NumVals: DWORD; lpValueBuf: PWideChar; var ldwTotsize: DWORD): Longint; stdcall;
function RegQueryValueA(hKey: HKEY; lpSubKey: PAnsiChar;lpValue: PAnsiChar; var lpcbValue: Longint): Longint; stdcall;
function RegQueryValueExA(hKey: HKEY; lpValueName: PAnsiChar;lpReserved: Pointer; lpType: PDWORD; lpData: PByte; lpcbData: PDWORD): Longint; stdcall;
function RegQueryValueExW(hKey: HKEY; lpValueName: PWideChar;lpReserved: Pointer; lpType: PDWORD; lpData: PByte; lpcbData: PDWORD): Longint; stdcall;
function RegQueryValueW(hKey: HKEY; lpSubKey: PWideChar;lpValue: PWideChar; var lpcbValue: Longint): Longint; stdcall;
function RegReplaceKeyA(hKey: HKEY; lpSubKey: PAnsiChar;lpNewFile: PAnsiChar; lpOldFile: PAnsiChar): Longint; stdcall;
function RegReplaceKeyW(hKey: HKEY; lpSubKey: PWideChar;lpNewFile: PWideChar; lpOldFile: PWideChar): Longint; stdcall;
function RegRestoreKeyA(hKey: HKEY; lpFile: PAnsiChar; dwFlags: DWORD): Longint; stdcall;
function RegRestoreKeyW(hKey: HKEY; lpFile: PWideChar; dwFlags: DWORD): Longint; stdcall;
function RegSaveKeyA(hKey: HKEY; lpFile: PAnsiChar;lpSecurityAttributes: PSecurityAttributes): Longint; stdcall;
function RegSaveKeyExA(hKey: HKEY; lpFile: LPCSTR;lpSecurityAttributes: LPSECURITY_ATTRIBUTES; Flags: DWORD): LONG; stdcall;
function RegSaveKeyExW(hKey: HKEY; lpFile: LPCWSTR;lpSecurityAttributes: LPSECURITY_ATTRIBUTES; Flags: DWORD): LONG; stdcall;
function RegSaveKeyW(hKey: HKEY; lpFile: PWideChar;lpSecurityAttributes: PSecurityAttributes): Longint; stdcall;
function RegSetKeySecurity(hKey: HKEY; SecurityInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSECURITY_DESCRIPTOR): Longint; stdcall;
function RegSetValueA(hKey: HKEY; lpSubKey: PAnsiChar;dwType: DWORD; lpData: PAnsiChar; cbData: DWORD): Longint; stdcall;
function RegSetValueExA(hKey: HKEY; lpValueName: PAnsiChar;Reserved: DWORD; dwType: DWORD; lpData: Pointer; cbData: DWORD): Longint; stdcall;
function RegSetValueExW(hKey: HKEY; lpValueName: PWideChar;Reserved: DWORD; dwType: DWORD; lpData: Pointer; cbData: DWORD): Longint; stdcall;
function RegSetValueW(hKey: HKEY; lpSubKey: PWideChar;dwType: DWORD; lpData: PWideChar; cbData: DWORD): Longint; stdcall;
function RegUnLoadKeyA(hKey: HKEY; lpSubKey: PAnsiChar): Longint; stdcall;
function RegUnLoadKeyW(hKey: HKEY; lpSubKey: PWideChar): Longint; stdcall;
function RemoveUsersFromEncryptedFile(lpFileName: LPCWSTR;pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST): DWORD; stdcall;
function ReportEventA(hEventLog: THandle; wType, wCategory: Word;dwEventID: DWORD; lpUserSid: Pointer; wNumStrings: Word;dwDataSize: DWORD; lpStrings, lpRawData: Pointer): BOOL; stdcall;
function ReportEventW(hEventLog: THandle; wType, wCategory: Word;dwEventID: DWORD; lpUserSid: Pointer; wNumStrings: Word;dwDataSize: DWORD; lpStrings, lpRawData: Pointer): BOOL; stdcall;
function RevertToSelf: BOOL; stdcall;
function SaferCloseLevel(hLevelHandle: SAFER_LEVEL_HANDLE): BOOL; stdcall;
function SaferComputeTokenFromLevel(LevelHandle: SAFER_LEVEL_HANDLE; InAccessToken: HANDLE; OutAccessToken: PHANDLE;dwFlags: DWORD; lpReserved: LPVOID): BOOL; stdcall;
function SaferCreateLevel(dwScopeId, dwLevelId, OpenFlags: DWORD; pLevelHandle: PSAFER_LEVEL_HANDLE; lpReserved: LPVOID): BOOL; stdcall;
function SaferGetLevelInformation(LevelHandle: SAFER_LEVEL_HANDLE; dwInfoType: SAFER_OBJECT_INFO_CLASS;lpQueryBuffer: LPVOID; dwInBufferSize: DWORD; var lpdwOutBufferSize: DWORD): BOOL; stdcall;
function SaferGetPolicyInformation(dwScopeId: DWORD; SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS;InfoBufferSize: DWORD; InfoBuffer: PVOID; var InfoBufferRetSize: DWORD; lpReserved: LPVOID): BOOL; stdcall;
function SaferIdentifyLevel(dwNumProperties: DWORD; pCodeProperties: PSAFER_CODE_PROPERTIES;var pLevelHandle: SAFER_LEVEL_HANDLE; lpReserved: LPVOID): BOOL; stdcall;
function SaferiIsExecutableFileType(szFullPathname: LPCWSTR; bFromShellExecute: BOOL): BOOL; stdcall;
function SaferRecordEventLogEntry(hLevel: SAFER_LEVEL_HANDLE; szTargetPath: LPCWSTR; lpReserved: LPVOID): BOOL; stdcall;
function SaferSetLevelInformation(LevelHandle: SAFER_LEVEL_HANDLE; dwInfoType: SAFER_OBJECT_INFO_CLASS;lpQueryBuffer: LPVOID; dwInBufferSize: DWORD): BOOL; stdcall;
function SaferSetPolicyInformation(dwScopeId: DWORD; SaferPolicyInfoClass: SAFER_POLICY_INFO_CLASS;InfoBufferSize: DWORD; InfoBuffer: PVOID; lpReserved: LPVOID): BOOL; stdcall;
function SetAclInformation(var pAcl: TACL; pAclInformation: Pointer;nAclInformationLength: DWORD; dwAclInformationClass: TAclInformationClass): BOOL; stdcall;
function SetEntriesInAclA(cCountOfExplicitEntries: ULONG; pListOfExplicitEntries: PEXPLICIT_ACCESS_A;OldAcl: PACL; var NewAcl: PACL): DWORD; stdcall; {use localfree to release NewAcl}
function SetEntriesInAclW(cCountOfExplicitEntries: ULONG; pListOfExplicitEntries: PEXPLICIT_ACCESS_W;OldAcl: PACL; var NewAcl: PACL): DWORD; stdcall; {use localfree to release NewAcl}
function SetFileSecurityA(lpFileName: PAnsiChar; SecurityInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSecurityDescriptor): BOOL; stdcall;
function SetFileSecurityW(lpFileName: PWideChar; SecurityInformation: SECURITY_INFORMATION;pSecurityDescriptor: PSecurityDescriptor): BOOL; stdcall;
function SetKernelObjectSecurity(Handle: THandle; SecurityInformation: SECURITY_INFORMATION;SecurityDescriptor: PSecurityDescriptor): BOOL; stdcall;
function SetNamedSecurityInfoA(pObjectName: PAnsiChar; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; ppsidOwner, ppsidGroup: PPSID;ppDacl, ppSacl: PACL): DWORD; stdcall;
function SetNamedSecurityInfoW(pObjectName: PAnsiChar; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; ppsidOwner, ppsidGroup: PPSID;ppDacl, ppSacl: PACL): DWORD; stdcall;
function SetPrivateObjectSecurity(SecurityInformation: SECURITY_INFORMATION;ModificationDescriptor: PSecurityDescriptor; var ObjectsSecurityDescriptor: PSecurityDescriptor;const GenericMapping: TGenericMapping; Token: THandle): BOOL; stdcall;
function SetPrivateObjectSecurityEx(SecurityInformation: SECURITY_INFORMATION;ModificationDescriptor: PSecurityDescriptor; var ObjectsSecurityDescriptor: PSecurityDescriptor;AutoInheritFlags: ULONG; const GenericMapping: TGenericMapping; Token: THandle): BOOL; stdcall;
function SetSecurityDescriptorControl(pSecurityDescriptor: PSecurityDescriptor;ControlBitsOfInterest, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL): BOOL; stdcall;
function SetSecurityDescriptorDacl(pSecurityDescriptor: PSecurityDescriptor;bDaclPresent: BOOL; pDacl: PACL; bDaclDefaulted: BOOL): BOOL; stdcall;
function SetSecurityDescriptorGroup(pSecurityDescriptor: PSecurityDescriptor;pGroup: PSID; bGroupDefaulted: BOOL): BOOL; stdcall;
function SetSecurityDescriptorOwner(pSecurityDescriptor: PSecurityDescriptor;pOwner: PSID; bOwnerDefaulted: BOOL): BOOL; stdcall;
function SetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR;RMControl: PUCHAR): DWORD; stdcall;
function SetSecurityDescriptorSacl(pSecurityDescriptor: PSecurityDescriptor;bSaclPresent: BOOL; pSacl: PACL; bSaclDefaulted: BOOL): BOOL; stdcall;
function SetSecurityInfo(handle: THandle; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; ppsidOwner, ppsidGroup: PPSID;ppDacl, ppSacl: PACL): DWORD; stdcall;
function SetServiceObjectSecurity(hService: SC_HANDLE;dwSecurityInformation: SECURITY_INFORMATION;lpSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL; stdcall;
function SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE;var lpServiceStatus: TServiceStatus): BOOL; stdcall;
function SetThreadToken(Thread: PHandle; Token: THandle): BOOL; stdcall;
function SetTokenInformation(TokenHandle: THandle;TokenInformationClass: TTokenInformationClass; TokenInformation: Pointer;TokenInformationLength: DWORD): BOOL; stdcall;
function SetUserFileEncryptionKey(pEncryptionCertificate: PENCRYPTION_CERTIFICATE): DWORD; stdcall;
function StartServiceA(hService: SC_HANDLE; dwNumServiceArgs: DWORD;var lpServiceArgVectors: PAnsiChar): BOOL; stdcall;
function StartServiceCtrlDispatcherA(var lpServiceStartTable: TServiceTableEntryA): BOOL; stdcall;
function StartServiceCtrlDispatcherW(var lpServiceStartTable: TServiceTableEntryW): BOOL; stdcall;
function StartServiceW(hService: SC_HANDLE; dwNumServiceArgs: DWORD;var lpServiceArgVectors: PWideChar): BOOL; stdcall;
function TreeResetNamedSecurityInfoA(pObjectName: LPSTR; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; pOwner, pGroup: PSID; pDacl, pSacl: PACL;KeepExplicit: BOOL; fnProgress: FN_PROGRESS; ProgressInvokeSetting: PROG_INVOKE_SETTING;Args: PVOID): DWORD; stdcall;
function TreeResetNamedSecurityInfoW(pObjectName: LPWSTR; ObjectType: SE_OBJECT_TYPE;SecurityInfo: SECURITY_INFORMATION; pOwner, pGroup: PSID; pDacl, pSacl: PACL;KeepExplicit: BOOL; fnProgress: FN_PROGRESS; ProgressInvokeSetting: PROG_INVOKE_SETTING;Args: PVOID): DWORD; stdcall;
function UnlockServiceDatabase(ScLock: SC_LOCK): BOOL; stdcall;
function Wow64Win32ApiEntry(dwFuncNumber, dwFlag, dwRes: DWORD): LONG; stdcall;{$EXTERNALSYM Wow64Win32ApiEntry}implementationconstadvapi32 = 'advapi32.dll';{$IFDEF UNICODE}AWSuffix = 'W';{$ELSE}AWSuffix = 'A';{$ENDIF UNICODE}typeTRegNotifyChangeKeyValue = function(hKey: HKEY; bWatchSubtree: LongBool; dwNotifyFilter: DWORD; hEvent: HANDLE; fAsynchronus: LongBool): LONG; stdcall;
function WriteEncryptedFileRaw(pfImportCallback: PFE_IMPORT_FUNC;pvCallbackContext: PVOID; pvContext: PVOID): DWORD; stdcall;
