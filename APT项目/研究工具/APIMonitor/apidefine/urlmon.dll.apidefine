function CoGetClassObjectFromURL(const rCLASSID: TCLSID; szCODE: LPCWSTR;dwFileVersionMS, dwFileVersionLS: DWORD; szTYPE: LPCWSTR; pBindCtx: IBindCtx; dwClsContext: DWORD;pvReserved: Pointer; const riid: TGUID; out ppv): HResult; stdcall;
function CoInternetCombineUrl(pwzBaseUrl, pwzRelativeUrl: LPCWSTR;dwCombineFlags: DWORD; pszResult: LPWSTR; cchResult: DWORD;var pcchResult: DWORD; dwReserved: DWORD): HResult ; stdcall;
function CoInternetCompareUrl(pwzUrl1, pwzUrl2: LPCWSTR; dwFlags: DWORD): HResult; stdcall;
function CoInternetCreateSecurityManager(SP: IServiceProvider; var SM: IInternetSecurityManager;dwReserved: DWORD): HResult; stdcall;
function CoInternetCreateZoneManager(SP: IServiceProvider; var ZM: IInternetZoneManager;dwReserved: DWORD): HResult; stdcall;
function CoInternetGetProtocolFlags(pwzUrl: LPCWSTR; var dwFlags: DWORD;dwReserved: DWORD): HResult; stdcall;
function CoInternetGetSecurityUrl(pwzUrl: LPCWSTR; var pwzSecUrl: LPWSTR; psuAction: TPSUAction;dwReserved: DWORD): HResult; stdcall;
function CoInternetGetSession(dwSessionMode: DWORD; var pIInternetSession: IInternetSession;dwReserved: DWORD): HResult; stdcall;
function CoInternetParseUrl(pwzUrl: LPCWSTR; ParseAction: TParseAction;dwFlags: DWORD; pszResult: LPWSTR; cchResult: DWORD; var pcchResult: DWORD;dwReserved: DWORD): HResult; stdcall;
function CoInternetQueryInfo(pwzUrl: LPCWSTR; QueryOptions: TQueryOption; dwQueryFlags: DWORD;pvBuffer: Pointer; cbBuffer: DWORD; var pcbBuffer: DWORD; dwReserved: DWORD): HResult; stdcall;
function CopyBindInfo(const cbiSrc: TBindInfo; var biDest: TBindInfo): HResult; stdcall;
function CopyStgMedium(const cstgmedSrc: TStgMedium; var stgmedDest: TStgMedium): HResult; stdcall;
function CreateAsyncBindCtx(reserved: DWORD; pBSCb: IBindStatusCallback; pEFetc: IEnumFORMATETC;out ppBC: IBindCtx): HResult; stdcall;
function CreateAsyncBindCtxEx(pbc: IBindCtx; dwOptions: DWORD; BSCb: IBindStatusCallback; Enum: IEnumFORMATETC;out ppBC: IBindCtx; reserved: DWORD): HResult; stdcall;
function CreateFormatEnumerator(cfmtetc: UINT; const rgfmtetc: TFormatEtc; out ppenumfmtetc: IEnumFormatEtc): HResult; stdcall;
function CreateURLBinding(lpszUrl: LPCWSTR; pbc: IBindCtx; out ppBdg: IBinding): HResult; stdcall;
function CreateURLMoniker(MkCtx: IMoniker; szURL: LPCWSTR; out mk: IMoniker): HResult; stdcall;
function FindMediaType(rgszTypes: LPCSTR; rgcfTypes: PClipFormat): HResult; stdcall;
function FindMediaTypeClass(pBC: IBindCtx; szType: LPCSTR; const pclsID: TCLSID; reserved: DWORD): HResult; stdcall;
function GetClassFileOrMime(pBC: IBindCtx; szFilename: LPCWSTR; pBuffer: Pointer; cbSize: DWORD;szMime: LPCWSTR; dwReserved: DWORD; out pclsid: TCLSID): HResult; stdcall;
function GetClassURL(szURL: LPCWSTR; const ClsID: TCLSID): HResult; stdcall;
function GetSoftwareUpdateInfo(szDistUnit: LPCWSTR; var dsi: TSoftDistInfo): HResult; stdcall;
function HlinkGoBack(unk: IUnknown): HResult; stdcall;
function HlinkGoForward(unk: IUnknown): HResult; stdcall;
function HlinkNavigateMoniker(Unk: IUnknown; mkTarget: IMoniker): HResult; stdcall;
function HlinkNavigateString(unk: IUnknown; szTarget: LPCWSTR): HResult; stdcall;
function IsAsyncMoniker(pmk: IMoniker): HResult; stdcall;
function IsLoggingEnabledA(pszUrl: PAnsiChar): BOOL; stdcall;
function IsLoggingEnabledW(pszUrl: PWideChar): BOOL; stdcall;
function IsValidURL(pBC: IBindCtx; szURL: LPCWSTR; dwReserved: DWORD): HResult; stdcall;
function MkParseDisplayNameEx(pbc: IBindCtx; szDisplayName: LPCWSTR; out pchEaten: ULONG;out ppmk: IMoniker): HResult; stdcall;
function ObtainUserAgentString(dwOption: DWORD; pszUAOut: LPSTR; var cbSize: DWORD): HResult; stdcall;
function OInetGetProtocolFlags(pwzUrl: LPCWSTR; var dwFlags: DWORD;dwReserved: DWORD): HResult; stdcall;
function OInetGetSecurityUrl(pwzUrl: LPCWSTR; var pwzSecUrl: LPWSTR; psuAction: TPSUAction;dwReserved: DWORD): HResult; stdcall;
function RegisterBindStatusCallback(pBC: IBindCtx; pBSCb: IBindStatusCallback;out ppBSCBPrev: IBindStatusCallback; dwReserved: DWORD): HResult; stdcall;
function RegisterFormatEnumerator(pBC: IBindCtx; pEFetc: IEnumFormatEtc; reserved: DWORD): HResult; stdcall;
function RegisterMediaTypeClass(pBC: IBindCtx; ctypes: UINT; const rgszTypes: LPCSTR; rgclsID: PCLSID; reserved: DWORD): HResult; stdcall;
function RegisterMediaTypes(ctypes: UINT; const rgszTypes: LPCSTR; const rgcfTypes: TClipFormat): HResult; stdcall;
procedure ReleaseBindInfo(const bindinfo: TBindInfo); stdcall;
function RevokeBindStatusCallback(pBC: IBindCtx; pBSCb: IBindStatusCallback): HResult; stdcall;
function RevokeFormatEnumerator(pBC: IBindCtx; pEFetc: IEnumFormatEtc): HResult; stdcall;
function SetSoftwareUpdateAdvertisementState(szDistUnit: LPCWSTR;dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS: DWORD): HResult; stdcall;
function URLDownloadToCacheFileA(p1: IUnknown; p2: PAnsiChar; p3: PAnsiChar; p4: DWORD; p5: DWORD; p6: IBindStatusCallback): HResult; stdcall;
function URLDownloadToCacheFileW(p1: IUnknown; p2: PWideChar; p3: PWideChar; p4: DWORD; p5: DWORD; p6: IBindStatusCallback): HResult; stdcall;
function URLDownloadToFileA(Caller: IUnknown; URL: PAnsiChar; FileName: PAnsiChar; Reserved: DWORD; StatusCB: IBindStatusCallback): HResult; stdcall;
function URLDownloadToFileW(Caller: IUnknown; URL: PWideChar; FileName: PWideChar; Reserved: DWORD; StatusCB: IBindStatusCallback): HResult; stdcall;
function UrlMkGetSessionOption(dwOption: DWORD; pBuffer: Pointer; dwBufferLength: DWORD; out pdwBufferLength: DWORD; dwReserved: DWORD): HResult; stdcall;
function UrlMkSetSessionOption(dwOption: DWORD; pBuffer: Pointer; dwBufferLength, dwReserved: DWORD): HResult; stdcall;
function URLOpenBlockingStreamA(p1: IUnknown; p2: PAnsiChar; out p3: IStream; p4: DWORD; p5: IBindStatusCallback): HResult; stdcall;
function URLOpenBlockingStreamW(p1: IUnknown; p2: PWideChar; out p3: IStream; p4: DWORD; p5: IBindStatusCallback): HResult; stdcall;
function URLOpenPullStreamA(p1: IUnknown; p2: PAnsiChar; p3: DWORD; BSC: IBindStatusCallback): HResult; stdcall;
function URLOpenPullStreamW(p1: IUnknown; p2: PWideChar; p3: DWORD; BSC: IBindStatusCallback): HResult; stdcall;
function URLOpenStreamA(p1: IUnknown; p2: PAnsiChar; p3: DWORD; p4: IBindStatusCallback): HResult; stdcall;
function URLOpenStreamW(p1: IUnknown; p2: PWideChar; p3: DWORD; p4: IBindStatusCallback): HResult; stdcall;
function WriteHitLogging(const Logginginfo: THitLoggingInfo): BOOL; stdcall;
