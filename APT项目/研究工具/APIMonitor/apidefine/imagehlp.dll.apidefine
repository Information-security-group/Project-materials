function BindImage(ImageName, DllPath, SymbolPath: LPSTR): Bool; stdcall;
function BindImageEx(Flags: DWORD; ImageName, DllPath, SymbolPath: LPSTR;var StatusRoutine: TImagehlpStatusRoutine): Bool; stdcall;
function CheckSumMappedFile(BaseAddress: Pointer; FileLength: DWORD;HeaderSum: PDWORD; CheckSum: PDWORD): PImageNtHeaders; stdcall;
function DbgHelpCreateUserDump(FileName: LPSTR; Callback: PDBGHELP_CREATE_USER_DUMP_CALLBACK; UserData: PVOID): BOOL; stdcall;
function DbgHelpCreateUserDumpW(FileName: LPWSTR; Callback: PDBGHELP_CREATE_USER_DUMP_CALLBACK; UserData: PVOID): BOOL; stdcall;
function EnumDirTree(hProcess: HANDLE; RootPath, InputPathName, OutputPathBuffer: PSTR;Callback: PENUMDIRTREE_CALLBACK; CallbackData: PVOID): BOOL; stdcall;
function EnumerateLoadedModules(hProcess: THandle;EnumLoadedModulesCallback: TEnumLoadedModulesCallback;UserContext: Pointer): Bool; stdcall;
function EnumerateLoadedModules64(hProcess: HANDLE; EnumLoadedModulesCallback: PENUMLOADED_MODULES_CALLBACK64;UserContext: PVOID): BOOL; stdcall;
function FindDebugInfoFile(FileName, SymbolPath, DebugFilePath: LPSTR): THandle; stdcall;
function FindDebugInfoFileEx(FileName, SymbolPath, DebugFilePath: PSTR;Callback: PFIND_DEBUG_FILE_CALLBACK; CallerData: PVOID): HANDLE; stdcall;{$EXTERNALSYM FindDebugInfoFileEx}typePFINDFILEINPATHCALLBACK = function(filename: PSTR; context: PVOID): BOOL; stdcall;
function FindExecutableImage(FileName, SymbolPath, ImageFilePath: LPSTR): THandle; stdcall;
function FindExecutableImageEx(FileName, SymbolPath, ImageFilePath: PSTR;Callback: PFIND_EXE_FILE_CALLBACK; CallerData: PVOID): HANDLE; stdcall;
function FindFileInPath(hprocess: HANDLE; SearchPath: LPSTR; FileName: LPSTR; id: PVOID; two: DWORD; three: DWORD; flags: DWORD; FilePath: LPSTR): BOOL; stdcall;
function FindFileInSearchPath(hprocess: HANDLE; SearchPath: LPSTR; FileName: LPSTR; one: DWORD; two: DWORD; three: DWORD; FilePath: LPSTR): BOOL; stdcall;
function GetImageConfigInformation(LoadedImage: PLoadedImage;var ImageConfigInformation: TImageLoadConfigDirectory): Bool; stdcall;
function GetImageUnusedHeaderBytes(LoadedImage: PLoadedImage;var SizeUnusedHeaderBytes: DWORD): DWORD; stdcall;
function GetTimestampForLoadedLibrary(Module: HMODULE): DWORD; stdcall;
function ImageAddCertificate(FileHandle: THandle;var Certificate: PWinCertificate; var Index: DWORD): Bool; stdcall;
function ImageDirectoryEntryToData(Base: Pointer; MappedAsImage: ByteBool;DirectoryEntry: Word; var Size: ULONG): Pointer; stdcall;
function ImageDirectoryEntryToDataEx(Base: PVOID; MappedAsImage: ByteBool;DirectoryEntry: USHORT; var Size: ULONG; var FoundHeader: PIMAGE_SECTION_HEADER): PVOID; stdcall;
function ImageEnumerateCertificates(FileHandle: THandle; TypeFilter: Word;CertificateCount, Indices: PDWORD; IndexCount: DWORD): Bool; stdcall;
function ImageGetCertificateData(FileHandle: THandle; CertificateIndex: DWORD;Certificate: PWinCertificate; var RequiredLength: DWORD): Bool; stdcall;
function ImageGetCertificateHeader(FileHandle: THandle; CertificateIndex: DWORD;var Certificateheader: PWinCertificate): Bool; stdcall;
function ImagehlpApiVersion: PApiVersion; stdcall;
function ImagehlpApiVersionEx(var AppVersion: TApiVersion): PApiVersion; stdcall;
function ImageLoad(DllName, DllPath: LPSTR): PLoadedImage; stdcall;
function ImageNtHeader(Base: Pointer): PImageNtHeaders; stdcall;
function ImageRemoveCertificate(FileHandle: THandle; Index: DWORD): Bool; stdcall;
function ImageRvaToSection(NtHeaders: PImageNtHeaders; Base: Pointer;Rva: ULONG): PImageSectionHeader; stdcall;
function ImageRvaToVa(NtHeaders: PImageNtHeaders; Base: Pointer;Rva: ULONG; LastRvaSection: PPImageSectionHeader): Pointer; stdcall; overload;
function ImageUnload(LoadedImage: PLoadedImage): Bool; stdcall;
function MakeSureDirectoryPathExists(DirPath: LPCSTR): Bool; stdcall;
function MapAndLoad(ImageName, DllPath: LPSTR; LoadedImage: PLoadedImage;DotDll, ReadOnly: Bool): Bool; stdcall;
function MapDebugInformation(FileHandle: THandle; FileName, SymbolPath: LPSTR;ImageBase: DWORD): PImageDebugInformation; stdcall;
function MapFileAndCheckSumA(Filename: PAnsiChar; var HeaderSum,CheckSum: DWORD): DWORD; stdcall;
function MapFileAndCheckSumW(Filename: PWideChar; var HeaderSum,CheckSum: DWORD): DWORD; stdcall;
function MiniDumpReadDumpStream(BaseOfDump: PVOID; StreamNumber: ULONG; var Dir: PMINIDUMP_DIRECTORY; var StreamPointer: PVOID; var StreamSize: ULONG): BOOL; stdcall;
function MiniDumpWriteDump(hProcess: HANDLE; ProcessId: DWORD; hFile: HANDLE; DumpType: MINIDUMP_TYPE; ExceptionParam: PMINIDUMP_EXCEPTION_INFORMATION; UserStreamParam: PMINIDUMP_USER_STREAM_INFORMATION; CallbackParam: PMINIDUMP_CALLBACK_INFORMATION): BOOL; stdcall;
function ReBaseImage(CurrentImageName, SymbolPath: LPSTR; fReBase,fRebaseSysfileOk, fGoingDown: Bool; CheckImageSize: ULONG;var OldImageSize, OldImageBase, NewImageSize, NewImageBase: ULONG;TimeStamp: ULONG): Bool; stdcall;
function ReBaseImage64(CurrentImageName: PSTR; SymbolPath: PSTR; fReBase: BOOL;fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;var OldImageSize: ULONG; var OldImageBase: ULONG64; var NewImageSize: ULONG;var NewImageBase: ULONG64; TimeStamp: ULONG): BOOL; stdcall;
function RemovePrivateCvSymbolic(DebugData: PChar; var NewDebugData: PChar;var NewDebugSize: ULONG): Bool; stdcall;
procedure RemoveRelocations(ImageName: PChar); stdcall;
function SearchTreeForFile(RootPath, InputPathName, OutputPathBuffer: LPSTR):Bool; stdcall;
function SetImageConfigInformation(LoadedImage: PLoadedImage;const ImageConfigInformation: TImageLoadConfigDirectory): Bool; stdcall;
function SplitSymbols(ImageName, SymbolsPath, SymbolFilePath: LPSTR;Flags: DWORD): Bool; stdcall;
function StackWalk(MachineType: DWORD; hProcess, hThread: THandle;StackFrame: PStackFrame; ContextRecord: Pointer;ReadMemoryRoutine: TReadProcessMemoryRoutine;FunctionTableAccessRoutine: TFunctionTableAccessRoutine;GetModuleBaseRoutine: TGetModuleBaseRoutine;TranslateAddress: TTranslateAddressRoutine): Bool; stdcall;
function StackWalk64(MachineType: DWORD; hProcess: HANDLE; hThread: HANDLE;var StackFrame: STACKFRAME64; ContextRecord: PVOID;ReadMemoryRoutine: PREAD_PROCESS_MEMORY_ROUTINE64;FunctionTableAccessRoutine: PFUNCTION_TABLE_ACCESS_ROUTINE64;GetModuleBaseRoutine: PGET_MODULE_BASE_ROUTINE64;TranslateAddress: PTRANSLATE_ADDRESS_ROUTINE64): BOOL; stdcall;{$EXTERNALSYM StackWalk64}typePREAD_PROCESS_MEMORY_ROUTINE = function(hProcess: HANDLE;lpBaseAddress: DWORD; lpBuffer: PVOID; nSize: DWORD;var lpNumberOfBytesRead: DWORD): BOOL; stdcall;
function SymAddSymbol(hProcess: HANDLE; BaseOfDll: ULONG64; Name: PCSTR; Address: DWORD64; Size, Flags: DWORD): BOOL; stdcall;
function SymCleanup(hProcess: THandle): Bool; stdcall;
function SymDeleteSymbol(hProcess: HANDLE; BaseOfDll: ULONG64; Name: PCSTR; Address: DWORD64; Flags: DWORD): BOOL; stdcall;{$EXTERNALSYM SymDeleteSymbol}//// Full user-mode dump creation.//typePDBGHELP_CREATE_USER_DUMP_CALLBACK = function(DataType: DWORD; var Data: PVOID; DataLength: LPDWORD; UserData: PVOID): BOOL; stdcall;
function SymEnumerateModules(hProcess: THandle;EnumModulesCallback: TSymEnumModulesCallback; UserContext: Pointer): Bool; stdcall;
function SymEnumerateModules64(hProcess: HANDLE; EnumModulesCallback: PSYM_ENUMMODULES_CALLBACK64;UserContext: PVOID): BOOL; stdcall;
function SymEnumerateSymbols(hProcess: THandle; BaseOfDll: DWORD;EnumSymbolsCallback: TSymEnumSymbolsCallback; UserContext: Pointer): Bool; stdcall;
function SymEnumerateSymbols64(hProcess: HANDLE; BaseOfDll: DWORD64;EnumSymbolsCallback: PSYM_ENUMSYMBOLS_CALLBACK64; UserContext: PVOID): BOOL; stdcall;
function SymEnumerateSymbolsW(hProcess: HANDLE; BaseOfDll: DWORD;EnumSymbolsCallback: PSYM_ENUMSYMBOLS_CALLBACKW; UserContext: PVOID): BOOL; stdcall;
function SymEnumerateSymbolsW64(hProcess: HANDLE; BaseOfDll: DWORD64;EnumSymbolsCallback: PSYM_ENUMSYMBOLS_CALLBACK64W; UserContext: PVOID): BOOL; stdcall;
function SymEnumSourceFiles(hProcess: HANDLE; ModBase: ULONG64; Mask: LPSTR;cbSrcFiles: PSYM_ENUMSOURCFILES_CALLBACK; UserContext: PVOID): BOOL; stdcall;
function SymEnumSym(hProcess: HANDLE; BaseOfDll: ULONG64; EnumSymbolsCallback: PSYM_ENUMERATESYMBOLS_CALLBACK; UserContext: PVOID): BOOL; stdcall;
function SymEnumSymbols(hProcess: HANDLE; BaseOfDll: ULONG64; Mask: PCSTR; EnumSymbolsCallback: PSYM_ENUMERATESYMBOLS_CALLBACK; UserContext: PVOID): BOOL; stdcall;
function SymEnumSymbolsForAddr(hProcess: HANDLE; Address: DWORD64;EnumSymbolsCallback: PSYM_ENUMERATESYMBOLS_CALLBACK; UserContext: PVOID): BOOL; stdcall;
function SymEnumTypes(hProcess: HANDLE; BaseOfDll: ULONG64; EnumSymbolsCallback: PSYM_ENUMERATESYMBOLS_CALLBACK; UserContext: PVOID): BOOL; stdcall;
function SymFindFileInPath(hprocess: HANDLE; SearchPath, FileName: LPSTR; id: PVOID; two, three, flags: DWORD;FoundFile: LPSTR; callback: PFINDFILEINPATHCALLBACK; context: PVOID): BOOL; stdcall;
function SymFromAddr(hProcess: HANDLE; Address: DWORD64; Displacement: PDWORD64; Symbol: PSYMBOL_INFO): BOOL; stdcall;
function SymFromName(hProcess: HANDLE; Name: LPSTR; Symbol: PSYMBOL_INFO): BOOL; stdcall;{$EXTERNALSYM SymFromName}typePSYM_ENUMERATESYMBOLS_CALLBACK = function(pSymInfo: PSYMBOL_INFO; SymbolSize: ULONG; UserContext: PVOID): BOOL; stdcall;
function SymFunctionTableAccess(hProcess: THandle; AddrBase: DWORD): Pointer; stdcall;
function SymFunctionTableAccess64(hProcess: HANDLE; AddrBase: DWORD64): PVOID; stdcall;
function SymGetLineFromAddr(hProcess: HANDLE; dwAddr: DWORD;var pdwDisplacement: DWORD; var Line: IMAGEHLP_LINE): BOOL; stdcall;
function SymGetLineFromAddr64(hProcess: HANDLE; qwAddr: DWORD64;var pdwDisplacement: DWORD; var Line64: IMAGEHLP_LINE64): BOOL; stdcall;
function SymGetLineFromName(hProcess: HANDLE; ModuleName: PSTR; FileName: PSTR;dwLineNumber: DWORD; var plDisplacement: LONG; var Line: IMAGEHLP_LINE): BOOL; stdcall;
function SymGetLineFromName64(hProcess: HANDLE; ModuleName: PSTR; FileName: PSTR;dwLineNumber: DWORD; var plDisplacement: LONG; var Line: IMAGEHLP_LINE64): BOOL; stdcall;
function SymGetLineNext(hProcess: HANDLE; var Line: IMAGEHLP_LINE): BOOL; stdcall;
function SymGetLineNext64(hProcess: HANDLE; var Line: IMAGEHLP_LINE64): BOOL; stdcall;
function SymGetLinePrev(hProcess: HANDLE; var Line: IMAGEHLP_LINE): BOOL; stdcall;
function SymGetLinePrev64(hProcess: HANDLE; var Line: IMAGEHLP_LINE64): BOOL; stdcall;
function SymGetModuleBase(hProcess: THandle; dwAddr: DWORD): DWORD; stdcall;
function SymGetModuleBase64(hProcess: HANDLE; qwAddr: DWORD64): DWORD64; stdcall;
function SymGetModuleInfo(hProcess: THandle; dwAddr: DWORD;var ModuleInfo: TImagehlpModule): Bool; stdcall;
function SymGetModuleInfo64(hProcess: HANDLE; qwAddr: DWORD64;var ModuleInfo: IMAGEHLP_MODULE64): BOOL; stdcall;
function SymGetModuleInfoW(hProcess: HANDLE; dwAddr: DWORD;var ModuleInfo: IMAGEHLP_MODULEW): BOOL; stdcall;
function SymGetModuleInfoW64(hProcess: HANDLE; qwAddr: DWORD64;var ModuleInfo: IMAGEHLP_MODULEW64): BOOL; stdcall;
function SymGetOptions: DWORD; stdcall;
function SymGetSearchPath(hProcess: THandle; SearchPath: LPSTR;SearchPathLength: DWORD): Bool; stdcall;
function SymGetSymFromAddr(hProcess: THandle; dwAddr: DWORD;pdwDisplacement: PDWORD; var Symbol: TImagehlpSymbol): Bool; stdcall;
function SymGetSymFromAddr64(hProcess: HANDLE; qwAddr: DWORD64; pdwDisplacement: PDWORD64; Symbol: PIMAGEHLP_SYMBOL64): BOOL; stdcall;
function SymGetSymFromName(hProcess: THandle; Name: LPSTR;var Symbol: TImagehlpSymbol): Bool; stdcall;
function SymGetSymFromName64(hProcess: HANDLE; Name: PSTR; Symbol: PIMAGEHLP_SYMBOL64): BOOL; stdcall;
function SymGetSymNext(hProcess: THandle; var Symbol: TImagehlpSymbol): Bool; stdcall;
function SymGetSymNext64(hProcess: HANDLE; var Symbol: IMAGEHLP_SYMBOL64): BOOL; stdcall;
function SymGetSymPrev(hProcess: THandle; var Symbol: TImagehlpSymbol): Bool; stdcall;
function SymGetSymPrev64(hProcess: HANDLE; var Symbol: IMAGEHLP_SYMBOL64): BOOL; stdcall;
function SymGetTypeFromName(hProcess: HANDLE; BaseOfDll: ULONG64; Name: LPSTR; Symbol: PSYMBOL_INFO): BOOL; stdcall;
function SymGetTypeInfo(hProcess: HANDLE; ModBase: DWORD64; TypeId: ULONG; GetType: IMAGEHLP_SYMBOL_TYPE_INFO; pInfo: PVOID): BOOL; stdcall;
function SymInitialize(hProcess: THandle; UserSearchPath: LPSTR;fInvadeProcess: Bool): Bool; stdcall;
function SymLoadModule(hProcess: THandle; hFile: THandle; ImageName,ModuleName: LPSTR; BaseOfDll, SizeOfDll: DWORD): Bool; stdcall;
function SymLoadModule64(hProcess, hFile: HANDLE; ImageName, ModuleName: PSTR;BaseOfDll: DWORD64; SizeOfDll: DWORD): DWORD64; stdcall;
function SymLoadModuleEx(hProcess, hFile: HANDLE; ImageName, ModuleName: PSTR; BaseOfDll: DWORD64;DllSize: DWORD; Data: PMODLOAD_DATA; Flag: DWORD): DWORD64; stdcall;
function SymMatchFileName(FileName, Match: PSTR; var FileNameStop, MatchStop: PSTR): BOOL; stdcall;
function SymMatchString(string_, expression: LPSTR; fCase: BOOL): BOOL; stdcall;{$EXTERNALSYM SymMatchString}typePSYM_ENUMSOURCFILES_CALLBACK = function(pSourceFile: PSOURCEFILE; UserContext: PVOID): BOOL; stdcall;
function SymRegisterCallback(hProcess: HANDLE; CallbackFunction: PSYMBOL_REGISTERED_CALLBACK;UserContext: PVOID): BOOL; stdcall;
function SymRegisterCallback64(hProcess: HANDLE; CallbackFunction: PSYMBOL_REGISTERED_CALLBACK64;UserContext: ULONG64): BOOL; stdcall;
function SymRegisterFunctionEntryCallback(hProcess: HANDLE; CallbackFunction: PSYMBOL_FUNCENTRY_CALLBACK;UserContext: PVOID): BOOL; stdcall;
function SymRegisterFunctionEntryCallback64(hProcess: HANDLE; CallbackFunction: PSYMBOL_FUNCENTRY_CALLBACK64;UserContext: ULONG64): BOOL; stdcall;
function SymSetContext(hProcess: HANDLE; StackFrame: PIMAGEHLP_STACK_FRAME; Context: PIMAGEHLP_CONTEXT): BOOL; stdcall;
function SymSetOptions(SymOptions: DWORD): DWORD; stdcall;
function SymSetSearchPath(hProcess: THandle; SearchPath: LPSTR): Bool; stdcall;
function SymUnDName(sym: PImagehlpSymbol; UnDecName: LPSTR;UnDecNameLength: DWORD): Bool; stdcall;
function SymUnDName64(const sym: IMAGEHLP_SYMBOL64; UnDecName: PSTR;UnDecNameLength: DWORD): BOOL; stdcall;
function SymUnloadModule(hProcess: THandle; BaseOfDll: DWORD): Bool; stdcall;
function SymUnloadModule64(hProcess: HANDLE; BaseOfDll: DWORD64): BOOL; stdcall;
function TouchFileTimes(FileHandle: THandle; const lpSystemTime: TSystemTime):Bool; stdcall;
function UnDecorateSymbolName(DecoratedName, UnDecoratedName: LPSTR;UndecoratedLength, Flags: DWORD): DWORD; stdcall;
function UnMapAndLoad(LoadedImage: PLoadedImage): Bool; stdcall;
function UnmapDebugInformation(DebugInfo: PImageDebugInformation): Bool; stdcall;
function UpdateDebugInfoFile(ImageFileName, SymbolPath, DebugFilePath: LPSTR;NtHeaders: PImageNtHeaders): Bool; stdcall;
function UpdateDebugInfoFileEx(ImageFileName, SymbolPath, DebugFilePath: LPSTR;NtHeaders: PImageNtHeaders; OldChecksum: DWORD): Bool; stdcall;
