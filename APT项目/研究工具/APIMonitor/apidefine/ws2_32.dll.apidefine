function accept(s: TSocket; addr: PSockAddr; addrlen: PINT): TSocket; stdcall;
function bind(s: TSocket; name: PSockAddr; namelen: Integer): Integer; stdcall;
function closesocket(s: TSocket): Integer; stdcall;
function connect(s: TSocket; name: PSockAddr; namelen: Integer): Integer; stdcall;
procedure freeaddrinfo(ai: PAddrInfo); stdcall;
function getaddrinfo(nodename, servname: PChar; hints: PAddrInfo; var res: PAddrInfo): Integer; stdcall;
function gethostbyaddr(addr: PChar; len, type_: Integer): PHostEnt; stdcall;
function gethostbyname(name: PChar): PHostEnt; stdcall;
function gethostname(name: PChar; namelen: Integer): Integer; stdcall;
function getnameinfo(sa: PSockAddr; salen: socklen_t; host: PChar; hostlen: DWORD; serv: PChar; servlen: DWORD; flags: Integer): Integer; stdcall;
function getpeername(s: TSocket; name: PSockAddr; var namelen: Integer): Integer; stdcall;
function getprotobyname(name: PChar): PProtoEnt; stdcall;
function getprotobynumber(number: Integer): PProtoEnt; stdcall;
function getservbyname(name, proto: PChar): PServEnt; stdcall;
function getservbyport(port: Integer; proto: PChar): PServEnt; stdcall;
function getsockname(s: TSocket; name: PSockAddr; var namelen: Integer): Integer; stdcall;
function getsockopt(s: TSocket; level, optname: Integer; optval: PChar; var optlen: Integer): Integer; stdcall;
function htonl(hostlong: u_long): u_long; stdcall;
function htons(hostshort: u_short): u_short; stdcall;
function inet_addr(cp: PChar): u_long; stdcall;
function inet_ntoa(inaddr: in_addr): PChar; stdcall;
function ioctlsocket(s: TSocket; cmd: Longint; var argp: u_long): Integer; stdcall;
function listen(s: TSocket; backlog: Integer): Integer; stdcall;
function ntohl(netlong: u_long): u_long; stdcall;
function ntohs(netshort: u_short): u_short; stdcall;
function recv(s: TSocket; var buf; len, flags: Integer): Integer; stdcall;
function recvfrom(s: TSocket; var buf; len, flags: Integer; from: PSockAddr; var fromlen: Integer): Integer; stdcall;
function select(nfds: Integer; readfds, writefds, exceptfds: PFdSet; timeout: PTimeVal): Integer; stdcall;
function send(s: TSocket; var buf; len, flags: Integer): Integer; stdcall;
function sendto(s: TSocket; var buf; len, flags: Integer; toaddr: PSockAddr; tolen: Integer): Integer; stdcall;
function setsockopt(s: TSocket; level, optname: Integer; optval: PChar; optlen: Integer): Integer; stdcall;
function shutdown(s: TSocket; how: Integer): Integer; stdcall;
function socket(af, type_, protocol: Integer): TSocket; stdcall;
function WSAAccept(s: TSocket; addr: PSockAddr; addrlen: PINT;lpfnCondition: LPCONDITIONPROC; dwCallbackData: DWORD): TSocket; stdcall;
function WSAAddressToStringA(lpsaAddress: LPSOCKADDR; dwAddressLength: DWORD;lpProtocolInfo: LPWSAPROTOCOL_INFOA; lpszAddressString: LPSTR;var lpdwAddressStringLength: DWORD): Integer; stdcall;
function WSAAddressToStringW(lpsaAddress: LPSOCKADDR; dwAddressLength: DWORD;lpProtocolInfo: LPWSAPROTOCOL_INFOW; lpszAddressString: LPWSTR;var lpdwAddressStringLength: DWORD): Integer; stdcall;
function WSAAsyncGetHostByAddr(hWnd: HWND; wMsg: u_int; addr: PChar;len, type_: Integer; buf: PChar; buflen: Integer): HANDLE; stdcall;
function WSAAsyncGetHostByName(hWnd: HWND; wMsg: u_int; name, buf: PChar;buflen: Integer): HANDLE; stdcall;
function WSAAsyncGetProtoByName(hWnd: HWND; wMsg: u_int; name, buf: PChar;buflen: Integer): HANDLE; stdcall;
function WSAAsyncGetProtoByNumber(hWnd: HWND; wMsg: u_int; number: Integer;buf: PChar; buflen: Integer): HANDLE; stdcall;
function WSAAsyncGetServByName(hWnd: HWND; wMsg: u_int; name, proto, buf: PChar;buflen: Integer): HANDLE; stdcall;
function WSAAsyncGetServByPort(hWnd: HWND; wMsg: u_int; port: Integer;proto, buf: PChar; buflen: Integer): HANDLE; stdcall;
function WSAAsyncSelect(s: TSocket; hWnd: HWND; wMsg: u_int; lEvent: Longint): Integer; stdcall;
function WSACancelAsyncRequest(hAsyncTaskHandle: HANDLE): Integer; stdcall;
function WSACancelBlockingCall: Integer; stdcall;
function WSACleanup: Integer; stdcall;
function WSACloseEvent(hEvent: WSAEVENT): BOOL; stdcall;
function WSAConnect(s: TSocket; name: PSockAddr; namelen: Integer; lpCallerData: LPWSABUF;lpCalleeData: LPWSABUF; lpSQOS: LPQOS; lpGQOS: LPQOS): Integer; stdcall;
function WSACreateEvent: WSAEVENT; stdcall;
function WSADuplicateSocketA(s: TSocket; dwProcessId: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFOA): Integer; stdcall;
function WSADuplicateSocketW(s: TSocket; dwProcessId: DWORD; lpProtocolInfo: LPWSAPROTOCOL_INFOW): Integer; stdcall;
function WSAEnumNameSpaceProvidersA(var lpdwBufferLength: DWORD; lpnspBuffer: LPWSANAMESPACE_INFOA): Integer; stdcall;
function WSAEnumNameSpaceProvidersW(var lpdwBufferLength: DWORD; lpnspBuffer: LPWSANAMESPACE_INFOW): Integer; stdcall;
function WSAEnumNetworkEvents(s: TSocket; hEventObject: WSAEVENT; lpNetworkEvents: LPWSANETWORKEVENTS): Integer; stdcall;
function WSAEnumProtocolsA(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOA;var lpdwBufferLength: DWORD): Integer; stdcall;
function WSAEnumProtocolsW(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOW;var lpdwBufferLength: DWORD): Integer; stdcall;
function WSAEventSelect(s: TSocket; hEventObject: WSAEVENT; lNetworkEvents: Longint): Integer; stdcall;
function WSAGetLastError: Integer; stdcall;
function WSAGetOverlappedResult(s: TSocket; lpOverlapped: LPWSAOVERLAPPED;var lpcbTransfer: DWORD; fWait: BOOL; var lpdwFlags: DWORD): BOOL; stdcall; // Thanks Kai Henningsen for var on lpdwFlags
function WSAGetQOSByName(s: TSocket; var lpQOSName: WSABUF; lpQOS: LPQOS): BOOL; stdcall;
function WSAGetServiceClassInfoA(const lpProviderId, lpServiceClassId: TGUID;var lpdwBufSize: DWORD; lpServiceClassInfo: LPWSASERVICECLASSINFOA): Integer; stdcall;
function WSAGetServiceClassInfoW(const lpProviderId, lpServiceClassId: TGUID;var lpdwBufSize: DWORD; lpServiceClassInfo: LPWSASERVICECLASSINFOW): Integer; stdcall;
function WSAGetServiceClassNameByClassIdA(const lpServiceClassId: TGUID;lpszServiceClassName: LPSTR; var lpdwBufferLength: DWORD): Integer; stdcall;
function WSAGetServiceClassNameByClassIdW(const lpServiceClassId: TGUID;lpszServiceClassName: LPWSTR; var lpdwBufferLength: DWORD): Integer; stdcall;
function WSAHtonl(s: TSocket; hostlong: u_long; var lpnetlong: u_long): Integer; stdcall;
function WSAHtons(s: TSocket; hostshort: u_short; var lpnetshort: u_short): Integer; stdcall;
function WSAInstallServiceClassA(lpServiceClassInfo: LPWSASERVICECLASSINFOA): Integer; stdcall;
function WSAInstallServiceClassW(lpServiceClassInfo: LPWSASERVICECLASSINFOW): Integer; stdcall;
function WSAIoctl(s: TSocket; dwIoControlCode: DWORD; lpvInBuffer: LPVOID; cbInBuffer: DWORD;lpvOutBuffer: LPVOID; cbOutBuffer: DWORD; var lpcbBytesReturned: DWORD;lpOverlapped: LPWSAOVERLAPPED; lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall;
function WSAIsBlocking: BOOL; stdcall;
function WSAJoinLeaf(s: TSocket; name: PSockAddr; namelen: Integer; lpCallerData: LPWSABUF;lpCalleeData: LPWSABUF; lpSQOS, lpGQOS: LPQOS; dwFlags: DWORD): TSocket; stdcall;
function WSALookupServiceBeginA(lpqsRestrictions: LPWSAQUERYSETA;dwControlFlags: DWORD; var lphLookup: HANDLE): Integer; stdcall;
function WSALookupServiceBeginW(lpqsRestrictions: LPWSAQUERYSETW;dwControlFlags: DWORD; var lphLookup: HANDLE): Integer; stdcall;
function WSALookupServiceEnd(hLookup: HANDLE): Integer; stdcall;
function WSALookupServiceNextA(hLookup: HANDLE; dwControlFlags: DWORD;var lpdwBufferLength: DWORD; lpqsResults: LPWSAQUERYSETA): Integer; stdcall;
function WSALookupServiceNextW(hLookup: HANDLE; dwControlFlags: DWORD;var lpdwBufferLength: DWORD; lpqsResults: LPWSAQUERYSETW): Integer; stdcall;
function WSANSPIoctl(hLookup: HANDLE; dwControlCode: DWORD; lpvInBuffer: LPVOID; cbInBuffer: DWORD;lpvOutBuffer: LPVOID; cbOutBuffer: DWORD; lpcbBytesReturned: LPDWORD; lpCompletion: LPWSACOMPLETION): Integer; stdcall;
function WSANtohl(s: TSocket; netlong: u_long; var lphostlong: u_long): Integer; stdcall;
function WSANtohs(s: TSocket; netshort: u_short; var lphostshort: u_short): Integer; stdcall;
function WSAProviderConfigChange(var lpNotificationHandle: HANDLE;lpOverlapped: LPWSAOVERLAPPED; lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall;
function WSARecv(s: TSocket; lpBuffers: LPWSABUF; dwBufferCount: DWORD;var lpNumberOfBytesRecvd, lpFlags: DWORD; lpOverlapped: LPWSAOVERLAPPED;lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall;
function WSARecvDisconnect(s: TSocket; lpInboundDisconnectData: LPWSABUF): Integer; stdcall;
function WSARecvFrom(s: TSocket; lpBuffers: LPWSABUF; dwBufferCount: DWORD;var lpNumberOfBytesRecvd, lpFlags: DWORD; lpFrom: PSockAddr; lpFromlen: PINT;lpOverlapped: LPWSAOVERLAPPED; lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall;
function WSARemoveServiceClass(const lpServiceClassId: TGUID): Integer; stdcall;
function WSAResetEvent(hEvent: WSAEVENT): BOOL; stdcall;
function WSASend(s: TSocket; lpBuffers: LPWSABUF; dwBufferCount: DWORD;var lpNumberOfBytesSent: DWORD; dwFlags: DWORD; lpOverlapped: LPWSAOVERLAPPED;lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall;
function WSASendDisconnect(s: TSocket; lpOutboundDisconnectData: LPWSABUF): Integer; stdcall;
function WSASendTo(s: TSocket; lpBuffers: LPWSABUF; dwBufferCount: DWORD;var lpNumberOfBytesSent: DWORD; dwFlags: DWORD; lpTo: PSockAddr; iTolen: Integer;lpOverlapped: LPWSAOVERLAPPED; lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE): Integer; stdcall;
function WSASetBlockingHook(lpBlockFunc: FARPROC): FARPROC; stdcall;
function WSASetEvent(hEvent: WSAEVENT): BOOL; stdcall;
procedure WSASetLastError(iError: Integer); stdcall;
function WSASetServiceA(lpqsRegInfo: LPWSAQUERYSETA; essoperation: WSAESETSERVICEOP;dwControlFlags: DWORD): Integer; stdcall;
function WSASetServiceW(lpqsRegInfo: LPWSAQUERYSETW; essoperation: WSAESETSERVICEOP;dwControlFlags: DWORD): Integer; stdcall;
function WSASocketA(af, type_, protocol: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFOA;g: GROUP; dwFlags: DWORD): TSocket; stdcall;
function WSASocketW(af, type_, protocol: Integer; lpProtocolInfo: LPWSAPROTOCOL_INFOW;g: GROUP; dwFlags: DWORD): TSocket; stdcall;
function WSAStartup(wVersionRequired: WORD; var lpWSAData: TWSAData): Integer; stdcall;
function WSAStringToAddressA(AddressString: LPSTR; AddressFamily: Integer;lpProtocolInfo: LPWSAPROTOCOL_INFOA; lpAddress: LPSOCKADDR;var lpAddressLength: Integer): Integer; stdcall;
function WSAStringToAddressW(AddressString: LPWSTR; AddressFamily: Integer;lpProtocolInfo: LPWSAPROTOCOL_INFOW; lpAddress: LPSOCKADDR;var lpAddressLength: Integer): Integer; stdcall;
function WSAUnhookBlockingHook: Integer; stdcall;
function WSAWaitForMultipleEvents(cEvents: DWORD; lphEvents: PWSAEVENT;fWaitAll: BOOL; dwTimeout: DWORD; fAlertable: BOOL): DWORD; stdcall;
function WSCDeinstallProvider(const lpProviderId: TGUID; var lpErrno: Integer): Integer; stdcall;{$EXTERNALSYM WSCDeinstallProvider}typeLPWSCDEINSTALLPROVIDER = function(const lpProviderId: TGUID; var lpErrno: Integer): Integer; stdcall;
function WSCDeinstallProvider32(lpProviderId: PGUID; lpErrno: PINT): Integer; stdcall;
function WSCEnableNSProvider(const lpProviderId: TGUID; fEnable: BOOL): Integer; stdcall;{$EXTERNALSYM WSCEnableNSProvider}typeLPWSCENABLENSPROVIDER = function(const lpProviderId: TGUID; fEnable: BOOL): Integer; stdcall;
function WSCEnableNSProvider32(lpProviderId: PGUID; fEnable: BOOL): Integer; stdcall;{$EXTERNALSYM WSCEnableNSProvider32}{$ENDIF _WIN64}(** Pointers to the individual entries in the namespace proc table.*)typeLPNSPCLEANUP = function(const lpProviderId: TGUID): Integer; stdcall;{$EXTERNALSYM LPNSPCLEANUP}TNspCleanup = LPNSPCLEANUP;LPNSPLOOKUPSERVICEBEGIN = function(const lpProviderId: TGUID;lpqsRestrictions: LPWSAQUERYSETW; lpServiceClassInfo: LPWSASERVICECLASSINFOW;dwControlFlags: DWORD; lphLookup: LPHANDLE): Integer; stdcall;
function WSCEnumNameSpaceProviders32(lpdwBufferLength: LPDWORD; lpnspBuffer: LPWSANAMESPACE_INFOW): Integer; stdcall;
function WSCEnumProtocols(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOW;var lpdwBufferLength: DWORD; var lpErrno: Integer): Integer; stdcall;{$EXTERNALSYM WSCEnumProtocols}typeLPWSCENUMPROTOCOLS = function(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOW;var lpdwBufferLength: DWORD; var lpErrno: Integer): Integer; stdcall;
function WSCEnumProtocols32(lpiProtocols: PINT; lpProtocolBuffer: LPWSAPROTOCOL_INFOW; lpdwBufferLength: LPDWORD; lpErrno: PINT): Integer; stdcall;
function WSCGetProviderPath(const lpProviderId: TGUID; lpszProviderDllPath: PWCHAR;var lpProviderDllPathLen, lpErrno: Integer): Integer; stdcall;{$EXTERNALSYM WSCGetProviderPath}typeLPWSCGETPROVIDERPATH = function(const lpProviderId: TGUID; lpszProviderDllPath: PWCHAR;var lpProviderDllPathLen, lpErrno: Integer): Integer; stdcall;
function WSCGetProviderPath32(lpProviderId: PGUID; lpszProviderDllPath: PWCHAR; lpProviderDllPathLen: PINT; lpErrno: PINT): Integer; stdcall;
function WSCInstallNameSpace(lpszIdentifier, lpszPathName: LPWSTR; dwNameSpace,dwVersion: DWORD; const lpProviderId: TGUID): Integer; stdcall;{$EXTERNALSYM WSCInstallNameSpace}typeLPWSCINSTALLNAMESPACE = function(lpszIdentifier, lpszPathName: LPWSTR;dwNameSpace, dwVersion: DWORD; const lpProviderId: TGUID): Integer; stdcall;
function WSCInstallNameSpace32(lpszIdentifier, lpszPathName: LPWSTR; dwNameSpace, dwVersion: DWORD; lpProviderId: PGUID): Integer; stdcall;
function WSCInstallProvider(const lpProviderId: TGUID; lpszProviderDllPath: PWCHAR;lpProtocolInfoList: LPWSAPROTOCOL_INFOW; dwNumberOfEntries: DWORD; var lpErrno: Integer): Integer; stdcall;{$EXTERNALSYM WSCInstallProvider}typeLPWSCINSTALLPROVIDER = function(const lpProviderId: TGUID; lpszProviderDllPath: PWCHAR;lpProtocolInfoList: LPWSAPROTOCOL_INFOW; dwNumberOfEntries: DWORD; var lpErrno: Integer): Integer; stdcall;
function WSCInstallProvider64_32(lpProviderId: PGUID; lpszProviderDllPath: PWCHAR; lpProtocolInfoList: LPWSAPROTOCOL_INFOW;dwNumberOfEntries: DWORD; lpErrno: PINT): Integer; stdcall;
function WSCUnInstallNameSpace(const lpProviderId: TGUID): Integer; stdcall;{$EXTERNALSYM WSCUnInstallNameSpace}typeLPWSCUNINSTALLNAMESPACE = function(const lpProviderId: TGUID): Integer; stdcall;
function WSCUnInstallNameSpace32(lpProviderId: PGUID): Integer; stdcall;
function WSCUpdateProvider(lpProviderId: PGUID; lpszProviderDllPath: PWCHAR; lpProtocolInfoList: LPWSAPROTOCOL_INFOW;dwNumberOfEntries: DWORD; lpErrno: PINT): Integer; stdcall;{$EXTERNALSYM WSCUpdateProvider}typeLPWSCUPDATEPROVIDER = function(lpProviderId: PGUID; lpszProviderDllPath: PWCHAR; lpProtocolInfoList: LPWSAPROTOCOL_INFOW;dwNumberOfEntries: DWORD; lpErrno: PINT): Integer; stdcall;
function WSCUpdateProvider32(lpProviderId: PGUID; lpszProviderDllPath: PWCHAR; lpProtocolInfoList: LPWSAPROTOCOL_INFOW;dwNumberOfEntries: DWORD; lpErrno: PINT): Integer; stdcall;
function __WSAFDIsSet(s: TSocket; var FDSet: TFDSet): Integer; stdcall;
