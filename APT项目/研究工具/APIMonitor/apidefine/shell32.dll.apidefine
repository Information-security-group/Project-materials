function CommandLineToArgvW(lpCmdLine: LPCWSTR; var pNumArgs: Integer): PPWideChar; stdcall;
function DoEnvironmentSubstA(szString: PAnsiChar; cbString: UINT): DWORD; stdcall;
function DoEnvironmentSubstW(szString: PWideChar; cbString: UINT): DWORD; stdcall;
procedure DragAcceptFiles(Wnd: HWND; Accept: BOOL); stdcall;
procedure DragFinish(Drop: HDROP); stdcall;
function DragQueryFileA(Drop: HDROP; FileIndex: UINT; FileName: PAnsiChar; cb: UINT): UINT; stdcall;
function DragQueryFileW(Drop: HDROP; FileIndex: UINT; FileName: PWideChar; cb: UINT): UINT; stdcall;
function DragQueryPoint(Drop: HDROP; var Point: TPoint): BOOL; stdcall;
function DuplicateIcon(hInst: HINST; Icon: HICON): HICON; stdcall;
function ExtractAssociatedIconA(hInst: HINST; lpIconPath: PAnsiChar;var lpiIcon: Word): HICON; stdcall;
function ExtractAssociatedIconW(hInst: HINST; lpIconPath: PWideChar;var lpiIcon: Word): HICON; stdcall;
function ExtractIconA(hInst: HINST; lpszExeFileName: PAnsiChar;nIconIndex: UINT): HICON; stdcall;
function ExtractIconExA(lpszFile: PAnsiChar; nIconIndex: Integer;var phiconLarge, phiconSmall: HICON; nIcons: UINT): UINT; stdcall;
function ExtractIconExW(lpszFile: PWideChar; nIconIndex: Integer;var phiconLarge, phiconSmall: HICON; nIcons: UINT): UINT; stdcall;
function ExtractIconW(hInst: HINST; lpszExeFileName: PWideChar;nIconIndex: UINT): HICON; stdcall;
function FindExecutableA(FileName, Directory: PAnsiChar; Result: PAnsiChar): HINST; stdcall;
function FindExecutableW(FileName, Directory: PWideChar; Result: PWideChar): HINST; stdcall;
procedure SHAddToRecentDocs(uFlags: UINT; pv: Pointer); stdcall;
function SHAppBarMessage(dwMessage: DWORD; var pData: TAppBarData): UINT; stdcall;
function SHBrowseForFolderA(var lpbi: TBrowseInfoA): PItemIDList; stdcall;
function SHBrowseForFolderW(var lpbi: TBrowseInfoW): PItemIDList; stdcall;
procedure SHChangeNotify(wEventId: Longint; uFlags: UINT;dwItem1, dwItem2: Pointer); stdcall;
function ShellAboutA(Wnd: HWND; szApp, szOtherStuff: PAnsiChar; Icon: HICON): Integer; stdcall;
function ShellAboutW(Wnd: HWND; szApp, szOtherStuff: PWideChar; Icon: HICON): Integer; stdcall;
function ShellExecuteA(hWnd: HWND; Operation, FileName, Parameters,Directory: PAnsiChar; ShowCmd: Integer): HINST; stdcall;
function ShellExecuteExA(lpExecInfo: PShellExecuteInfoA):BOOL; stdcall;
function ShellExecuteExW(lpExecInfo: PShellExecuteInfoW):BOOL; stdcall;
function ShellExecuteW(hWnd: HWND; Operation, FileName, Parameters,Directory: PWideChar; ShowCmd: Integer): HINST; stdcall;
function Shell_NotifyIconA(dwMessage: DWORD; lpData: PNotifyIconDataA): BOOL; stdcall;
function Shell_NotifyIconW(dwMessage: DWORD; lpData: PNotifyIconDataW): BOOL; stdcall;
function SHFileOperationA(const lpFileOp: TSHFileOpStructA): Integer; stdcall;
function SHFileOperationW(const lpFileOp: TSHFileOpStructW): Integer; stdcall;
procedure SHFreeNameMappings(hNameMappings: THandle); stdcall;
function SHGetDataFromIDListA(psf: IShellFolder; pidl: PItemIDList;nFormat: Integer; ptr: Pointer; cb: Integer): HResult; stdcall;
function SHGetDataFromIDListW(psf: IShellFolder; pidl: PItemIDList;nFormat: Integer; ptr: Pointer; cb: Integer): HResult; stdcall;
function SHGetDesktopFolder(var ppshf: IShellFolder): HResult; stdcall;
function SHGetFileInfoA(pszPath: PAnsiChar; dwFileAttributes: DWORD;var psfi: TSHFileInfoA; cbFileInfo, uFlags: UINT): DWORD; stdcall;
function SHGetFileInfoW(pszPath: PAnsiChar; dwFileAttributes: DWORD;var psfi: TSHFileInfoW; cbFileInfo, uFlags: UINT): DWORD; stdcall;
function SHGetInstanceExplorer(var ppUnk: IUnknown): HResult; stdcall;
function SHGetMalloc(var ppMalloc: IMalloc): HResult; stdcall;
function SHGetPathFromIDListA(pidl: PItemIDList; pszPath: PAnsiChar): BOOL; stdcall;
function SHGetPathFromIDListW(pidl: PItemIDList; pszPath: PWideChar): BOOL; stdcall;
procedure SHGetSettings(var lpss: TShellFlagState; dwMask: DWORD); stdcall;
function SHGetSpecialFolderLocation(hwndOwner: HWND; nFolder: Integer;var ppidl: PItemIDList): HResult; stdcall;
function SHGetSpecialFolderPathA(hwndOwner: HWND; lpszPath: PAnsiChar;nFolder: Integer; fCreate: BOOL): BOOL; stdcall;
function SHGetSpecialFolderPathW(hwndOwner: HWND; lpszPath: PWideChar;nFolder: Integer; fCreate: BOOL): BOOL; stdcall;{$EXTERNALSYM SHGetSpecialFolderPathW}{ SHBrowseForFolder API }type{$EXTERNALSYM BFFCALLBACK}BFFCALLBACK = function(Wnd: HWND; uMsg: UINT; lParam, lpData: LPARAM): Integer stdcall;
function SHLoadInProc(rclsid: TCLSID): HRESULT; stdcall;
function SoftwareUpdateMessageBox(hWnd: HWND; szDistUnit: PWideChar;dwFlags: DWORD; var psdi: TSoftDistInfo): DWORD; stdcall;
